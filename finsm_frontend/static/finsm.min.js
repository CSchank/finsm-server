(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File === 'function' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList === 'function' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F2(function(request, maybeProgress)
{
	return _Scheduler_binding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		_Http_configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_Scheduler_fail($elm$http$Http$NetworkError));
		});
		xhr.addEventListener('timeout', function() {
			callback(_Scheduler_fail($elm$http$Http$Timeout));
		});
		xhr.addEventListener('load', function() {
			callback(_Http_handleResponse(xhr, request.expect.a));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_Scheduler_fail($elm$http$Http$BadUrl(request.url)));
		}

		_Http_configureRequest(xhr, request);

		var body = request.body;
		xhr.send($elm$http$Http$Internal$isStringBody(body)
			? (xhr.setRequestHeader('Content-Type', body.a), body.b)
			: body.a
		);

		return function() { xhr.abort(); };
	});
});

function _Http_configureProgress(xhr, maybeProgress)
{
	if (!$elm$core$Maybe$isJust(maybeProgress))
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_Scheduler_rawSpawn(maybeProgress.a({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}

	xhr.responseType = request.expect.b;
	xhr.withCredentials = request.withCredentials;

	$elm$core$Maybe$isJust(request.timeout) && (xhr.timeout = request.timeout.a);
}


// RESPONSES

function _Http_handleResponse(xhr, responseToResult)
{
	var response = _Http_toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _Scheduler_fail($elm$http$Http$BadStatus(response));
	}

	var result = responseToResult(response);

	if ($elm$core$Result$isOk(result))
	{
		return _Scheduler_succeed(result.a);
	}
	else
	{
		response.body = xhr.responseText;
		return _Scheduler_fail(A2($elm$http$Http$BadPayload, result.a, response));
	}
}

function _Http_toResponse(xhr)
{
	return {
		url: xhr.responseURL,
		status: { code: xhr.status, message: xhr.statusText },
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders()),
		body: xhr.response
	};
}

function _Http_parseHeaders(rawHeaders)
{
	var headers = $elm$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function _Http_expectStringResponse(responseToResult)
{
	return {
		$: 0,
		b: 'text',
		a: responseToResult
	};
}

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		b: expect.b,
		a: function(response) {
			var convertedResponse = expect.a(response);
			return A2($elm$core$Result$map, func, convertedResponse);
		}
	};
});


// BODY

function _Http_multipart(parts)
{


	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}

	return $elm$http$Http$Internal$FormDataBody(formData);
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $author$project$Main$BMsg = function (a) {
	return {$: 'BMsg', a: a};
};
var $author$project$Main$EMsg = function (a) {
	return {$: 'EMsg', a: a};
};
var $author$project$Main$GetTZ = function (a) {
	return {$: 'GetTZ', a: a};
};
var $author$project$Main$GetTime = function (a) {
	return {$: 'GetTime', a: a};
};
var $author$project$Main$KeyPressed = function (a) {
	return {$: 'KeyPressed', a: a};
};
var $author$project$Main$KeyReleased = function (a) {
	return {$: 'KeyReleased', a: a};
};
var $author$project$Main$SMsg = function (a) {
	return {$: 'SMsg', a: a};
};
var $author$project$Main$SaveMsg = function (a) {
	return {$: 'SaveMsg', a: a};
};
var $author$project$Main$UrlChange = function (a) {
	return {$: 'UrlChange', a: a};
};
var $author$project$Main$UrlRequest = function (a) {
	return {$: 'UrlRequest', a: a};
};
var $author$project$Main$VisibilityChanged = function (a) {
	return {$: 'VisibilityChanged', a: a};
};
var $author$project$Main$WindowSize = function (a) {
	return {$: 'WindowSize', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Graphics = function (a) {
	return {$: 'Graphics', a: a};
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Basics$not = _Basics_not;
var $MacCASOutreach$graphicsvg$GraphicSVG$convertCoords = F2(
	function (_v0, gModel) {
		var x = _v0.a;
		var y = _v0.b;
		var sw = gModel.sw;
		var sh = gModel.sh;
		var cw = gModel.cw;
		var ch = gModel.ch;
		var aspectout = (!(!sh)) ? (sw / sh) : (4 / 3);
		var aspectin = (!(!ch)) ? (cw / ch) : (4 / 3);
		var scaledInX = _Utils_cmp(aspectout, aspectin) < 0;
		var scaledInY = _Utils_cmp(aspectout, aspectin) > 0;
		var cscale = scaledInX ? (sw / cw) : (scaledInY ? (sh / ch) : 1);
		return _Utils_Tuple2((x - (sw / 2)) / cscale, (y + (sh / 2)) / cscale);
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $MacCASOutreach$graphicsvg$GraphicSVG$hiddenAppUpdate = F4(
	function (userView, userUpdate, msg, _v0) {
		var userModel = _v0.a;
		var gModel = _v0.b;
		var mapUserCmd = function (cmd) {
			return A2($elm$core$Platform$Cmd$map, $MacCASOutreach$graphicsvg$GraphicSVG$Graphics, cmd);
		};
		var _v1 = userView(userModel).body;
		var _v2 = _v1.a;
		var cw = _v2.a;
		var ch = _v2.b;
		switch (msg.$) {
			case 'Graphics':
				var message = msg.a;
				var _v4 = A2(userUpdate, message, userModel);
				var newModel = _v4.a;
				var userCmds = _v4.b;
				return _Utils_Tuple2(
					_Utils_Tuple2(
						newModel,
						_Utils_update(
							gModel,
							{ch: ch, cw: cw})),
					mapUserCmd(userCmds));
			case 'WindowResize':
				var _v5 = msg.a;
				var width = _v5.a;
				var height = _v5.b;
				return _Utils_Tuple2(
					_Utils_Tuple2(
						userModel,
						_Utils_update(
							gModel,
							{sh: height, sw: width})),
					$elm$core$Platform$Cmd$none);
			default:
				var message = msg.a;
				var _v6 = msg.b;
				var x = _v6.a;
				var y = _v6.b;
				var _v7 = A2(
					userUpdate,
					message(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$convertCoords,
							_Utils_Tuple2(x, y),
							gModel)),
					userModel);
				var newModel = _v7.a;
				var userCmds = _v7.b;
				return _Utils_Tuple2(
					_Utils_Tuple2(newModel, gModel),
					mapUserCmd(userCmds));
		}
	});
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $MacCASOutreach$graphicsvg$GraphicSVG$cPath = F2(
	function (w, h) {
		return A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id('cPath')
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$rect,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(w)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(h)),
									$elm$svg$Svg$Attributes$x(
									$elm$core$String$fromFloat((-w) / 2)),
									$elm$svg$Svg$Attributes$y(
									$elm$core$String$fromFloat((-h) / 2))
								]),
							_List_Nil)
						]))
				]));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition = F2(
	function (a, b) {
		return {$: 'ReturnPosition', a: a, b: b};
	});
var $elm$svg$Svg$a = $elm$svg$Svg$trustedNode('a');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$core$Basics$cos = _Basics_cos;
var $elm$core$Basics$sin = _Basics_sin;
var $MacCASOutreach$graphicsvg$GraphicSVG$coalesce = function (_v0) {
	var _v1 = _v0.a;
	var _v2 = _v1.a;
	var a = _v2.a;
	var b = _v2.b;
	var _v3 = _v1.b;
	var c = _v3.a;
	var d = _v3.b;
	var _v4 = _v1.c;
	var tx = _v4.a;
	var ty = _v4.b;
	var _v5 = _v0.b;
	var _v6 = _v5.a;
	var sx = _v6.a;
	var sy = _v6.b;
	var rot = _v5.b;
	var _v7 = _v5.c;
	var shx = _v7.a;
	var shy = _v7.b;
	var sd = sy * d;
	var sc = sx * c;
	var sb = sy * b;
	var sa = sx * a;
	var ry = $elm$core$Basics$sin(rot);
	var rx = $elm$core$Basics$cos(rot);
	return _Utils_Tuple2(
		_Utils_Tuple3(
			_Utils_Tuple2((rx * sa) - (ry * sb), (ry * sa) + (rx * sb)),
			_Utils_Tuple2((rx * sc) - (ry * sd), (ry * sc) + (rx * sd)),
			_Utils_Tuple2((tx + (a * shx)) + (c * shy), (ty + (b * shx)) + (d * shy))),
		_Utils_Tuple3(
			_Utils_Tuple2(1, 1),
			0,
			_Utils_Tuple2(0, 0)));
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$contenteditable = $elm$html$Html$Attributes$boolProperty('contentEditable');
var $MacCASOutreach$graphicsvg$GraphicSVG$pairToString = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (',' + $elm$core$String$fromFloat(y));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$bezierStringHelper = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	var b = _v1.b;
	var _v2 = _v0.b;
	var c = _v2.a;
	var d = _v2.b;
	return ' Q ' + ($MacCASOutreach$graphicsvg$GraphicSVG$pairToString(
		_Utils_Tuple2(a, b)) + (' ' + $MacCASOutreach$graphicsvg$GraphicSVG$pairToString(
		_Utils_Tuple2(c, d))));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$createBezierString = F2(
	function (first, list) {
		return 'M ' + ($MacCASOutreach$graphicsvg$GraphicSVG$pairToString(first) + $elm$core$String$concat(
			A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$bezierStringHelper, list)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Inked = F3(
	function (a, b, c) {
		return {$: 'Inked', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$filled = F2(
	function (color, stencil) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, color, $elm$core$Maybe$Nothing, stencil);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$move = F2(
	function (disp, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Move, disp, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Rect = F2(
	function (a, b) {
		return {$: 'Rect', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$rect = F2(
	function (w, h) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Rect, w, h);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraphX = F5(
	function (h, s, th, c, x) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(x * s, 0),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				c,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, th, h)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraphY = F5(
	function (w, s, th, c, y) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, y * s),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				c,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, w, th)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Group = function (a) {
	return {$: 'Group', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$group = function (shapes) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$Group(shapes);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraph = F4(
	function (_v0, s, th, c) {
		var w = _v0.a;
		var h = _v0.b;
		var syi = $elm$core$Basics$ceiling(h / (s * 2));
		var ylisti = A2($elm$core$List$range, -syi, syi);
		var sxi = $elm$core$Basics$ceiling(w / (s * 2));
		var xlisti = A2($elm$core$List$range, -sxi, sxi);
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_Utils_ap(
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						A4($MacCASOutreach$graphicsvg$GraphicSVG$createGraphX, h, s, th, c),
						$elm$core$Basics$toFloat),
					xlisti),
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						A4($MacCASOutreach$graphicsvg$GraphicSVG$createGraphY, w, s, th, c),
						$elm$core$Basics$toFloat),
					ylisti)));
	});
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$ellipse = $elm$svg$Svg$trustedNode('ellipse');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $MacCASOutreach$graphicsvg$GraphicSVG$ident = _Utils_Tuple2(
	_Utils_Tuple3(
		_Utils_Tuple2(1, 0),
		_Utils_Tuple2(0, 1),
		_Utils_Tuple2(0, 0)),
	_Utils_Tuple3(
		_Utils_Tuple2(1, 1),
		0,
		_Utils_Tuple2(0, 0)));
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$svg$Svg$mask = $elm$svg$Svg$trustedNode('mask');
var $elm$svg$Svg$Attributes$mask = _VirtualDom_attribute('mask');
var $MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha = function (_v0) {
	var a = _v0.d;
	return $elm$core$String$fromFloat(a);
};
var $elm$core$Basics$round = _Basics_round;
var $elm$core$Basics$modBy = _Basics_modBy;
var $MacCASOutreach$graphicsvg$GraphicSVG$toHexHelper = function (dec) {
	switch (dec) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'A';
		case 11:
			return 'B';
		case 12:
			return 'C';
		case 13:
			return 'D';
		case 14:
			return 'E';
		case 15:
			return 'F';
		default:
			return '';
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$toHex = function (dec) {
	var second = A2($elm$core$Basics$modBy, 16, dec);
	var first = (dec / 16) | 0;
	return _Utils_ap(
		$MacCASOutreach$graphicsvg$GraphicSVG$toHexHelper(first),
		$MacCASOutreach$graphicsvg$GraphicSVG$toHexHelper(second));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$mkRGB = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return '#' + ($MacCASOutreach$graphicsvg$GraphicSVG$toHex(
		$elm$core$Basics$round(r)) + ($MacCASOutreach$graphicsvg$GraphicSVG$toHex(
		$elm$core$Basics$round(g)) + $MacCASOutreach$graphicsvg$GraphicSVG$toHex(
		$elm$core$Basics$round(b))));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$moveT = F2(
	function (_v0, _v3) {
		var trans = _v0.a;
		var _v1 = _v0.b;
		var s = _v1.a;
		var r = _v1.b;
		var _v2 = _v1.c;
		var tx = _v2.a;
		var ty = _v2.b;
		var u = _v3.a;
		var v = _v3.b;
		return _Utils_Tuple2(
			trans,
			_Utils_Tuple3(
				s,
				r,
				_Utils_Tuple2(tx + u, ty + v)));
	});
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, -y);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $MacCASOutreach$graphicsvg$GraphicSVG$onEnterAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseover',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onLeaveAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMouseDownAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMouseUpAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMoveAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousemove',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTapAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchEnd = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchend',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchPos = F2(
	function (a, b) {
		return {$: 'TouchPos', a: a, b: b};
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0']),
			A3(
				$elm$json$Json$Decode$map2,
				$MacCASOutreach$graphicsvg$GraphicSVG$TouchPos,
				A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
				A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float))),
			A3(
			$elm$json$Json$Decode$map2,
			$MacCASOutreach$graphicsvg$GraphicSVG$TouchPos,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float))
		]));
var $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair = function (tp) {
	var x = tp.a;
	var y = tp.b;
	return _Utils_Tuple2(x, -y);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchMove = function (msg) {
	return A2(
		$elm$html$Html$Events$preventDefaultOn,
		'touchmove',
		A2(
			$elm$json$Json$Decode$map,
			function (a) {
				return _Utils_Tuple2(
					A2($elm$core$Basics$composeL, msg, $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair)(a),
					true);
			},
			$MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchStart = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchstart',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchstart',
		A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeL, msg, $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair),
			$MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder));
};
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $MacCASOutreach$graphicsvg$GraphicSVG$rotT = F2(
	function (_v0, rad) {
		var trans = _v0.a;
		var _v1 = _v0.b;
		var s = _v1.a;
		var r = _v1.b;
		var t = _v1.c;
		return _Utils_Tuple2(
			trans,
			_Utils_Tuple3(s, r + rad, t));
	});
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $MacCASOutreach$graphicsvg$GraphicSVG$scaleT = F2(
	function (_v0, _v4) {
		var trans = _v0.a;
		var _v1 = _v0.b;
		var _v2 = _v1.a;
		var ssx = _v2.a;
		var ssy = _v2.b;
		var r = _v1.b;
		var _v3 = _v1.c;
		var shx = _v3.a;
		var shy = _v3.b;
		var sx = _v4.a;
		var sy = _v4.b;
		return _Utils_Tuple2(
			trans,
			_Utils_Tuple3(
				_Utils_Tuple2(ssx * sx, ssy * sy),
				r,
				_Utils_Tuple2(shx, shy)));
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $elm$svg$Svg$Attributes$target = _VirtualDom_attribute('target');
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$Attributes$textAnchor = _VirtualDom_attribute('text-anchor');
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $MacCASOutreach$graphicsvg$GraphicSVG$RGBA = F4(
	function (a, b, c, d) {
		return {$: 'RGBA', a: a, b: b, c: c, d: d};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$white = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 255, 255, 255, 1);
var $elm$svg$Svg$Attributes$xlinkHref = function (value) {
	return A3(
		_VirtualDom_attributeNS,
		'http://www.w3.org/1999/xlink',
		'xlink:href',
		_VirtualDom_noJavaScriptUri(value));
};
var $elm$svg$Svg$Attributes$xmlSpace = A2(_VirtualDom_attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var $MacCASOutreach$graphicsvg$GraphicSVG$createSVG = F5(
	function (id, w, h, trans, shape) {
		createSVG:
		while (true) {
			switch (shape.$) {
				case 'Inked':
					var fillClr = shape.a;
					var lt = shape.b;
					var stencil = shape.c;
					var strokeAttrs = function () {
						if (lt.$ === 'Nothing') {
							return _List_Nil;
						} else {
							if (lt.a.a.$ === 'Solid') {
								var _v11 = lt.a;
								var th = _v11.a.a;
								var strokeClr = _v11.b;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(th)),
										$elm$svg$Svg$Attributes$stroke(
										$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(strokeClr)),
										$elm$svg$Svg$Attributes$strokeOpacity(
										$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(strokeClr))
									]);
							} else {
								var _v12 = lt.a;
								var _v13 = _v12.a;
								var dashes = _v13.a;
								var th = _v13.b;
								var strokeClr = _v12.b;
								return _Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$strokeWidth(
											$elm$core$String$fromFloat(th)),
											$elm$svg$Svg$Attributes$stroke(
											$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(strokeClr)),
											$elm$svg$Svg$Attributes$strokeOpacity(
											$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(strokeClr))
										]),
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$strokeDasharray(
											$elm$core$String$concat(
												A2(
													$elm$core$List$intersperse,
													',',
													A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, dashes))))
										]));
							}
						}
					}();
					var clrAttrs = _List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(fillClr)),
							$elm$svg$Svg$Attributes$fillOpacity(
							$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(fillClr))
						]);
					var _v1 = $MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans);
					var _v2 = _v1.a;
					var _v3 = _v2.a;
					var a = _v3.a;
					var b = _v3.b;
					var _v4 = _v2.b;
					var c = _v4.a;
					var d = _v4.b;
					var _v5 = _v2.c;
					var tx = _v5.a;
					var ty = _v5.b;
					var transAttrs = _List_fromArray(
						[
							$elm$svg$Svg$Attributes$transform(
							'matrix(' + ($elm$core$String$concat(
								A2(
									$elm$core$List$intersperse,
									',',
									A2(
										$elm$core$List$map,
										$elm$core$String$fromFloat,
										_List_fromArray(
											[a, -b, c, -d, tx, -ty])))) + ')'))
						]);
					var attrs = _Utils_ap(
						transAttrs,
						_Utils_ap(clrAttrs, strokeAttrs));
					switch (stencil.$) {
						case 'Circle':
							var r = stencil.a;
							return A2(
								$elm$svg$Svg$circle,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$cx('0'),
											$elm$svg$Svg$Attributes$cy('0'),
											$elm$svg$Svg$Attributes$r(
											$elm$core$String$fromFloat(r))
										]),
									attrs),
								_List_Nil);
						case 'Rect':
							var rw = stencil.a;
							var rh = stencil.b;
							return A2(
								$elm$svg$Svg$rect,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$x(
											$elm$core$String$fromFloat((-rw) / 2)),
											$elm$svg$Svg$Attributes$y(
											$elm$core$String$fromFloat((-rh) / 2)),
											$elm$svg$Svg$Attributes$width(
											$elm$core$String$fromFloat(rw)),
											$elm$svg$Svg$Attributes$height(
											$elm$core$String$fromFloat(rh))
										]),
									attrs),
								_List_Nil);
						case 'RoundRect':
							var rw = stencil.a;
							var rh = stencil.b;
							var r = stencil.c;
							return A2(
								$elm$svg$Svg$rect,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$x(
											$elm$core$String$fromFloat((-rw) / 2)),
											$elm$svg$Svg$Attributes$y(
											$elm$core$String$fromFloat((-rh) / 2)),
											$elm$svg$Svg$Attributes$rx(
											$elm$core$String$fromFloat(r)),
											$elm$svg$Svg$Attributes$ry(
											$elm$core$String$fromFloat(r)),
											$elm$svg$Svg$Attributes$width(
											$elm$core$String$fromFloat(rw)),
											$elm$svg$Svg$Attributes$height(
											$elm$core$String$fromFloat(rh))
										]),
									attrs),
								_List_Nil);
						case 'Oval':
							var ow = stencil.a;
							var oh = stencil.b;
							return A2(
								$elm$svg$Svg$ellipse,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$cx('0'),
											$elm$svg$Svg$Attributes$cy('0'),
											$elm$svg$Svg$Attributes$rx(
											$elm$core$String$fromFloat(0.5 * ow)),
											$elm$svg$Svg$Attributes$ry(
											$elm$core$String$fromFloat(0.5 * oh))
										]),
									attrs),
								_List_Nil);
						case 'Polygon':
							var vertices = stencil.a;
							return A2(
								$elm$svg$Svg$polygon,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$points(
											$elm$core$String$concat(
												A2(
													$elm$core$List$intersperse,
													' ',
													A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, vertices))))
										]),
									attrs),
								_List_Nil);
						case 'Path':
							var vertices = stencil.a;
							return A2(
								$elm$svg$Svg$polyline,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$points(
											$elm$core$String$concat(
												A2(
													$elm$core$List$intersperse,
													' ',
													A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, vertices))))
										]),
									attrs),
								_List_Nil);
						case 'BezierPath':
							var start = stencil.a;
							var pts = stencil.b;
							return A2(
								$elm$svg$Svg$path,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$d(
											A2($MacCASOutreach$graphicsvg$GraphicSVG$createBezierString, start, pts))
										]),
									attrs),
								_List_Nil);
						default:
							var _v7 = stencil.a;
							var si = _v7.a;
							var bo = _v7.b;
							var i = _v7.c;
							var u = _v7.d;
							var s = _v7.e;
							var sel = _v7.f;
							var f = _v7.g;
							var align = _v7.h;
							var str = stencil.b;
							var txtDec = (u && s) ? 'text-decoration: underline line-through;' : (u ? 'text-decoration: underline;' : (s ? 'text-decoration: line-through;' : ''));
							var select = (!sel) ? '-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;cursor: default;' : '';
							var it = i ? 'font-style: italic;' : '';
							var font = function () {
								switch (f.$) {
									case 'Sansserif':
										return 'sans-serif;';
									case 'Serif':
										return 'serif;';
									case 'FixedWidth':
										return 'monospace;';
									default:
										var fStr = f.a;
										return fStr + ';';
								}
							}();
							var bol = bo ? 'font-weight: bold;' : '';
							var sty = bol + (it + (txtDec + ('font-family: ' + (font + select))));
							var anchor = function () {
								switch (align.$) {
									case 'AlignCentred':
										return 'middle';
									case 'AlignLeft':
										return 'start';
									default:
										return 'end';
								}
							}();
							return A2(
								$elm$svg$Svg$text_,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$x('0'),
											$elm$svg$Svg$Attributes$y('0'),
											$elm$svg$Svg$Attributes$style(sty),
											$elm$svg$Svg$Attributes$fontSize(
											$elm$core$String$fromFloat(si)),
											$elm$svg$Svg$Attributes$textAnchor(anchor),
											$elm$html$Html$Attributes$contenteditable(true)
										]),
									_Utils_ap(
										attrs,
										_Utils_ap(
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$transform(
													'matrix(' + ($elm$core$String$concat(
														A2(
															$elm$core$List$intersperse,
															',',
															A2(
																$elm$core$List$map,
																$elm$core$String$fromFloat,
																_List_fromArray(
																	[a, -b, -c, d, tx, -ty])))) + ')'))
												]),
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$xmlSpace('preserve')
												])))),
								_List_fromArray(
									[
										$elm$svg$Svg$text(str)
									]));
					}
				case 'ForeignObject':
					var fw = shape.a;
					var fh = shape.b;
					var htm = shape.c;
					var _v14 = $MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans);
					var _v15 = _v14.a;
					var _v16 = _v15.a;
					var a = _v16.a;
					var b = _v16.b;
					var _v17 = _v15.b;
					var c = _v17.a;
					var d = _v17.b;
					var _v18 = _v15.c;
					var tx = _v18.a;
					var ty = _v18.b;
					return A2(
						$elm$svg$Svg$foreignObject,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$width(
								$elm$core$String$fromFloat(fw)),
								$elm$svg$Svg$Attributes$height(
								$elm$core$String$fromFloat(fh)),
								$elm$svg$Svg$Attributes$transform(
								'matrix(' + ($elm$core$String$concat(
									A2(
										$elm$core$List$intersperse,
										',',
										A2(
											$elm$core$List$map,
											$elm$core$String$fromFloat,
											_List_fromArray(
												[a, -b, -c, d, tx, -ty])))) + ')'))
							]),
						_List_fromArray(
							[
								A2($elm$html$Html$map, $MacCASOutreach$graphicsvg$GraphicSVG$Graphics, htm)
							]));
				case 'Move':
					var v = shape.a;
					var sh = shape.b;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2($MacCASOutreach$graphicsvg$GraphicSVG$moveT, trans, v),
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					shape = $temp$shape;
					continue createSVG;
				case 'Everything':
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = $MacCASOutreach$graphicsvg$GraphicSVG$ident,
						$temp$shape = A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$white,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, w, h));
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					shape = $temp$shape;
					continue createSVG;
				case 'Rotate':
					var deg = shape.a;
					var sh = shape.b;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2($MacCASOutreach$graphicsvg$GraphicSVG$rotT, trans, deg),
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					shape = $temp$shape;
					continue createSVG;
				case 'ScaleXY':
					var sx = shape.a;
					var sy = shape.b;
					var sh = shape.c;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$scaleT,
						trans,
						_Utils_Tuple2(sx, sy)),
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					shape = $temp$shape;
					continue createSVG;
				case 'Link':
					var href = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$a,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$xlinkHref(href),
								$elm$svg$Svg$Attributes$target('_blank')
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'AlphaMask':
					var region = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$svg$Svg$defs,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$svg$Svg$mask,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$id('m' + id)
											]),
										_List_fromArray(
											[
												A5(
												$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
												id + 'm',
												w,
												h,
												$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
												region)
											]))
									])),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$mask('url(#m' + (id + ')'))
									]),
								_List_fromArray(
									[
										A5(
										$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
										id + 'mm',
										w,
										h,
										$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
										sh)
									]))
							]));
				case 'Clip':
					var region = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$svg$Svg$defs,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$svg$Svg$clipPath,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$id('c' + id)
											]),
										_List_fromArray(
											[
												A5(
												$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
												id + 'm',
												w,
												h,
												$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
												region)
											]))
									])),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$clipPath('url(#c' + (id + ')'))
									]),
								_List_fromArray(
									[
										A5(
										$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
										id + 'cc',
										w,
										h,
										$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
										sh)
									]))
							]));
				case 'Tap':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TapAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTapAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'EnterShape':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseEnter(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'EnterAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onEnterAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'Exit':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseLeave(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'ExitAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onLeaveAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'MouseDown':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseDown(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'MouseDownAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMouseDownAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'MouseUp':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseUp(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'MouseUpAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMouseUpAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'MoveOverAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMoveAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TouchStart':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStart(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TouchEnd':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchEnd(
								$MacCASOutreach$graphicsvg$GraphicSVG$Graphics(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TouchStartAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TouchEndAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'TouchMoveAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchMove(
								$MacCASOutreach$graphicsvg$GraphicSVG$ReturnPosition(msg))
							]),
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								sh)
							]));
				case 'Group':
					var shapes = shape.a;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							function (n) {
								return A4(
									$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
									id + ('g' + $elm$core$String$fromInt(n)),
									w,
									h,
									$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans));
							},
							shapes));
				default:
					var s = shape.a;
					var th = shape.b;
					var c = shape.c;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A5(
								$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
								id,
								w,
								h,
								$MacCASOutreach$graphicsvg$GraphicSVG$coalesce(trans),
								A4(
									$MacCASOutreach$graphicsvg$GraphicSVG$createGraph,
									_Utils_Tuple2(w, h),
									s,
									th,
									c))
							]));
			}
		}
	});
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $MacCASOutreach$graphicsvg$GraphicSVG$createCollage = F3(
	function (w, h, shapes) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width('100%'),
					$elm$svg$Svg$Attributes$height('100%'),
					$elm$svg$Svg$Attributes$style('position:absolute;top:0px;left:0px;'),
					$elm$svg$Svg$Attributes$viewBox(
					$elm$core$String$fromFloat((-w) / 2) + (' ' + ($elm$core$String$fromFloat((-h) / 2) + (' ' + ($elm$core$String$fromFloat(w) + (' ' + $elm$core$String$fromFloat(h)))))))
				]),
			A2(
				$elm$core$List$cons,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$cPath, w, h),
				_List_fromArray(
					[
						A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$clipPath('url(#cPath)')
							]),
						A2(
							$elm$core$List$indexedMap,
							function (n) {
								return A4(
									$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
									$elm$core$String$fromInt(n),
									w,
									h,
									$MacCASOutreach$graphicsvg$GraphicSVG$ident);
							},
							shapes))
					])));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$hiddenAppView = F2(
	function (userView, _v0) {
		var userModel = _v0.a;
		var userViewEval = userView(userModel);
		var title = userViewEval.title;
		var _v1 = userViewEval.body;
		var _v2 = _v1.a;
		var w = _v2.a;
		var h = _v2.b;
		var shapes = _v1.b;
		return {
			body: _List_fromArray(
				[
					A3($MacCASOutreach$graphicsvg$GraphicSVG$createCollage, w, h, shapes)
				]),
			title: title
		};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$initHiddenModel = {ch: 0, cw: 0, sh: 0, sw: 0};
var $MacCASOutreach$graphicsvg$GraphicSVG$WindowResize = function (a) {
	return {$: 'WindowResize', a: a};
};
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $MacCASOutreach$graphicsvg$GraphicSVG$initialCmd = function (userCmd) {
	return $elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				A2(
				$elm$core$Task$perform,
				function (vp) {
					return $MacCASOutreach$graphicsvg$GraphicSVG$WindowResize(
						_Utils_Tuple2(
							$elm$core$Basics$round(vp.viewport.width),
							$elm$core$Basics$round(vp.viewport.height)));
				},
				$elm$browser$Browser$Dom$getViewport),
				userCmd
			]));
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$subs = F2(
	function (userSubs, _v0) {
		var userModel = _v0.a;
		return $elm$core$Platform$Sub$batch(
			_Utils_ap(
				_List_fromArray(
					[
						$elm$browser$Browser$Events$onResize(
						F2(
							function (w, h) {
								return $MacCASOutreach$graphicsvg$GraphicSVG$WindowResize(
									_Utils_Tuple2(w, h));
							}))
					]),
				_List_fromArray(
					[
						A2(
						$elm$core$Platform$Sub$map,
						$MacCASOutreach$graphicsvg$GraphicSVG$Graphics,
						userSubs(userModel))
					])));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$app = function (input) {
	return $elm$browser$Browser$application(
		{
			init: F3(
				function (flags, url, key) {
					var userInitCmd = A3(input.init, flags, url, key).b;
					var userInit = A3(input.init, flags, url, key).a;
					var userView = input.view(userInit).body;
					var _v0 = userView;
					var _v1 = _v0.a;
					var initW = _v1.a;
					var initH = _v1.b;
					return _Utils_Tuple2(
						_Utils_Tuple2(
							userInit,
							_Utils_update(
								$MacCASOutreach$graphicsvg$GraphicSVG$initHiddenModel,
								{ch: initH, cw: initW})),
						$MacCASOutreach$graphicsvg$GraphicSVG$initialCmd(
							A2($elm$core$Platform$Cmd$map, $MacCASOutreach$graphicsvg$GraphicSVG$Graphics, userInitCmd)));
				}),
			onUrlChange: A2($elm$core$Basics$composeL, $MacCASOutreach$graphicsvg$GraphicSVG$Graphics, input.onUrlChange),
			onUrlRequest: A2($elm$core$Basics$composeL, $MacCASOutreach$graphicsvg$GraphicSVG$Graphics, input.onUrlRequest),
			subscriptions: $MacCASOutreach$graphicsvg$GraphicSVG$subs(input.subscriptions),
			update: A2($MacCASOutreach$graphicsvg$GraphicSVG$hiddenAppUpdate, input.view, input.update),
			view: $MacCASOutreach$graphicsvg$GraphicSVG$hiddenAppView(input.view)
		});
};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 'Every', a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {processes: processes, taggers: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 'Nothing') {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.processes;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(_Utils_Tuple0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.taggers);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Environment$init = {
	currentTime: $elm$time$Time$millisToPosix(1576798602274),
	holdingControl: false,
	holdingMeta: false,
	holdingShift: false,
	timeZone: $elm$time$Time$utc,
	windowSize: _Utils_Tuple2(0, 0)
};
var $elm_community$undo_redo$UndoList$UndoList = F3(
	function (past, present, future) {
		return {future: future, past: past, present: present};
	});
var $elm_community$undo_redo$UndoList$fresh = function (state) {
	return A3($elm_community$undo_redo$UndoList$UndoList, _List_Nil, state, _List_Nil);
};
var $author$project$BetterUndoList$fresh = function (state) {
	return {
		present: state,
		ul: $elm_community$undo_redo$UndoList$fresh(state)
	};
};
var $author$project$ApplicationModel$Building = function (a) {
	return {$: 'Building', a: a};
};
var $author$project$Building$NoSnap = {$: 'NoSnap'};
var $author$project$Machine$Regular = {$: 'Regular'};
var $author$project$Building$init = {machineState: $author$project$Machine$Regular, snapToGrid: $author$project$Building$NoSnap};
var $author$project$SharedModel$DFA = {$: 'DFA'};
var $author$project$Machine$Machine = F8(
	function (q, delta, start, _final, statePositions, stateTransitions, stateNames, transitionNames) {
		return {delta: delta, _final: _final, q: q, start: start, stateNames: stateNames, statePositions: statePositions, stateTransitions: stateTransitions, transitionNames: transitionNames};
	});
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $elm$core$Set$singleton = function (key) {
	return $elm$core$Set$Set_elm_builtin(
		A2($elm$core$Dict$singleton, key, _Utils_Tuple0));
};
var $author$project$Machine$test = function () {
	var transitionNames = $elm$core$Dict$fromList(
		A2(
			$elm$core$List$map,
			function (_v0) {
				var k = _v0.a;
				var str = _v0.b;
				return _Utils_Tuple2(
					k,
					$elm$core$Set$singleton(str));
			},
			_List_fromArray(
				[
					_Utils_Tuple2(0, '1'),
					_Utils_Tuple2(1, '0'),
					_Utils_Tuple2(2, '1'),
					_Utils_Tuple2(3, '0'),
					_Utils_Tuple2(4, '1'),
					_Utils_Tuple2(5, '0'),
					_Utils_Tuple2(6, '1'),
					_Utils_Tuple2(7, '0')
				])));
	var stateTransitions = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				_Utils_Tuple3(0, 0, 1),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(1, 2, 0),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(0, 1, 2),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(2, 5, 0),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(2, 4, 3),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(3, 6, 2),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(1, 3, 3),
				_Utils_Tuple2(0, 10)),
				_Utils_Tuple2(
				_Utils_Tuple3(3, 7, 1),
				_Utils_Tuple2(0, 10))
			]));
	var statePositions = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				0,
				_Utils_Tuple2(-50, 50)),
				_Utils_Tuple2(
				1,
				_Utils_Tuple2(50, 50)),
				_Utils_Tuple2(
				2,
				_Utils_Tuple2(-50, -50)),
				_Utils_Tuple2(
				3,
				_Utils_Tuple2(50, -50))
			]));
	var stateNames = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(0, 'q_0'),
				_Utils_Tuple2(1, 'q_1'),
				_Utils_Tuple2(2, 'q_2'),
				_Utils_Tuple2(3, 'q_3')
			]));
	var start = $elm$core$Set$fromList(
		_List_fromArray(
			[0]));
	var q = $elm$core$Set$fromList(
		_List_fromArray(
			[0, 1, 2, 3]));
	var _final = $elm$core$Set$fromList(
		_List_fromArray(
			[0]));
	var delta0 = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				0,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(0, 1),
							_Utils_Tuple2(1, 2)
						]))),
				_Utils_Tuple2(
				1,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(2, 0),
							_Utils_Tuple2(3, 3)
						]))),
				_Utils_Tuple2(
				2,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(4, 3),
							_Utils_Tuple2(5, 0)
						]))),
				_Utils_Tuple2(
				3,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(6, 2),
							_Utils_Tuple2(7, 1)
						])))
			]));
	return A8($author$project$Machine$Machine, q, delta0, start, _final, statePositions, stateTransitions, stateNames, transitionNames);
}();
var $author$project$SharedModel$init = {machine: $author$project$Machine$test, machineType: $author$project$SharedModel$DFA};
var $author$project$Building$Empty = {$: 'Empty'};
var $author$project$Building$initPModel = $author$project$Building$Empty;
var $author$project$Exporting$Tikz = {$: 'Tikz'};
var $author$project$Exporting$initPModel = {outputType: $author$project$Exporting$Tikz, time: 0};
var $author$project$Simulating$Fresh = {$: 'Fresh'};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $author$project$Simulating$initPModel = {
	currentStates: $author$project$Machine$test.start,
	tapes: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				0,
				_Utils_Tuple2(
					$elm$core$Array$fromList(
						_List_fromArray(
							['0', '0', '0', '1', '1', '0', '1', '0', '1', '0'])),
					$author$project$Simulating$Fresh)),
				_Utils_Tuple2(
				1,
				_Utils_Tuple2(
					$elm$core$Array$fromList(
						_List_fromArray(
							['0', '0', '0', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0'])),
					$author$project$Simulating$Fresh))
			]))
};
var $author$project$Main$initAppRecord = {
	appState: $author$project$ApplicationModel$Building($author$project$Building$init),
	buildingData: $author$project$Building$initPModel,
	exportingData: $author$project$Exporting$initPModel,
	sharedModel: $author$project$SharedModel$init,
	simulatingData: $author$project$Simulating$initPModel
};
var $author$project$Main$initAppModel = $author$project$BetterUndoList$fresh($author$project$Main$initAppRecord);
var $author$project$SaveLoad$FilterActive = {$: 'FilterActive'};
var $author$project$SaveLoad$MachineNotCreated = {$: 'MachineNotCreated'};
var $author$project$SaveLoad$NotLoggedIn = {$: 'NotLoggedIn'};
var $author$project$SaveLoad$NothingOpen = {$: 'NothingOpen'};
var $author$project$SaveLoad$InitLoginStatus = function (a) {
	return {$: 'InitLoginStatus', a: a};
};
var $elm$http$Http$Internal$EmptyBody = {$: 'EmptyBody'};
var $elm$http$Http$emptyBody = $elm$http$Http$Internal$EmptyBody;
var $author$project$SaveLoad$LoggedIn = F2(
	function (a, b) {
		return {$: 'LoggedIn', a: a, b: b};
	});
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$SaveLoad$loginStatusDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (loggedIn) {
		return loggedIn ? A3(
			$elm$json$Json$Decode$map2,
			$author$project$SaveLoad$LoggedIn,
			A2($elm$json$Json$Decode$field, 'email', $elm$json$Json$Decode$string),
			A2(
				$elm$json$Json$Decode$map,
				function (s) {
					return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s);
				},
				A2($elm$json$Json$Decode$field, 'newestMachine', $elm$json$Json$Decode$string))) : $elm$json$Json$Decode$succeed($author$project$SaveLoad$NotLoggedIn);
	},
	A2($elm$json$Json$Decode$field, 'loggedin', $elm$json$Json$Decode$bool));
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadPayload = F2(
	function (a, b) {
		return {$: 'BadPayload', a: a, b: b};
	});
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$Internal$FormDataBody = function (a) {
	return {$: 'FormDataBody', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$http$Http$Internal$isStringBody = function (body) {
	if (body.$ === 'StringBody') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = _Http_expectStringResponse;
var $elm$http$Http$expectJson = function (decoder) {
	return $elm$http$Http$expectStringResponse(
		function (response) {
			var _v0 = A2($elm$json$Json$Decode$decodeString, decoder, response.body);
			if (_v0.$ === 'Err') {
				var decodeError = _v0.a;
				return $elm$core$Result$Err(
					$elm$json$Json$Decode$errorToString(decodeError));
			} else {
				var value = _v0.a;
				return $elm$core$Result$Ok(value);
			}
		});
};
var $elm$http$Http$Internal$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$request = $elm$http$Http$Internal$Request;
var $elm$http$Http$post = F3(
	function (url, body, decoder) {
		return $elm$http$Http$request(
			{
				body: body,
				expect: $elm$http$Http$expectJson(decoder),
				headers: _List_Nil,
				method: 'POST',
				timeout: $elm$core$Maybe$Nothing,
				url: url,
				withCredentials: false
			});
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$http$Http$toTask = function (_v0) {
	var request_ = _v0.a;
	return A2(_Http_toTask, request_, $elm$core$Maybe$Nothing);
};
var $elm$http$Http$send = F2(
	function (resultToMessage, request_) {
		return A2(
			$elm$core$Task$attempt,
			resultToMessage,
			$elm$http$Http$toTask(request_));
	});
var $author$project$SaveLoad$getInitLoginStatus = A2(
	$elm$http$Http$send,
	$author$project$SaveLoad$InitLoginStatus,
	A3($elm$http$Http$post, '/accounts/loginstate/', $elm$http$Http$emptyBody, $author$project$SaveLoad$loginStatusDecoder));
var $author$project$SaveLoad$DFA = {$: 'DFA'};
var $author$project$SaveLoad$initMachineMetadata = {
	date: $elm$time$Time$millisToPosix(0),
	description: '',
	id: '',
	machine_type: $author$project$SaveLoad$DFA,
	name: 'Untitled'
};
var $rundis$elm_bootstrap$Bootstrap$Tab$Showing = {$: 'Showing'};
var $rundis$elm_bootstrap$Bootstrap$Tab$State = function (a) {
	return {$: 'State', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Tab$initialState = $rundis$elm_bootstrap$Bootstrap$Tab$State(
	{activeTab: $elm$core$Maybe$Nothing, visibility: $rundis$elm_bootstrap$Bootstrap$Tab$Showing});
var $rundis$elm_bootstrap$Bootstrap$Modal$Show = {$: 'Show'};
var $rundis$elm_bootstrap$Bootstrap$Modal$shown = $rundis$elm_bootstrap$Bootstrap$Modal$Show;
var $author$project$SaveLoad$initSaveModel = _Utils_Tuple2(
	{
		editingName: false,
		lastSaved: $elm$time$Time$millisToPosix(0),
		loadDialog: $author$project$SaveLoad$NothingOpen,
		loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$shown,
		loadFilter: $author$project$SaveLoad$FilterActive,
		loadingList: $elm$core$Maybe$Nothing,
		loginState: $author$project$SaveLoad$NotLoggedIn,
		machineData: $author$project$SaveLoad$MachineNotCreated,
		machineMetadata: $author$project$SaveLoad$initMachineMetadata,
		tabState: $rundis$elm_bootstrap$Bootstrap$Tab$initialState,
		unsavedChanges: false
	},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[$author$project$SaveLoad$getInitLoginStatus])));
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keydown');
var $elm$browser$Browser$Events$onKeyUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keyup');
var $elm$browser$Browser$Events$Hidden = {$: 'Hidden'};
var $elm$browser$Browser$Events$Visible = {$: 'Visible'};
var $elm$browser$Browser$Events$withHidden = F2(
	function (func, isHidden) {
		return func(
			isHidden ? $elm$browser$Browser$Events$Hidden : $elm$browser$Browser$Events$Visible);
	});
var $elm$browser$Browser$Events$onVisibilityChange = function (func) {
	var info = _Browser_visibilityInfo(_Utils_Tuple0);
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Document,
		info.change,
		A2(
			$elm$json$Json$Decode$map,
			$elm$browser$Browser$Events$withHidden(func),
			A2(
				$elm$json$Json$Decode$field,
				'target',
				A2($elm$json$Json$Decode$field, info.hidden, $elm$json$Json$Decode$bool))));
};
var $author$project$Building$KeyPressed = function (a) {
	return {$: 'KeyPressed', a: a};
};
var $author$project$Building$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onKeyDown(
				A2(
					$elm$json$Json$Decode$map,
					$author$project$Building$KeyPressed,
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string)))
			]));
};
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Exporting$subscriptions = function (model) {
	return $elm$core$Platform$Sub$none;
};
var $author$project$SaveLoad$AutoSave = function (a) {
	return {$: 'AutoSave', a: a};
};
var $author$project$SaveLoad$GetLoginStatus = {$: 'GetLoginStatus'};
var $author$project$SaveLoad$MachineCreatedMsg = function (a) {
	return {$: 'MachineCreatedMsg', a: a};
};
var $author$project$SaveLoad$ModalAnimation = function (a) {
	return {$: 'ModalAnimation', a: a};
};
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $author$project$Ports$loginComplete = _Platform_incomingPort(
	'loginComplete',
	$elm$json$Json$Decode$null(_Utils_Tuple0));
var $author$project$Ports$logoutComplete = _Platform_incomingPort(
	'logoutComplete',
	$elm$json$Json$Decode$null(_Utils_Tuple0));
var $rundis$elm_bootstrap$Bootstrap$Modal$FadeClose = {$: 'FadeClose'};
var $elm$browser$Browser$AnimationManager$Time = function (a) {
	return {$: 'Time', a: a};
};
var $elm$browser$Browser$AnimationManager$State = F3(
	function (subs, request, oldTime) {
		return {oldTime: oldTime, request: request, subs: subs};
	});
var $elm$browser$Browser$AnimationManager$init = $elm$core$Task$succeed(
	A3($elm$browser$Browser$AnimationManager$State, _List_Nil, $elm$core$Maybe$Nothing, 0));
var $elm$browser$Browser$AnimationManager$now = _Browser_now(_Utils_Tuple0);
var $elm$browser$Browser$AnimationManager$rAF = _Browser_rAF(_Utils_Tuple0);
var $elm$browser$Browser$AnimationManager$onEffects = F3(
	function (router, subs, _v0) {
		var request = _v0.request;
		var oldTime = _v0.oldTime;
		var _v1 = _Utils_Tuple2(request, subs);
		if (_v1.a.$ === 'Nothing') {
			if (!_v1.b.b) {
				var _v2 = _v1.a;
				return $elm$browser$Browser$AnimationManager$init;
			} else {
				var _v4 = _v1.a;
				return A2(
					$elm$core$Task$andThen,
					function (pid) {
						return A2(
							$elm$core$Task$andThen,
							function (time) {
								return $elm$core$Task$succeed(
									A3(
										$elm$browser$Browser$AnimationManager$State,
										subs,
										$elm$core$Maybe$Just(pid),
										time));
							},
							$elm$browser$Browser$AnimationManager$now);
					},
					$elm$core$Process$spawn(
						A2(
							$elm$core$Task$andThen,
							$elm$core$Platform$sendToSelf(router),
							$elm$browser$Browser$AnimationManager$rAF)));
			}
		} else {
			if (!_v1.b.b) {
				var pid = _v1.a.a;
				return A2(
					$elm$core$Task$andThen,
					function (_v3) {
						return $elm$browser$Browser$AnimationManager$init;
					},
					$elm$core$Process$kill(pid));
			} else {
				return $elm$core$Task$succeed(
					A3($elm$browser$Browser$AnimationManager$State, subs, request, oldTime));
			}
		}
	});
var $elm$browser$Browser$AnimationManager$onSelfMsg = F3(
	function (router, newTime, _v0) {
		var subs = _v0.subs;
		var oldTime = _v0.oldTime;
		var send = function (sub) {
			if (sub.$ === 'Time') {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(
						$elm$time$Time$millisToPosix(newTime)));
			} else {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(newTime - oldTime));
			}
		};
		return A2(
			$elm$core$Task$andThen,
			function (pid) {
				return A2(
					$elm$core$Task$andThen,
					function (_v1) {
						return $elm$core$Task$succeed(
							A3(
								$elm$browser$Browser$AnimationManager$State,
								subs,
								$elm$core$Maybe$Just(pid),
								newTime));
					},
					$elm$core$Task$sequence(
						A2($elm$core$List$map, send, subs)));
			},
			$elm$core$Process$spawn(
				A2(
					$elm$core$Task$andThen,
					$elm$core$Platform$sendToSelf(router),
					$elm$browser$Browser$AnimationManager$rAF)));
	});
var $elm$browser$Browser$AnimationManager$Delta = function (a) {
	return {$: 'Delta', a: a};
};
var $elm$browser$Browser$AnimationManager$subMap = F2(
	function (func, sub) {
		if (sub.$ === 'Time') {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Time(
				A2($elm$core$Basics$composeL, func, tagger));
		} else {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Delta(
				A2($elm$core$Basics$composeL, func, tagger));
		}
	});
_Platform_effectManagers['Browser.AnimationManager'] = _Platform_createManager($elm$browser$Browser$AnimationManager$init, $elm$browser$Browser$AnimationManager$onEffects, $elm$browser$Browser$AnimationManager$onSelfMsg, 0, $elm$browser$Browser$AnimationManager$subMap);
var $elm$browser$Browser$AnimationManager$subscription = _Platform_leaf('Browser.AnimationManager');
var $elm$browser$Browser$AnimationManager$onAnimationFrame = function (tagger) {
	return $elm$browser$Browser$AnimationManager$subscription(
		$elm$browser$Browser$AnimationManager$Time(tagger));
};
var $elm$browser$Browser$Events$onAnimationFrame = $elm$browser$Browser$AnimationManager$onAnimationFrame;
var $rundis$elm_bootstrap$Bootstrap$Modal$subscriptions = F2(
	function (visibility, animateMsg) {
		if (visibility.$ === 'StartClose') {
			return $elm$browser$Browser$Events$onAnimationFrame(
				function (_v1) {
					return animateMsg($rundis$elm_bootstrap$Bootstrap$Modal$FadeClose);
				});
		} else {
			return $elm$core$Platform$Sub$none;
		}
	});
var $author$project$SaveLoad$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_Utils_ap(
			_List_fromArray(
				[
					$elm$browser$Browser$Events$onVisibilityChange(
					function (_v0) {
						return $author$project$SaveLoad$GetLoginStatus;
					}),
					$author$project$Ports$loginComplete(
					function (_v1) {
						return $author$project$SaveLoad$GetLoginStatus;
					}),
					$author$project$Ports$logoutComplete(
					function (_v2) {
						return $author$project$SaveLoad$GetLoginStatus;
					}),
					A2($rundis$elm_bootstrap$Bootstrap$Modal$subscriptions, model.loadDialogModal, $author$project$SaveLoad$ModalAnimation)
				]),
			function () {
				var _v3 = model.machineData;
				if (_v3.$ === 'MachineCreated') {
					return model.unsavedChanges ? _List_fromArray(
						[
							A2(
							$elm$time$Time$every,
							5000,
							A2($elm$core$Basics$composeL, $author$project$SaveLoad$MachineCreatedMsg, $author$project$SaveLoad$AutoSave))
						]) : _List_Nil;
				} else {
					return _List_Nil;
				}
			}()));
};
var $author$project$Simulating$KeyPressed = function (a) {
	return {$: 'KeyPressed', a: a};
};
var $author$project$Simulating$subscriptions = function (model) {
	return $elm$browser$Browser$Events$onKeyDown(
		A2(
			$elm$json$Json$Decode$map,
			$author$project$Simulating$KeyPressed,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string)));
};
var $author$project$ApplicationModel$Exporting = function (a) {
	return {$: 'Exporting', a: a};
};
var $author$project$SaveLoad$MachineCreated = {$: 'MachineCreated'};
var $author$project$ApplicationModel$Simulating = function (a) {
	return {$: 'Simulating', a: a};
};
var $author$project$Simulating$Stale = function (a) {
	return {$: 'Stale', a: a};
};
var $elm$core$Array$filter = F2(
	function (isGood, array) {
		return $elm$core$Array$fromList(
			A3(
				$elm$core$Array$foldr,
				F2(
					function (x, xs) {
						return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
					}),
				_List_Nil,
				array));
	});
var $elm$core$Array$isEmpty = function (_v0) {
	var len = _v0.a;
	return !len;
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Simulating$checkTape = F2(
	function (sModel, inp) {
		var tNames = sModel.machine.transitionNames;
		var allTransitionLabels = A3(
			$elm$core$List$foldr,
			$elm$core$Set$union,
			$elm$core$Set$empty,
			$elm$core$Dict$values(tNames));
		var arrFilter = A2(
			$elm$core$Array$filter,
			function (v) {
				return !A2($elm$core$Set$member, v, allTransitionLabels);
			},
			inp);
		var _v0 = $elm$core$Array$isEmpty(arrFilter);
		if (_v0) {
			return $author$project$Simulating$Fresh;
		} else {
			return $author$project$Simulating$Stale(
				$elm$core$Set$fromList(
					$elm$core$Array$toList(arrFilter)));
		}
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $author$project$Simulating$checkTapesNoStatus = F2(
	function (sModel, tapes) {
		return A2(
			$elm$core$Dict$map,
			F2(
				function (k, tape) {
					return _Utils_Tuple2(
						tape,
						A2($author$project$Simulating$checkTape, sModel, tape));
				}),
			tapes);
	});
var $rundis$elm_bootstrap$Bootstrap$Modal$Hide = {$: 'Hide'};
var $rundis$elm_bootstrap$Bootstrap$Modal$hidden = $rundis$elm_bootstrap$Bootstrap$Modal$Hide;
var $elm$core$Debug$log = _Debug_log;
var $elm_community$undo_redo$UndoList$new = F2(
	function (event, _v0) {
		var past = _v0.past;
		var present = _v0.present;
		return A3(
			$elm_community$undo_redo$UndoList$UndoList,
			A2($elm$core$List$cons, present, past),
			event,
			_List_Nil);
	});
var $author$project$BetterUndoList$new = F2(
	function (state, nUL) {
		return _Utils_update(
			nUL,
			{
				present: state,
				ul: A2($elm_community$undo_redo$UndoList$new, state, nUL.ul)
			});
	});
var $author$project$BetterUndoList$replace = F2(
	function (state, nUL) {
		return _Utils_update(
			nUL,
			{present: state});
	});
var $author$project$Main$moduleUpdate = F9(
	function (env, mMsg, mModel, pModel, model, msgWrapper, appStateWrapper, setpModel, mUpdate) {
		var sm = model.saveModel;
		var currentAppState = model.appModel.present;
		var _v0 = A3(
			mUpdate,
			env,
			A2($elm$core$Debug$log, 'mMsg', mMsg),
			_Utils_Tuple3(mModel, pModel, currentAppState.sharedModel));
		var _v1 = _v0.a;
		var newM = _v1.a;
		var newPModel = _v1.b;
		var newSModel = _v1.c;
		var checkpoint = _v0.b;
		var cmd = _v0.c;
		var newAppState = A2(
			setpModel,
			newPModel,
			_Utils_update(
				currentAppState,
				{
					appState: appStateWrapper(newM),
					sharedModel: newSModel
				}));
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					appModel: checkpoint ? A2($author$project$BetterUndoList$new, newAppState, model.appModel) : A2($author$project$BetterUndoList$replace, newAppState, model.appModel),
					saveModel: _Utils_update(
						sm,
						{
							unsavedChanges: checkpoint ? true : sm.unsavedChanges
						})
				}),
			A2($elm$core$Platform$Cmd$map, msgWrapper, cmd));
	});
var $author$project$Building$onEnter = F2(
	function (env, _v0) {
		var pModel = _v0.a;
		var sModel = _v0.b;
		return _Utils_Tuple3(
			_Utils_Tuple3($author$project$Building$init, pModel, sModel),
			false,
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Exporting$Default = {$: 'Default'};
var $author$project$Exporting$onEnter = F2(
	function (env, _v0) {
		var pModel = _v0.a;
		var sModel = _v0.b;
		return _Utils_Tuple3(
			_Utils_Tuple3($author$project$Exporting$Default, pModel, sModel),
			false,
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Simulating$Default = F3(
	function (a, b, c) {
		return {$: 'Default', a: a, b: b, c: c};
	});
var $author$project$Simulating$checkTapes = F2(
	function (sModel, tapes) {
		return A2(
			$elm$core$Dict$map,
			F2(
				function (k, _v0) {
					var tape = _v0.a;
					return _Utils_Tuple2(
						tape,
						A2($author$project$Simulating$checkTape, sModel, tape));
				}),
			tapes);
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$Helpers$renderString = $elm$core$String$join(',');
var $author$project$Helpers$renderSet2String = A2($elm$core$Basics$composeR, $elm$core$Set$toList, $author$project$Helpers$renderString);
var $author$project$Simulating$epsTrans = F3(
	function (tNames, d, states) {
		epsTrans:
		while (true) {
			var getName = function (trans) {
				var _v4 = A2($elm$core$Dict$get, trans, tNames);
				if (_v4.$ === 'Just') {
					var n = _v4.a;
					return $author$project$Helpers$renderSet2String(n);
				} else {
					return '';
				}
			};
			var findEpsTransitions = function (lst) {
				if (!lst.b) {
					return _List_Nil;
				} else {
					var _v1 = lst.a;
					var sID = _v1.a;
					var dictTrans = _v1.b;
					var xs = lst.b;
					var listTrans = $elm$core$Dict$toList(dictTrans);
					var epsStates = A2(
						$elm$core$List$filterMap,
						function (_v2) {
							var tId = _v2.a;
							var sId = _v2.b;
							return (getName(tId) === '\\epsilon') ? $elm$core$Maybe$Just(sId) : $elm$core$Maybe$Nothing;
						},
						listTrans);
					return _Utils_ap(
						epsStates,
						findEpsTransitions(xs));
				}
			};
			var dList = A2(
				$elm$core$Basics$composeL,
				$elm$core$Dict$toList,
				$elm$core$Dict$filter(
					F2(
						function (k, _v3) {
							return A2($elm$core$Set$member, k, states);
						})))(d);
			var newCurrentStates = A2(
				$elm$core$Set$union,
				$elm$core$Set$fromList(
					findEpsTransitions(dList)),
				states);
			if (_Utils_eq(newCurrentStates, states)) {
				return states;
			} else {
				var $temp$tNames = tNames,
					$temp$d = d,
					$temp$states = newCurrentStates;
				tNames = $temp$tNames;
				d = $temp$d;
				states = $temp$states;
				continue epsTrans;
			}
		}
	});
var $author$project$Simulating$onEnter = F2(
	function (env, _v0) {
		var pModel = _v0.a;
		var sModel = _v0.b;
		return _Utils_Tuple3(
			_Utils_Tuple3(
				A3($author$project$Simulating$Default, 0, -1, $elm$core$Maybe$Nothing),
				_Utils_update(
					pModel,
					{
						currentStates: A3($author$project$Simulating$epsTrans, sModel.machine.transitionNames, sModel.machine.delta, sModel.machine.start),
						tapes: A2($author$project$Simulating$checkTapes, sModel, pModel.tapes)
					}),
				sModel),
			false,
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Building$onExit = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		return _Utils_Tuple2(
			_Utils_Tuple2(pModel, sModel),
			false);
	});
var $author$project$Exporting$onExit = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		return _Utils_Tuple2(
			_Utils_Tuple2(pModel, sModel),
			false);
	});
var $author$project$Simulating$onExit = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		return _Utils_Tuple2(
			_Utils_Tuple2(pModel, sModel),
			false);
	});
var $author$project$Main$processEnter = F7(
	function (env, pModel, exitModel, msgWrapper, appStateWrapper, setpModel, onEnter) {
		var exitAppState = exitModel.present;
		var _v0 = A2(
			onEnter,
			env,
			_Utils_Tuple2(pModel, exitAppState.sharedModel));
		var _v1 = _v0.a;
		var newM = _v1.a;
		var newPModel = _v1.b;
		var newSModel = _v1.c;
		var checkpoint = _v0.b;
		var mCmd = _v0.c;
		var newAppState = A2(
			setpModel,
			newPModel,
			_Utils_update(
				exitAppState,
				{
					appState: appStateWrapper(newM),
					sharedModel: newSModel
				}));
		return _Utils_Tuple2(
			checkpoint ? A2($author$project$BetterUndoList$new, newAppState, exitModel) : A2($author$project$BetterUndoList$replace, newAppState, exitModel),
			A2($elm$core$Platform$Cmd$map, msgWrapper, mCmd));
	});
var $author$project$Main$processExit = F6(
	function (env, m, pModel, model, setpModel, onExit) {
		var currentAppState = model.appModel.present;
		var _v0 = A2(
			onExit,
			env,
			_Utils_Tuple3(m, pModel, currentAppState.sharedModel));
		var _v1 = _v0.a;
		var newPModel = _v1.a;
		var newSModel = _v1.b;
		var checkpoint = _v0.b;
		var newAppState = A2(
			setpModel,
			newPModel,
			_Utils_update(
				currentAppState,
				{sharedModel: newSModel}));
		return checkpoint ? A2($author$project$BetterUndoList$new, newAppState, model.appModel) : A2($author$project$BetterUndoList$replace, newAppState, model.appModel);
	});
var $elm_community$undo_redo$UndoList$redo = function (_v0) {
	var past = _v0.past;
	var present = _v0.present;
	var future = _v0.future;
	if (!future.b) {
		return A3($elm_community$undo_redo$UndoList$UndoList, past, present, future);
	} else {
		var x = future.a;
		var xs = future.b;
		return A3(
			$elm_community$undo_redo$UndoList$UndoList,
			A2($elm$core$List$cons, present, past),
			x,
			xs);
	}
};
var $author$project$BetterUndoList$redo = function (nUL) {
	var newUL = $elm_community$undo_redo$UndoList$redo(nUL.ul);
	return {present: newUL.present, ul: newUL};
};
var $elm_community$undo_redo$UndoList$undo = function (_v0) {
	var past = _v0.past;
	var present = _v0.present;
	var future = _v0.future;
	if (!past.b) {
		return A3($elm_community$undo_redo$UndoList$UndoList, past, present, future);
	} else {
		var x = past.a;
		var xs = past.b;
		return A3(
			$elm_community$undo_redo$UndoList$UndoList,
			xs,
			x,
			A2($elm$core$List$cons, present, future));
	}
};
var $author$project$BetterUndoList$undo = function (nUL) {
	var newUL = $elm_community$undo_redo$UndoList$undo(nUL.ul);
	return {
		present: newUL.present,
		ul: $elm_community$undo_redo$UndoList$undo(nUL.ul)
	};
};
var $author$project$Machine$AddingArrow = F2(
	function (a, b) {
		return {$: 'AddingArrow', a: a, b: b};
	});
var $author$project$Machine$AddingArrowOverOtherState = F3(
	function (a, b, c) {
		return {$: 'AddingArrowOverOtherState', a: a, b: b, c: c};
	});
var $author$project$Machine$DraggingArrow = F2(
	function (a, b) {
		return {$: 'DraggingArrow', a: a, b: b};
	});
var $author$project$Machine$DraggingState = F3(
	function (a, b, c) {
		return {$: 'DraggingState', a: a, b: b, c: c};
	});
var $author$project$Machine$EditingStateLabel = F2(
	function (a, b) {
		return {$: 'EditingStateLabel', a: a, b: b};
	});
var $author$project$Machine$EditingTransitionLabel = F2(
	function (a, b) {
		return {$: 'EditingTransitionLabel', a: a, b: b};
	});
var $author$project$Machine$MousingOverRim = F2(
	function (a, b) {
		return {$: 'MousingOverRim', a: a, b: b};
	});
var $author$project$Machine$MousingOverStateLabel = function (a) {
	return {$: 'MousingOverStateLabel', a: a};
};
var $author$project$Machine$MousingOverTransitionLabel = function (a) {
	return {$: 'MousingOverTransitionLabel', a: a};
};
var $author$project$Building$NoOp = {$: 'NoOp'};
var $author$project$Building$SaveStateName = F2(
	function (a, b) {
		return {$: 'SaveStateName', a: a, b: b};
	});
var $author$project$Building$SaveTransitionName = F2(
	function (a, b) {
		return {$: 'SaveTransitionName', a: a, b: b};
	});
var $author$project$Machine$SelectedArrow = function (a) {
	return {$: 'SelectedArrow', a: a};
};
var $author$project$Machine$SelectedState = function (a) {
	return {$: 'SelectedState', a: a};
};
var $author$project$Building$SnapToGrid = function (a) {
	return {$: 'SnapToGrid', a: a};
};
var $author$project$Building$ToggleSnap = {$: 'ToggleSnap'};
var $elm$core$Basics$atan2 = _Basics_atan2;
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Mistakes$checkTransitionValid = function (set) {
	var _v0 = A2($elm$core$Set$member, '\\epsilon', set);
	if (!_v0) {
		return true;
	} else {
		return ($elm$core$Set$size(set) === 1) ? true : false;
	}
};
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $author$project$Helpers$focusInput = function (msg) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return msg;
		},
		$elm$browser$Browser$Dom$focus('input'));
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$String$fromList = _String_fromList;
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Helpers$specialSymbols = _List_fromArray(
	[
		_List_fromArray(
		[
			_Utils_chr('{'),
			_Utils_chr(','),
			_Utils_chr('}')
		]),
		_List_fromArray(
		[
			_Utils_chr('{'),
			_Utils_chr(' '),
			_Utils_chr('}')
		])
	]);
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $elm$core$String$trim = _String_trim;
var $author$project$Helpers$parseTLabel = function (s) {
	var lst = $elm$core$String$toList(s);
	var collect = F3(
		function (input, xs, xxs) {
			collect:
			while (true) {
				if (!input.b) {
					return A2(
						$elm$core$List$cons,
						$elm$core$List$reverse(xs),
						xxs);
				} else {
					var y = input.a;
					var ys = input.b;
					var hasSpecial = A2(
						$elm$core$List$cons,
						y,
						A2($elm$core$List$take, 2, ys));
					var check = A2($elm$core$List$member, hasSpecial, $author$project$Helpers$specialSymbols);
					if (check) {
						return A3(
							collect,
							A2($elm$core$List$drop, 2, ys),
							_List_Nil,
							A2($elm$core$List$cons, hasSpecial, xxs));
					} else {
						if (_Utils_eq(
							y,
							_Utils_chr(','))) {
							var $temp$input = ys,
								$temp$xs = _List_Nil,
								$temp$xxs = A2(
								$elm$core$List$cons,
								$elm$core$List$reverse(xs),
								xxs);
							input = $temp$input;
							xs = $temp$xs;
							xxs = $temp$xxs;
							continue collect;
						} else {
							if (_Utils_eq(
								y,
								_Utils_chr(' '))) {
								var $temp$input = ys,
									$temp$xs = xs,
									$temp$xxs = xxs;
								input = $temp$input;
								xs = $temp$xs;
								xxs = $temp$xxs;
								continue collect;
							} else {
								var $temp$input = ys,
									$temp$xs = A2($elm$core$List$cons, y, xs),
									$temp$xxs = xxs;
								input = $temp$input;
								xs = $temp$xs;
								xxs = $temp$xxs;
								continue collect;
							}
						}
					}
				}
			}
		});
	var parsedString = A2(
		$elm$core$List$map,
		$elm$core$String$fromList,
		A3(collect, lst, _List_Nil, _List_Nil));
	return A2(
		$elm$core$List$filter,
		function (s1) {
			return s1 !== '';
		},
		A2($elm$core$List$map, $elm$core$String$trim, parsedString));
};
var $author$project$Helpers$parseString2Set = A2($elm$core$Basics$composeR, $author$project$Helpers$parseTLabel, $elm$core$Set$fromList);
var $elm$core$Basics$pow = _Basics_pow;
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $author$project$Helpers$roundTo = F2(
	function (n, m) {
		return (($elm$core$Basics$round(m + (n / 2)) / $elm$core$Basics$round(n)) | 0) * $elm$core$Basics$round(n);
	});
var $author$project$Helpers$sendMsg = function (msg) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$identity,
		$elm$core$Task$succeed(msg));
};
var $elm$core$Set$foldl = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $author$project$Helpers$setMax = function (s) {
	return A3($elm$core$Set$foldl, $elm$core$Basics$max, 0, s);
};
var $author$project$Helpers$sub = F2(
	function (_v0, _v1) {
		var x0 = _v0.a;
		var y0 = _v0.b;
		var x1 = _v1.a;
		var y1 = _v1.b;
		return _Utils_Tuple2(x0 - x1, y0 - y1);
	});
var $author$project$Building$updateStatePos = F3(
	function (st, _v0, pos) {
		var x = _v0.a;
		var y = _v0.b;
		return A3(
			$elm$core$Dict$update,
			st,
			function (m) {
				if (m.$ === 'Just') {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(x, y));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			pos);
	});
var $author$project$Building$update = F3(
	function (env, msg, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var oldMachine = sModel.machine;
		switch (msg.$) {
			case 'MachineMsg':
				var mmsg = msg.a;
				switch (mmsg.$) {
					case 'StartDragging':
						var st = mmsg.a;
						var _v3 = mmsg.b;
						var x = _v3.a;
						var y = _v3.b;
						var _v4 = function () {
							var _v5 = A2($elm$core$Dict$get, st, oldMachine.statePositions);
							if (_v5.$ === 'Just') {
								var _v6 = _v5.a;
								var xx = _v6.a;
								var yy = _v6.b;
								return _Utils_Tuple2(xx, yy);
							} else {
								return _Utils_Tuple2(0, 0);
							}
						}();
						var sx = _v4.a;
						var sy = _v4.b;
						var _v7 = model.machineState;
						if (_v7.$ === 'MousingOverRim') {
							var sId = _v7.a;
							return _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{
											machineState: A2(
												$author$project$Machine$AddingArrow,
												sId,
												_Utils_Tuple2(x, y))
										}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{
											machineState: A3(
												$author$project$Machine$DraggingState,
												st,
												_Utils_Tuple2(x - sx, y - sy),
												_Utils_Tuple2(x, y))
										}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none);
						}
					case 'StartDraggingArrow':
						var _v8 = mmsg.a;
						var st1 = _v8.a;
						var _char = _v8.b;
						var st2 = _v8.c;
						var pos = mmsg.b;
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: A2(
											$author$project$Machine$DraggingArrow,
											_Utils_Tuple3(st1, _char, st2),
											pos)
									}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'StartMouseOverRim':
						var stId = mmsg.a;
						var _v9 = mmsg.b;
						var x = _v9.a;
						var y = _v9.b;
						var _v10 = model.machineState;
						if (_v10.$ === 'Regular') {
							return _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{
											machineState: A2(
												$author$project$Machine$MousingOverRim,
												stId,
												_Utils_Tuple2(x, y))
										}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
						}
					case 'MoveMouseOverRim':
						var _v11 = mmsg.a;
						var x = _v11.a;
						var y = _v11.b;
						var _v12 = model.machineState;
						if (_v12.$ === 'MousingOverRim') {
							var stId = _v12.a;
							return _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{
											machineState: A2(
												$author$project$Machine$MousingOverRim,
												stId,
												_Utils_Tuple2(x, y))
										}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
						}
					case 'StopMouseOverRim':
						var _v13 = model.machineState;
						if (_v13.$ === 'MousingOverRim') {
							return _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{machineState: $author$project$Machine$Regular}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
						}
					case 'StopDragging':
						var _v14 = model.machineState;
						switch (_v14.$) {
							case 'DraggingState':
								var st = _v14.a;
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{
												machineState: $author$project$Machine$SelectedState(st)
											}),
										pModel,
										sModel),
									true,
									$elm$core$Platform$Cmd$none);
							case 'AddingArrowOverOtherState':
								var st = _v14.a;
								var s1 = _v14.c;
								var newTransPos = _Utils_eq(st, s1) ? _Utils_Tuple2(0, 50) : _Utils_Tuple2(0, 0);
								var newTransID = function () {
									var _v17 = $elm$core$List$maximum(
										$elm$core$Dict$keys(oldMachine.transitionNames));
									if (_v17.$ === 'Just') {
										var n = _v17.a;
										return n + 1;
									} else {
										return 0;
									}
								}();
								var newTrans = function () {
									var _v16 = $elm$core$List$head(
										$elm$core$Dict$values(oldMachine.transitionNames));
									if (_v16.$ === 'Just') {
										var setchar = _v16.a;
										return setchar;
									} else {
										return $elm$core$Set$singleton('x');
									}
								}();
								var newDelta = A3(
									$elm$core$Dict$update,
									st,
									function (mcDict) {
										if (mcDict.$ === 'Just') {
											var ss = mcDict.a;
											return $elm$core$Maybe$Just(
												A3(
													$elm$core$Dict$update,
													newTransID,
													function (mState) {
														return $elm$core$Maybe$Just(s1);
													},
													ss));
										} else {
											return $elm$core$Maybe$Just(
												A2($elm$core$Dict$singleton, newTransID, s1));
										}
									},
									oldMachine.delta);
								var isValidTransition = $author$project$Mistakes$checkTransitionValid(newTrans);
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: $author$project$Machine$Regular}),
										pModel,
										_Utils_update(
											sModel,
											{
												machine: _Utils_update(
													oldMachine,
													{
														delta: newDelta,
														stateTransitions: A3(
															$elm$core$Dict$insert,
															_Utils_Tuple3(st, newTransID, s1),
															newTransPos,
															oldMachine.stateTransitions),
														transitionNames: A3($elm$core$Dict$insert, newTransID, newTrans, oldMachine.transitionNames)
													})
											})),
									true,
									$elm$core$Platform$Cmd$none);
							case 'DraggingArrow':
								var tId = _v14.a;
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: $author$project$Machine$Regular}),
										pModel,
										sModel),
									true,
									$elm$core$Platform$Cmd$none);
							default:
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: $author$project$Machine$Regular}),
										pModel,
										sModel),
									false,
									$elm$core$Platform$Cmd$none);
						}
					case 'SelectArrow':
						var _v18 = mmsg.a;
						var s0 = _v18.a;
						var tId = _v18.b;
						var s1 = _v18.c;
						var oldTransName = function () {
							var _v19 = A2($elm$core$Dict$get, tId, sModel.machine.transitionNames);
							if (_v19.$ === 'Just') {
								var n = _v19.a;
								return $author$project$Helpers$renderSet2String(n);
							} else {
								return '';
							}
						}();
						return env.holdingShift ? _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: A2($author$project$Machine$EditingTransitionLabel, tId, oldTransName)
									}),
								pModel,
								sModel),
							false,
							$author$project$Helpers$focusInput($author$project$Building$NoOp)) : _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: $author$project$Machine$SelectedArrow(
											_Utils_Tuple3(s0, tId, s1))
									}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'Drag':
						var _v20 = mmsg.a;
						var x = _v20.a;
						var y = _v20.b;
						var _v21 = model.machineState;
						switch (_v21.$) {
							case 'DraggingState':
								var st = _v21.a;
								var _v22 = _v21.b;
								var ox = _v22.a;
								var oy = _v22.b;
								var newPos = function () {
									var _v26 = model.snapToGrid;
									if (_v26.$ === 'SnapToGrid') {
										var n = _v26.a;
										return _Utils_Tuple2(
											A2($author$project$Helpers$roundTo, n, x - ox),
											A2($author$project$Helpers$roundTo, n, y - oy));
									} else {
										return _Utils_Tuple2(x - ox, y - oy);
									}
								}();
								var _v23 = function () {
									var _v24 = A2($elm$core$Dict$get, st, oldMachine.statePositions);
									if (_v24.$ === 'Just') {
										var _v25 = _v24.a;
										var xx = _v25.a;
										var yy = _v25.b;
										return _Utils_Tuple2(xx, yy);
									} else {
										return _Utils_Tuple2(0, 0);
									}
								}();
								var sx = _v23.a;
								var sy = _v23.b;
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{
												machineState: A3(
													$author$project$Machine$DraggingState,
													st,
													_Utils_Tuple2(ox, oy),
													_Utils_Tuple2(x, y))
											}),
										pModel,
										_Utils_update(
											sModel,
											{
												machine: _Utils_update(
													oldMachine,
													{
														statePositions: A3($author$project$Building$updateStatePos, st, newPos, oldMachine.statePositions)
													})
											})),
									false,
									$elm$core$Platform$Cmd$none);
							case 'DraggingArrow':
								var _v27 = _v21.a;
								var s1 = _v27.a;
								var _char = _v27.b;
								var s2 = _v27.c;
								var newPos = function () {
									var _v36 = model.snapToGrid;
									if (_v36.$ === 'SnapToGrid') {
										var n = _v36.a;
										return _Utils_Tuple2(
											A2($author$project$Helpers$roundTo, n, x),
											A2($author$project$Helpers$roundTo, n, y));
									} else {
										return _Utils_Tuple2(x, y);
									}
								}();
								var _v28 = function () {
									var _v29 = A2($elm$core$Dict$get, s2, oldMachine.statePositions);
									if (_v29.$ === 'Just') {
										var _v30 = _v29.a;
										var xx = _v30.a;
										var yy = _v30.b;
										return _Utils_Tuple2(xx, yy);
									} else {
										return _Utils_Tuple2(0, 0);
									}
								}();
								var x1 = _v28.a;
								var y1 = _v28.b;
								var _v31 = function () {
									var _v32 = A2($elm$core$Dict$get, s1, oldMachine.statePositions);
									if (_v32.$ === 'Just') {
										var _v33 = _v32.a;
										var xx = _v33.a;
										var yy = _v33.b;
										return _Utils_Tuple2(xx, yy);
									} else {
										return _Utils_Tuple2(0, 0);
									}
								}();
								var x0 = _v31.a;
								var y0 = _v31.b;
								var theta = (-1) * A2($elm$core$Basics$atan2, y1 - y0, x1 - x0);
								var _v34 = _Utils_Tuple2((x0 + x1) / 2, (y0 + y1) / 2);
								var mx = _v34.a;
								var my = _v34.b;
								var _v35 = A2(
									$author$project$Helpers$sub,
									newPos,
									_Utils_Tuple2(mx, my));
								var nx = _v35.a;
								var ny = _v35.b;
								var nprot = _Utils_Tuple2(
									(nx * $elm$core$Basics$cos(theta)) - (ny * $elm$core$Basics$sin(theta)),
									(nx * $elm$core$Basics$sin(theta)) + (ny * $elm$core$Basics$cos(theta)));
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{
												machineState: A2(
													$author$project$Machine$DraggingArrow,
													_Utils_Tuple3(s1, _char, s2),
													_Utils_Tuple2(x, y))
											}),
										pModel,
										_Utils_update(
											sModel,
											{
												machine: _Utils_update(
													oldMachine,
													{
														stateTransitions: A3(
															$elm$core$Dict$insert,
															_Utils_Tuple3(s1, _char, s2),
															nprot,
															oldMachine.stateTransitions)
													})
											})),
									false,
									$elm$core$Platform$Cmd$none);
							case 'AddingArrow':
								var st = _v21.a;
								var aboveStates = A2(
									$elm$core$List$map,
									function (_v38) {
										var sId = _v38.a;
										return sId;
									},
									$elm$core$Dict$toList(
										A2(
											$elm$core$Dict$filter,
											F2(
												function (_v39, _v40) {
													var x1 = _v40.a;
													var y1 = _v40.b;
													return (A2($elm$core$Basics$pow, x1 - x, 2) + A2($elm$core$Basics$pow, y1 - y, 2)) <= 400;
												}),
											oldMachine.statePositions)));
								var newState = function () {
									if (aboveStates.b) {
										var h = aboveStates.a;
										return A3(
											$author$project$Machine$AddingArrowOverOtherState,
											st,
											_Utils_Tuple2(x, y),
											h);
									} else {
										return A2(
											$author$project$Machine$AddingArrow,
											st,
											_Utils_Tuple2(x, y));
									}
								}();
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: newState}),
										pModel,
										sModel),
									false,
									$elm$core$Platform$Cmd$none);
							case 'AddingArrowOverOtherState':
								var st = _v21.a;
								var s1 = _v21.c;
								var aboveStates = A2(
									$elm$core$List$map,
									function (_v42) {
										var sId = _v42.a;
										return sId;
									},
									$elm$core$Dict$toList(
										A2(
											$elm$core$Dict$filter,
											F2(
												function (_v43, _v44) {
													var x1 = _v44.a;
													var y1 = _v44.b;
													return (A2($elm$core$Basics$pow, x1 - x, 2) + A2($elm$core$Basics$pow, y1 - y, 2)) <= 400;
												}),
											oldMachine.statePositions)));
								var newState = function () {
									if (aboveStates.b) {
										var h = aboveStates.a;
										return A3(
											$author$project$Machine$AddingArrowOverOtherState,
											st,
											_Utils_Tuple2(x, y),
											h);
									} else {
										return A2(
											$author$project$Machine$AddingArrow,
											st,
											_Utils_Tuple2(x, y));
									}
								}();
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: newState}),
										pModel,
										sModel),
									false,
									$elm$core$Platform$Cmd$none);
							default:
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: model.machineState}),
										pModel,
										sModel),
									false,
									$elm$core$Platform$Cmd$none);
						}
					case 'MouseOverStateLabel':
						var st = mmsg.a;
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: $author$project$Machine$MousingOverStateLabel(st)
									}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'MouseOverTransitionLabel':
						var tr = mmsg.a;
						var newState = function () {
							var _v45 = model.machineState;
							if (_v45.$ === 'Regular') {
								return $author$project$Machine$MousingOverTransitionLabel(tr);
							} else {
								return model.machineState;
							}
						}();
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{machineState: newState}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'MouseLeaveLabel':
						var newState = function () {
							var _v46 = model.machineState;
							switch (_v46.$) {
								case 'MousingOverStateLabel':
									return $author$project$Machine$Regular;
								case 'MousingOverTransitionLabel':
									return $author$project$Machine$Regular;
								default:
									return model.machineState;
							}
						}();
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{machineState: newState}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'EditLabel':
						var lbl = mmsg.b;
						var newState = function () {
							var _v47 = model.machineState;
							switch (_v47.$) {
								case 'EditingStateLabel':
									var st = _v47.a;
									return A2($author$project$Machine$EditingStateLabel, st, lbl);
								case 'EditingTransitionLabel':
									var tr = _v47.a;
									return A2($author$project$Machine$EditingTransitionLabel, tr, lbl);
								default:
									return model.machineState;
							}
						}();
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{machineState: newState}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					case 'TapState':
						var sId = mmsg.a;
						var oldStateName = function () {
							var _v48 = A2($elm$core$Dict$get, sId, sModel.machine.stateNames);
							if (_v48.$ === 'Just') {
								var n = _v48.a;
								return n;
							} else {
								return '';
							}
						}();
						return env.holdingShift ? _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: A2($author$project$Machine$EditingStateLabel, sId, oldStateName)
									}),
								pModel,
								sModel),
							false,
							$author$project$Helpers$focusInput($author$project$Building$NoOp)) : _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{
										machineState: $author$project$Machine$SelectedState(sId)
									}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
					default:
						return _Utils_Tuple3(
							_Utils_Tuple3(
								_Utils_update(
									model,
									{machineState: $author$project$Machine$Regular}),
								pModel,
								sModel),
							false,
							$elm$core$Platform$Cmd$none);
				}
			case 'AddState':
				var _v49 = msg.a;
				var x = _v49.a;
				var y = _v49.b;
				var _v50 = model.machineState;
				if (_v50.$ === 'Regular') {
					var newId = $author$project$Helpers$setMax(oldMachine.q) + 1;
					var newMachine = _Utils_update(
						oldMachine,
						{
							delta: A3($elm$core$Dict$insert, newId, $elm$core$Dict$empty, oldMachine.delta),
							q: A2($elm$core$Set$insert, newId, oldMachine.q),
							stateNames: A3(
								$elm$core$Dict$insert,
								newId,
								'q_{' + ($elm$core$String$fromInt(newId) + '}'),
								oldMachine.stateNames),
							statePositions: A3(
								$elm$core$Dict$insert,
								newId,
								_Utils_Tuple2(x, y),
								oldMachine.statePositions)
						});
					return _Utils_Tuple3(
						_Utils_Tuple3(
							_Utils_update(
								model,
								{machineState: $author$project$Machine$Regular}),
							pModel,
							_Utils_update(
								sModel,
								{machine: newMachine})),
						true,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(
						_Utils_Tuple3(
							_Utils_update(
								model,
								{machineState: $author$project$Machine$Regular}),
							pModel,
							sModel),
						false,
						$elm$core$Platform$Cmd$none);
				}
			case 'KeyPressed':
				var k = msg.a;
				if (k === 'Enter') {
					var _v51 = model.machineState;
					switch (_v51.$) {
						case 'EditingStateLabel':
							var sId = _v51.a;
							var newLbl = _v51.b;
							var oldStateName = function () {
								var _v52 = A2($elm$core$Dict$get, sId, oldMachine.stateNames);
								if (_v52.$ === 'Just') {
									var n = _v52.a;
									return n;
								} else {
									return '';
								}
							}();
							return (_Utils_eq(newLbl, oldStateName) || (newLbl === '')) ? _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{machineState: $author$project$Machine$Regular}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none) : _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{machineState: $author$project$Machine$Regular}),
									pModel,
									sModel),
								true,
								$author$project$Helpers$sendMsg(
									A2($author$project$Building$SaveStateName, sId, newLbl)));
						case 'EditingTransitionLabel':
							var tId = _v51.a;
							var newLbl = _v51.b;
							var oldTransitionName = function () {
								var _v53 = A2($elm$core$Dict$get, tId, oldMachine.transitionNames);
								if (_v53.$ === 'Just') {
									var n = _v53.a;
									return $author$project$Helpers$renderSet2String(n);
								} else {
									return '';
								}
							}();
							return (_Utils_eq(newLbl, oldTransitionName) || (newLbl === '')) ? _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{machineState: $author$project$Machine$Regular}),
									pModel,
									sModel),
								false,
								$elm$core$Platform$Cmd$none) : _Utils_Tuple3(
								_Utils_Tuple3(
									_Utils_update(
										model,
										{machineState: $author$project$Machine$Regular}),
									pModel,
									sModel),
								true,
								$author$project$Helpers$sendMsg(
									A2($author$project$Building$SaveTransitionName, tId, newLbl)));
						default:
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
					}
				} else {
					if (k === 'd') {
						var _v54 = model.machineState;
						switch (_v54.$) {
							case 'SelectedState':
								var stId = _v54.a;
								var removedTransitionsLst = A2(
									$elm$core$List$map,
									function (_v60) {
										var t = _v60.b;
										return _Utils_Tuple2(t, _Utils_Tuple0);
									},
									$elm$core$Dict$keys(
										A2(
											$elm$core$Dict$filter,
											F2(
												function (_v61, _v62) {
													var s0 = _v61.a;
													var s1 = _v61.c;
													return _Utils_eq(s0, stId) || _Utils_eq(s1, stId);
												}),
											oldMachine.stateTransitions)));
								var removedTransitions = $elm$core$Dict$fromList(removedTransitionsLst);
								var new_q = A2($elm$core$Set$remove, stId, oldMachine.q);
								var newStateTransitions = A2(
									$elm$core$Dict$filter,
									F2(
										function (_v58, _v59) {
											var t = _v58.b;
											return !A2($elm$core$Dict$member, t, removedTransitions);
										}),
									oldMachine.stateTransitions);
								var newDelta = A2(
									$elm$core$Dict$filter,
									F2(
										function (key, _v57) {
											return A2($elm$core$Set$member, key, new_q);
										}),
									A2(
										$elm$core$Dict$map,
										F2(
											function (_v55, d) {
												return A2(
													$elm$core$Dict$filter,
													F2(
														function (tId, _v56) {
															return !A2($elm$core$Dict$member, tId, removedTransitions);
														}),
													d);
											}),
										oldMachine.delta));
								var newMachine = _Utils_update(
									oldMachine,
									{
										delta: newDelta,
										_final: A2($elm$core$Set$remove, stId, oldMachine._final),
										q: new_q,
										start: A2($elm$core$Set$remove, stId, oldMachine.start),
										stateNames: A2($elm$core$Dict$remove, stId, oldMachine.stateNames),
										statePositions: A2($elm$core$Dict$remove, stId, oldMachine.statePositions),
										stateTransitions: newStateTransitions,
										transitionNames: A2($elm$core$Dict$diff, oldMachine.transitionNames, removedTransitions)
									});
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: $author$project$Machine$Regular}),
										pModel,
										_Utils_update(
											sModel,
											{machine: newMachine})),
									true,
									$elm$core$Platform$Cmd$none);
							case 'SelectedArrow':
								var _v63 = _v54.a;
								var tId = _v63.b;
								var newStateTransitions = A2(
									$elm$core$Dict$filter,
									F2(
										function (_v66, _v67) {
											var tId0 = _v66.b;
											return !_Utils_eq(tId, tId0);
										}),
									oldMachine.stateTransitions);
								var newDelta = A2(
									$elm$core$Dict$map,
									F2(
										function (_v64, d) {
											return A2(
												$elm$core$Dict$filter,
												F2(
													function (tId0, _v65) {
														return !_Utils_eq(tId, tId0);
													}),
												d);
										}),
									oldMachine.delta);
								var newMachine = _Utils_update(
									oldMachine,
									{
										delta: newDelta,
										stateTransitions: newStateTransitions,
										transitionNames: A2($elm$core$Dict$remove, tId, oldMachine.transitionNames)
									});
								return _Utils_Tuple3(
									_Utils_Tuple3(
										_Utils_update(
											model,
											{machineState: $author$project$Machine$Regular}),
										pModel,
										_Utils_update(
											sModel,
											{machine: newMachine})),
									true,
									$elm$core$Platform$Cmd$none);
							default:
								return _Utils_Tuple3(
									_Utils_Tuple3(model, pModel, sModel),
									false,
									$elm$core$Platform$Cmd$none);
						}
					} else {
						if (k === 'g') {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$author$project$Helpers$sendMsg($author$project$Building$ToggleSnap));
						} else {
							var _v68 = model.machineState;
							if (_v68.$ === 'SelectedState') {
								var sId = _v68.a;
								if (k === 'f') {
									var newMachine = _Utils_update(
										oldMachine,
										{
											_final: function () {
												var _v69 = A2($elm$core$Set$member, sId, oldMachine._final);
												if (_v69) {
													return A2($elm$core$Set$remove, sId, oldMachine._final);
												} else {
													return A2($elm$core$Set$insert, sId, oldMachine._final);
												}
											}()
										});
									return _Utils_Tuple3(
										_Utils_Tuple3(
											model,
											pModel,
											_Utils_update(
												sModel,
												{machine: newMachine})),
										true,
										$elm$core$Platform$Cmd$none);
								} else {
									return _Utils_Tuple3(
										_Utils_Tuple3(model, pModel, sModel),
										false,
										$elm$core$Platform$Cmd$none);
								}
							} else {
								return _Utils_Tuple3(
									_Utils_Tuple3(model, pModel, sModel),
									false,
									$elm$core$Platform$Cmd$none);
							}
						}
					}
				}
			case 'SaveStateName':
				var sId = msg.a;
				var newLbl = msg.b;
				var newMachine = _Utils_update(
					oldMachine,
					{
						stateNames: A3($elm$core$Dict$insert, sId, newLbl, oldMachine.stateNames)
					});
				return _Utils_Tuple3(
					_Utils_Tuple3(
						_Utils_update(
							model,
							{machineState: $author$project$Machine$Regular}),
						pModel,
						_Utils_update(
							sModel,
							{machine: newMachine})),
					true,
					$elm$core$Platform$Cmd$none);
			case 'SaveTransitionName':
				var tId = msg.a;
				var newLbl = msg.b;
				var newTransitions = $author$project$Helpers$parseString2Set(newLbl);
				var newMachine = _Utils_update(
					oldMachine,
					{
						transitionNames: A3($elm$core$Dict$insert, tId, newTransitions, oldMachine.transitionNames)
					});
				var isValidTransition = $author$project$Mistakes$checkTransitionValid(newTransitions);
				return _Utils_Tuple3(
					_Utils_Tuple3(
						_Utils_update(
							model,
							{machineState: $author$project$Machine$Regular}),
						pModel,
						_Utils_update(
							sModel,
							{machine: newMachine})),
					true,
					$elm$core$Platform$Cmd$none);
			case 'ToggleSnap':
				return _Utils_Tuple3(
					_Utils_Tuple3(
						_Utils_update(
							model,
							{
								snapToGrid: _Utils_eq(model.snapToGrid, $author$project$Building$NoSnap) ? $author$project$Building$SnapToGrid(10) : $author$project$Building$NoSnap
							}),
						pModel,
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'ChangeSnap':
				var nn = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						_Utils_update(
							model,
							{
								snapToGrid: function () {
									var _v70 = model.snapToGrid;
									if (_v70.$ === 'SnapToGrid') {
										var n = _v70.a;
										return $author$project$Building$SnapToGrid(n + nn);
									} else {
										return $author$project$Building$NoSnap;
									}
								}()
							}),
						pModel,
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple3(
					_Utils_Tuple3(model, pModel, sModel),
					false,
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Exporting$GetTime = function (a) {
	return {$: 'GetTime', a: a};
};
var $author$project$Exporting$HoverError = {$: 'HoverError'};
var $author$project$Exporting$ShowingOutput = {$: 'ShowingOutput'};
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Exporting$update = F3(
	function (env, msg, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var machine = sModel.machine;
		switch (msg.$) {
			case 'SelectOutput':
				var outputType = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						model,
						_Utils_update(
							pModel,
							{outputType: outputType}),
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'GenerateOutput':
				return _Utils_Tuple3(
					_Utils_Tuple3($author$project$Exporting$ShowingOutput, pModel, sModel),
					false,
					A2(
						$elm$core$Task$perform,
						A2($elm$core$Basics$composeL, $author$project$Exporting$GetTime, $elm$time$Time$posixToMillis),
						$elm$time$Time$now));
			case 'CloseOutput':
				return _Utils_Tuple3(
					_Utils_Tuple3($author$project$Exporting$Default, pModel, sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'MachineMsg':
				var mmsg = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(model, pModel, sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'GetTime':
				var t = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						model,
						_Utils_update(
							pModel,
							{time: t}),
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'HoverErrorEnter':
				return _Utils_Tuple3(
					_Utils_Tuple3($author$project$Exporting$HoverError, pModel, sModel),
					false,
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple3(
					_Utils_Tuple3($author$project$Exporting$Default, pModel, sModel),
					false,
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$SaveLoad$ArchiveMachineResponse = function (a) {
	return {$: 'ArchiveMachineResponse', a: a};
};
var $author$project$SaveLoad$ListLoadResponse = function (a) {
	return {$: 'ListLoadResponse', a: a};
};
var $author$project$SaveLoad$LoadLoading = {$: 'LoadLoading'};
var $author$project$SaveLoad$LoadMachineResponse = function (a) {
	return {$: 'LoadMachineResponse', a: a};
};
var $author$project$SaveLoad$LoadOpen = function (a) {
	return {$: 'LoadOpen', a: a};
};
var $author$project$SaveLoad$LoggingIn = {$: 'LoggingIn'};
var $author$project$SaveLoad$NewOpen = {$: 'NewOpen'};
var $author$project$SaveLoad$SaveMachine = {$: 'SaveMachine'};
var $author$project$SaveLoad$ArchiveResponse = function (success) {
	return {success: success};
};
var $author$project$SaveLoad$decodeArchiveResponse = A2(
	$elm$json$Json$Decode$map,
	$author$project$SaveLoad$ArchiveResponse,
	A2($elm$json$Json$Decode$field, 'success', $elm$json$Json$Decode$bool));
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$SaveLoad$encodeArchivePayload = function (ap) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'uuid',
				$elm$json$Json$Encode$string(ap.uuid)),
				_Utils_Tuple2(
				'restore',
				$elm$json$Json$Encode$bool(ap.restore))
			]));
};
var $elm$http$Http$Internal$StringBody = F2(
	function (a, b) {
		return {$: 'StringBody', a: a, b: b};
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		$elm$http$Http$Internal$StringBody,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$SaveLoad$archiveMachine = F2(
	function (payload, toMsg) {
		return A2(
			$elm$http$Http$send,
			toMsg,
			A3(
				$elm$http$Http$post,
				'/api/machine/archive',
				$elm$http$Http$jsonBody(
					$author$project$SaveLoad$encodeArchivePayload(payload)),
				$author$project$SaveLoad$decodeArchiveResponse));
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$customInitialState = function (id) {
	return $rundis$elm_bootstrap$Bootstrap$Tab$State(
		{
			activeTab: $elm$core$Maybe$Just(id),
			visibility: $rundis$elm_bootstrap$Bootstrap$Tab$Showing
		});
};
var $author$project$SaveLoad$machineTypeStr = function (m) {
	switch (m.$) {
		case 'DFA':
			return 'D';
		case 'NFA':
			return 'N';
		case 'NPDA':
			return 'P';
		default:
			return 'T';
	}
};
var $author$project$SaveLoad$filterToString = function (f) {
	switch (f.$) {
		case 'FilterActive':
			return 'all';
		case 'MachineFilter':
			var m = f.a;
			return $author$project$SaveLoad$machineTypeStr(m);
		default:
			return 'arc';
	}
};
var $author$project$SaveLoad$LoginStatusChange = function (a) {
	return {$: 'LoginStatusChange', a: a};
};
var $author$project$SaveLoad$getLoginStatus = A2(
	$elm$http$Http$send,
	$author$project$SaveLoad$LoginStatusChange,
	A3($elm$http$Http$post, '/accounts/loginstate/', $elm$http$Http$emptyBody, $author$project$SaveLoad$loginStatusDecoder));
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Ports$launchLogin = _Platform_outgoingPort(
	'launchLogin',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$Ports$launchLogout = _Platform_outgoingPort(
	'launchLogout',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $author$project$SaveLoad$LoadMetadata = F5(
	function (id, name, date, description, machine_type) {
		return {date: date, description: description, id: id, machine_type: machine_type, name: name};
	});
var $author$project$SaveLoad$NFA = {$: 'NFA'};
var $author$project$SaveLoad$NPDA = {$: 'NPDA'};
var $author$project$SaveLoad$Turing = {$: 'Turing'};
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$SaveLoad$decodeMachineType = A2(
	$elm$json$Json$Decode$andThen,
	function (m) {
		switch (m) {
			case 'D':
				return $elm$json$Json$Decode$succeed($author$project$SaveLoad$DFA);
			case 'N':
				return $elm$json$Json$Decode$succeed($author$project$SaveLoad$NFA);
			case 'P':
				return $elm$json$Json$Decode$succeed($author$project$SaveLoad$NPDA);
			case 'T':
				return $elm$json$Json$Decode$succeed($author$project$SaveLoad$Turing);
			default:
				var s = m;
				return $elm$json$Json$Decode$fail('Invalid string ' + (s + ' for machine type'));
		}
	},
	$elm$json$Json$Decode$string);
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$SaveLoad$decodeMetadataV1 = A6(
	$elm$json$Json$Decode$map5,
	$author$project$SaveLoad$LoadMetadata,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'date',
		A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
	A2($elm$json$Json$Decode$field, 'desc', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $author$project$SaveLoad$decodeMachineType));
var $author$project$SaveLoad$decodeMetadata = A2(
	$elm$json$Json$Decode$andThen,
	function (v) {
		if (v === 1) {
			return $author$project$SaveLoad$decodeMetadataV1;
		} else {
			return $elm$json$Json$Decode$fail(
				'Invalid save metadata version ' + $elm$core$String$fromInt(v));
		}
	},
	A2($elm$json$Json$Decode$field, 'v', $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$SaveLoad$decodeMachineList = $elm$json$Json$Decode$list($author$project$SaveLoad$decodeMetadata);
var $elm$http$Http$stringBody = $elm$http$Http$Internal$StringBody;
var $author$project$SaveLoad$loadList = F2(
	function (machineType, toMsg) {
		return A2(
			$elm$http$Http$send,
			toMsg,
			A3(
				$elm$http$Http$post,
				'/api/machine/list',
				A2(
					$elm$http$Http$stringBody,
					'text/plain',
					$author$project$SaveLoad$filterToString(machineType)),
				$author$project$SaveLoad$decodeMachineList));
	});
var $author$project$SaveLoad$LoadPayload = F4(
	function (machine, tapes, name, uuid) {
		return {machine: machine, name: name, tapes: tapes, uuid: uuid};
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Utils$decodeDict = F2(
	function (decComp, decValu) {
		return A2(
			$elm$json$Json$Decode$map,
			$elm$core$Dict$fromList,
			$elm$json$Json$Decode$list(
				A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Tuple$pair,
					A2($elm$json$Json$Decode$field, 'k', decComp),
					A2($elm$json$Json$Decode$field, 'v', decValu))));
	});
var $author$project$Simulating$inputTapeDecoder = A2(
	$elm$json$Json$Decode$map,
	$elm$core$Array$fromList,
	$elm$json$Json$Decode$list($elm$json$Json$Decode$string));
var $author$project$Simulating$inputTapeDictDecoder = A2($author$project$Utils$decodeDict, $elm$json$Json$Decode$int, $author$project$Simulating$inputTapeDecoder);
var $author$project$Utils$decodePair = F2(
	function (decX, decY) {
		return A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Tuple$pair,
			A2($elm$json$Json$Decode$field, 'f', decX),
			A2($elm$json$Json$Decode$field, 's', decY));
	});
var $author$project$Utils$decodeSet = function (decComp) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Set$fromList,
		$elm$json$Json$Decode$list(decComp));
};
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$Utils$decodeTriple = F3(
	function (decX, decY, decZ) {
		return A4(
			$elm$json$Json$Decode$map3,
			F3(
				function (x, y, z) {
					return _Utils_Tuple3(x, y, z);
				}),
			A2($elm$json$Json$Decode$field, 'f', decX),
			A2($elm$json$Json$Decode$field, 's', decY),
			A2($elm$json$Json$Decode$field, 't', decZ));
	});
var $elm$json$Json$Decode$map8 = _Json_map8;
var $author$project$Machine$machineDecoderV1 = function () {
	var transTriple = A3($author$project$Utils$decodeTriple, $elm$json$Json$Decode$int, $elm$json$Json$Decode$int, $elm$json$Json$Decode$int);
	var transPosDecoder = A2(
		$elm$json$Json$Decode$field,
		'transPositions',
		A2(
			$author$project$Utils$decodeDict,
			transTriple,
			A2($author$project$Utils$decodePair, $elm$json$Json$Decode$float, $elm$json$Json$Decode$float)));
	var transNamesDecoder = A2(
		$elm$json$Json$Decode$field,
		'transNames',
		A2(
			$author$project$Utils$decodeDict,
			$elm$json$Json$Decode$int,
			$author$project$Utils$decodeSet($elm$json$Json$Decode$string)));
	var statePosDecoder = A2(
		$elm$json$Json$Decode$field,
		'statePositions',
		A2(
			$author$project$Utils$decodeDict,
			$elm$json$Json$Decode$int,
			A2($author$project$Utils$decodePair, $elm$json$Json$Decode$float, $elm$json$Json$Decode$float)));
	var stateNamesDecoder = A2(
		$elm$json$Json$Decode$field,
		'stateNames',
		A2($author$project$Utils$decodeDict, $elm$json$Json$Decode$int, $elm$json$Json$Decode$string));
	var startDecoder = A2(
		$elm$json$Json$Decode$field,
		'start',
		$author$project$Utils$decodeSet($elm$json$Json$Decode$int));
	var qDecoder = A2(
		$elm$json$Json$Decode$field,
		'q',
		$author$project$Utils$decodeSet($elm$json$Json$Decode$int));
	var finalDecoder = A2(
		$elm$json$Json$Decode$field,
		'final',
		$author$project$Utils$decodeSet($elm$json$Json$Decode$int));
	var deltaDecoder = A2(
		$elm$json$Json$Decode$field,
		'delta',
		A2(
			$author$project$Utils$decodeDict,
			$elm$json$Json$Decode$int,
			A2($author$project$Utils$decodeDict, $elm$json$Json$Decode$int, $elm$json$Json$Decode$int)));
	return A9($elm$json$Json$Decode$map8, $author$project$Machine$Machine, qDecoder, deltaDecoder, startDecoder, finalDecoder, statePosDecoder, transPosDecoder, stateNamesDecoder, transNamesDecoder);
}();
var $author$project$Machine$machineDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (v) {
		if (v === 1) {
			return $author$project$Machine$machineDecoderV1;
		} else {
			return $elm$json$Json$Decode$fail(
				'Invalid save metadata version ' + $elm$core$String$fromInt(v));
		}
	},
	A2($elm$json$Json$Decode$field, 'v', $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$SaveLoad$decodeLoadPayload = A5(
	$elm$json$Json$Decode$map4,
	$author$project$SaveLoad$LoadPayload,
	A2($elm$json$Json$Decode$field, 'machine', $author$project$Machine$machineDecoder),
	A2($elm$json$Json$Decode$field, 'tape', $author$project$Simulating$inputTapeDictDecoder),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'uuid', $elm$json$Json$Decode$string));
var $author$project$SaveLoad$loadMachine = F2(
	function (uuid, toMsg) {
		return A2(
			$elm$http$Http$send,
			toMsg,
			A3(
				$elm$http$Http$post,
				'/api/machine/load',
				$elm$http$Http$jsonBody(
					$elm$json$Json$Encode$string(uuid)),
				$author$project$SaveLoad$decodeLoadPayload));
	});
var $author$project$SaveLoad$MachineSaveResponse = function (a) {
	return {$: 'MachineSaveResponse', a: a};
};
var $author$project$SaveLoad$SaveResponse = F2(
	function (success, uuid) {
		return {success: success, uuid: uuid};
	});
var $author$project$SaveLoad$decodeSaveResponse = A3(
	$elm$json$Json$Decode$map2,
	$author$project$SaveLoad$SaveResponse,
	A2($elm$json$Json$Decode$field, 'success', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'uuid', $elm$json$Json$Decode$string));
var $author$project$SaveLoad$encodeMachineType = A2($elm$core$Basics$composeL, $elm$json$Json$Encode$string, $author$project$SaveLoad$machineTypeStr);
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $author$project$Utils$encodeDict = F3(
	function (compFn, valFn, dict) {
		return A2(
			$elm$json$Json$Encode$list,
			function (_v0) {
				var k = _v0.a;
				var v = _v0.b;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'k',
							compFn(k)),
							_Utils_Tuple2(
							'v',
							valFn(v))
						]));
			},
			$elm$core$Dict$toList(dict));
	});
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Simulating$inputTapeEncoder = A2(
	$author$project$Utils$encodeDict,
	$elm$json$Json$Encode$int,
	A2(
		$elm$core$Basics$composeL,
		A2(
			$elm$core$Basics$composeL,
			$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
			$elm$core$Array$toList),
		$elm$core$Tuple$first));
var $author$project$Utils$encodePair = F3(
	function (encA, encB, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'f',
					encA(a)),
					_Utils_Tuple2(
					's',
					encB(b))
				]));
	});
var $author$project$Utils$encodeSet = function (valFn) {
	return A2(
		$elm$core$Basics$composeL,
		$elm$json$Json$Encode$list(valFn),
		$elm$core$Set$toList);
};
var $author$project$Utils$encodeTriple = F4(
	function (encA, encB, encC, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'f',
					encA(a)),
					_Utils_Tuple2(
					's',
					encB(b)),
					_Utils_Tuple2(
					't',
					encC(c))
				]));
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Machine$machineEncoderV1 = function (machine) {
	var transTriple = A3($author$project$Utils$decodeTriple, $elm$json$Json$Decode$int, $elm$json$Json$Decode$int, $elm$json$Json$Decode$int);
	var transPosEncoder = A2(
		$author$project$Utils$encodeDict,
		A3($author$project$Utils$encodeTriple, $elm$json$Json$Encode$int, $elm$json$Json$Encode$int, $elm$json$Json$Encode$int),
		A2($author$project$Utils$encodePair, $elm$json$Json$Encode$float, $elm$json$Json$Encode$float));
	var transNamesEncoder = A2(
		$author$project$Utils$encodeDict,
		$elm$json$Json$Encode$int,
		$author$project$Utils$encodeSet($elm$json$Json$Encode$string));
	var statePosEncoder = A2(
		$author$project$Utils$encodeDict,
		$elm$json$Json$Encode$int,
		A2($author$project$Utils$encodePair, $elm$json$Json$Encode$float, $elm$json$Json$Encode$float));
	var stateNamesEncoder = A2($author$project$Utils$encodeDict, $elm$json$Json$Encode$int, $elm$json$Json$Encode$string);
	var startEncoder = $author$project$Utils$encodeSet($elm$json$Json$Encode$int);
	var qEncoder = $author$project$Utils$encodeSet($elm$json$Json$Encode$int);
	var finalEncoder = $author$project$Utils$encodeSet($elm$json$Json$Encode$int);
	var deltaEncoder = A2(
		$author$project$Utils$encodeDict,
		$elm$json$Json$Encode$int,
		A2($author$project$Utils$encodeDict, $elm$json$Json$Encode$int, $elm$json$Json$Encode$int));
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'q',
				qEncoder(machine.q)),
				_Utils_Tuple2(
				'delta',
				deltaEncoder(machine.delta)),
				_Utils_Tuple2(
				'start',
				startEncoder(machine.start)),
				_Utils_Tuple2(
				'final',
				finalEncoder(machine._final)),
				_Utils_Tuple2(
				'statePositions',
				statePosEncoder(machine.statePositions)),
				_Utils_Tuple2(
				'transPositions',
				transPosEncoder(machine.stateTransitions)),
				_Utils_Tuple2(
				'stateNames',
				stateNamesEncoder(machine.stateNames)),
				_Utils_Tuple2(
				'transNames',
				transNamesEncoder(machine.transitionNames)),
				_Utils_Tuple2(
				'v',
				$elm$json$Json$Encode$int(1))
			]));
};
var $author$project$Machine$machineEncoder = $author$project$Machine$machineEncoderV1;
var $author$project$SaveLoad$encodeMachinePayloadV1 = F6(
	function (name, desc, machine, uuid, inputTape, machine_type) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(name)),
					_Utils_Tuple2(
					'desc',
					$elm$json$Json$Encode$string(desc)),
					_Utils_Tuple2(
					'machine',
					$author$project$Machine$machineEncoder(machine)),
					_Utils_Tuple2(
					'v',
					$elm$json$Json$Encode$int(1)),
					_Utils_Tuple2(
					'uuid',
					$elm$json$Json$Encode$string(uuid)),
					_Utils_Tuple2(
					'tape',
					$author$project$Simulating$inputTapeEncoder(inputTape)),
					_Utils_Tuple2(
					'type',
					$author$project$SaveLoad$encodeMachineType(machine_type))
				]));
	});
var $author$project$SaveLoad$encodeMachinePayload = $author$project$SaveLoad$encodeMachinePayloadV1;
var $author$project$SaveLoad$saveMachine = F7(
	function (name, desc, machine, uuid, inputTape, machine_type, toMsg) {
		return A2(
			$elm$http$Http$send,
			toMsg,
			A3(
				$elm$http$Http$post,
				'/api/machine/save',
				$elm$http$Http$jsonBody(
					A6($author$project$SaveLoad$encodeMachinePayload, name, desc, machine, uuid, inputTape, machine_type)),
				$author$project$SaveLoad$decodeSaveResponse));
	});
var $author$project$SaveLoad$machineCreatedUpdate = F4(
	function (env, appModel, msg, model) {
		switch (msg.$) {
			case 'EditMachineName':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editingName: true}),
					$elm$core$Platform$Cmd$none);
			case 'TypeName':
				var n = msg.a;
				var meta = model.machineMetadata;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							machineMetadata: _Utils_update(
								meta,
								{name: n})
						}),
					$elm$core$Platform$Cmd$none);
			case 'SaveMachine':
				return _Utils_Tuple2(
					model,
					A7($author$project$SaveLoad$saveMachine, model.machineMetadata.name, model.machineMetadata.description, appModel.sharedModel.machine, model.machineMetadata.id, appModel.simulatingData.tapes, model.machineMetadata.machine_type, $author$project$SaveLoad$MachineSaveResponse));
			case 'MachineSaveResponse':
				var saveresp = msg.a;
				var meta = model.machineMetadata;
				if (saveresp.$ === 'Ok') {
					var oksaveresp = saveresp.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lastSaved: env.currentTime,
								machineMetadata: _Utils_update(
									meta,
									{id: oksaveresp.uuid}),
								unsavedChanges: false
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'AutoSave':
				var time = msg.a;
				return _Utils_Tuple2(
					model,
					model.unsavedChanges ? A7($author$project$SaveLoad$saveMachine, model.machineMetadata.name, model.machineMetadata.description, appModel.sharedModel.machine, model.machineMetadata.id, appModel.simulatingData.tapes, model.machineMetadata.machine_type, $author$project$SaveLoad$MachineSaveResponse) : $elm$core$Platform$Cmd$none);
			default:
				var state = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{tabState: state}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Utils$newMsg = function (msg) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$identity,
		$elm$core$Task$succeed(msg));
};
var $author$project$SaveLoad$update = F4(
	function (msg, model, env, appModel) {
		var m = A2($elm$core$Debug$log, 'model', model);
		switch (msg.$) {
			case 'OpenLoadDialog':
				return _Utils_Tuple2(
					_Utils_update(
						m,
						{loadDialog: $author$project$SaveLoad$LoadLoading}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($author$project$SaveLoad$loadList, $author$project$SaveLoad$FilterActive, $author$project$SaveLoad$ListLoadResponse),
								model.unsavedChanges ? $author$project$Utils$newMsg(
								$author$project$SaveLoad$MachineCreatedMsg($author$project$SaveLoad$SaveMachine)) : $elm$core$Platform$Cmd$none
							])));
			case 'ListLoadResponse':
				var response = msg.a;
				var _v1 = A2($elm$core$Debug$log, 'machineListResponse', response);
				if (_v1.$ === 'Ok') {
					var machineList = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								loadDialog: $author$project$SaveLoad$LoadOpen(machineList),
								loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$shown,
								loadingList: $elm$core$Maybe$Nothing,
								machineData: $author$project$SaveLoad$MachineCreated
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loadDialog: $author$project$SaveLoad$NothingOpen}),
						$elm$core$Platform$Cmd$none);
				}
			case 'LoadMachine':
				var meta = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadDialog: $author$project$SaveLoad$NothingOpen, machineMetadata: meta}),
					A2($author$project$SaveLoad$loadMachine, meta.id, $author$project$SaveLoad$LoadMachineResponse));
			case 'LoadMachineResponse':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'SelectFilter':
				var filter_type = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							loadDialog: $author$project$SaveLoad$LoadOpen(_List_Nil),
							loadFilter: filter_type,
							loadingList: $elm$core$Maybe$Just(filter_type),
							tabState: $rundis$elm_bootstrap$Bootstrap$Tab$customInitialState(
								$author$project$SaveLoad$filterToString(filter_type))
						}),
					A2($author$project$SaveLoad$loadList, filter_type, $author$project$SaveLoad$ListLoadResponse));
			case 'OpenLoginDialog':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loginState: $author$project$SaveLoad$LoggingIn}),
					$author$project$Ports$launchLogin(_Utils_Tuple0));
			case 'OpenLogoutDialog':
				return _Utils_Tuple2(
					model,
					$author$project$Ports$launchLogout(_Utils_Tuple0));
			case 'GetLoginStatus':
				return _Utils_Tuple2(model, $author$project$SaveLoad$getLoginStatus);
			case 'LoginStatusChange':
				var loginStatus = msg.a;
				if (loginStatus.$ === 'Ok') {
					var loginState = loginStatus.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loginState: loginState}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'InitLoginStatus':
				var loginStatus = msg.a;
				var _v3 = A2($elm$core$Debug$log, 'loginStatus', loginStatus);
				if (_v3.$ === 'Ok') {
					var loginState = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								loadDialog: function () {
									switch (loginState.$) {
										case 'LoggedIn':
											var email = loginState.a;
											var latestMachine = loginState.b;
											return $author$project$SaveLoad$NothingOpen;
										case 'NotLoggedIn':
											return $author$project$SaveLoad$NewOpen;
										default:
											return $author$project$SaveLoad$NothingOpen;
									}
								}(),
								loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$shown,
								loginState: loginState
							}),
						function () {
							if ((loginState.$ === 'LoggedIn') && (loginState.b.$ === 'Just')) {
								var uuid = loginState.b.a;
								return A2($author$project$SaveLoad$loadMachine, uuid, $author$project$SaveLoad$LoadMachineResponse);
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						}());
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'ArchiveMachine':
				var uuid = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$SaveLoad$archiveMachine,
						{restore: false, uuid: uuid},
						$author$project$SaveLoad$ArchiveMachineResponse));
			case 'RestoreMachine':
				var uuid = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$SaveLoad$archiveMachine,
						{restore: true, uuid: uuid},
						$author$project$SaveLoad$ArchiveMachineResponse));
			case 'ArchiveMachineResponse':
				var archiveResponse = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$SaveLoad$loadList, model.loadFilter, $author$project$SaveLoad$ListLoadResponse));
			case 'MachineCreatedMsg':
				var mcMsg = msg.a;
				var _v6 = model.machineData;
				if (_v6.$ === 'MachineCreated') {
					var _v7 = A4($author$project$SaveLoad$machineCreatedUpdate, env, appModel, mcMsg, model);
					var newModel = _v7.a;
					var mcCmd = _v7.b;
					return _Utils_Tuple2(
						newModel,
						A2($elm$core$Platform$Cmd$map, $author$project$SaveLoad$MachineCreatedMsg, mcCmd));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'CloseLoadDialog':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadDialog: $author$project$SaveLoad$NothingOpen, loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$hidden}),
					$elm$core$Platform$Cmd$none);
			case 'ModalAnimation':
				var v = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadDialogModal: v}),
					$elm$core$Platform$Cmd$none);
			case 'OpenNewDialog':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loadDialog: $author$project$SaveLoad$NewOpen, loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$shown}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Simulating$Editing = function (a) {
	return {$: 'Editing', a: a};
};
var $author$project$SharedModel$NFA = {$: 'NFA'};
var $author$project$Simulating$Step = {$: 'Step'};
var $author$project$Simulating$ToggleStart = function (a) {
	return {$: 'ToggleStart', a: a};
};
var $author$project$Simulating$delta = F4(
	function (tNames, d, ch, state) {
		var getName = function (trans) {
			var _v2 = A2($elm$core$Dict$get, trans, tNames);
			if (_v2.$ === 'Just') {
				var n = _v2.a;
				return n;
			} else {
				return $elm$core$Set$empty;
			}
		};
		var _v0 = A2($elm$core$Dict$get, state, d);
		if (_v0.$ === 'Just') {
			var transMap = _v0.a;
			var states = A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var tId = _v1.a;
					var sId = _v1.b;
					return (A2(
						$elm$core$Set$member,
						ch,
						getName(tId)) || (($author$project$Helpers$renderSet2String(
						getName(tId)) === '\\epsilon') && _Utils_eq(sId, state))) ? $elm$core$Maybe$Just(sId) : $elm$core$Maybe$Nothing;
				},
				$elm$core$Dict$toList(transMap));
			return $elm$core$Set$fromList(states);
		} else {
			return $elm$core$Set$empty;
		}
	});
var $author$project$Simulating$deltaHat = F4(
	function (tNames, d, ch, states) {
		var newStates = A3(
			$elm$core$Set$foldl,
			F2(
				function (curr, ss) {
					return A2(
						$elm$core$Set$union,
						ss,
						A4($author$project$Simulating$delta, tNames, d, ch, curr));
				}),
			$elm$core$Set$empty,
			states);
		return A3($author$project$Simulating$epsTrans, tNames, d, newStates);
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $author$project$Simulating$update = F3(
	function (env, msg, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var oldMachine = sModel.machine;
		var machineType = sModel.machineType;
		switch (msg.$) {
			case 'Step':
				if (model.$ === 'Default') {
					var tapeId = model.a;
					var charId = model.b;
					var hover = model.c;
					var nextCh = function () {
						var _v3 = A2($elm$core$Dict$get, tapeId, pModel.tapes);
						if (_v3.$ === 'Just') {
							var _v4 = _v3.a;
							var ar = _v4.a;
							var tapeStatus = _v4.b;
							var _v5 = A2($elm$core$Array$get, charId + 1, ar);
							if (_v5.$ === 'Just') {
								var ch = _v5.a;
								return _Utils_eq(tapeStatus, $author$project$Simulating$Fresh) ? ch : '';
							} else {
								return '';
							}
						} else {
							return '';
						}
					}();
					return (nextCh !== '') ? _Utils_Tuple3(
						_Utils_Tuple3(
							A3($author$project$Simulating$Default, tapeId, charId + 1, hover),
							_Utils_update(
								pModel,
								{
									currentStates: A4($author$project$Simulating$deltaHat, oldMachine.transitionNames, oldMachine.delta, nextCh, pModel.currentStates)
								}),
							sModel),
						false,
						$elm$core$Platform$Cmd$none) : _Utils_Tuple3(
						_Utils_Tuple3(model, pModel, sModel),
						false,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(
						_Utils_Tuple3(model, pModel, sModel),
						false,
						$elm$core$Platform$Cmd$none);
				}
			case 'EditTape':
				var tId = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						$author$project$Simulating$Editing(tId),
						pModel,
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'DeleteTape':
				var tId = msg.a;
				var newModel = function () {
					if (model.$ === 'Default') {
						var tId0 = model.a;
						var chId = model.b;
						var hover = model.c;
						return _Utils_eq(tId0, tId) ? A3($author$project$Simulating$Default, 0, -1, hover) : A3($author$project$Simulating$Default, tId0, chId, hover);
					} else {
						return model;
					}
				}();
				return _Utils_Tuple3(
					_Utils_Tuple3(
						newModel,
						_Utils_update(
							pModel,
							{
								tapes: A2($elm$core$Dict$remove, tId, pModel.tapes)
							}),
						sModel),
					true,
					$elm$core$Platform$Cmd$none);
			case 'AddNewTape':
				var newId = function () {
					var _v7 = $elm$core$List$maximum(
						$elm$core$Dict$keys(pModel.tapes));
					if (_v7.$ === 'Just') {
						var n = _v7.a;
						return n;
					} else {
						return 0;
					}
				}() + 1;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						model,
						_Utils_update(
							pModel,
							{
								tapes: A3(
									$elm$core$Dict$insert,
									newId,
									_Utils_Tuple2($elm$core$Array$empty, $author$project$Simulating$Fresh),
									pModel.tapes)
							}),
						sModel),
					true,
					$elm$core$Platform$Cmd$none);
			case 'ChangeTape':
				var tId = msg.a;
				return _Utils_Tuple3(
					_Utils_Tuple3(
						A3($author$project$Simulating$Default, tId, -1, $elm$core$Maybe$Nothing),
						_Utils_update(
							pModel,
							{
								currentStates: A3($author$project$Simulating$epsTrans, oldMachine.transitionNames, oldMachine.delta, oldMachine.start)
							}),
						sModel),
					false,
					$elm$core$Platform$Cmd$none);
			case 'KeyPressed':
				var k = msg.a;
				if (k === 'Enter') {
					if (model.$ === 'Editing') {
						var tId = model.a;
						return _Utils_Tuple3(
							_Utils_Tuple3(
								A3($author$project$Simulating$Default, tId, -1, $elm$core$Maybe$Nothing),
								_Utils_update(
									pModel,
									{
										currentStates: A3($author$project$Simulating$epsTrans, oldMachine.transitionNames, oldMachine.delta, oldMachine.start)
									}),
								sModel),
							true,
							$elm$core$Platform$Cmd$none);
					} else {
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$elm$core$Platform$Cmd$none);
					}
				} else {
					if ((k === 'Backspace') || (k === 'ArrowLeft')) {
						if (model.$ === 'Editing') {
							var tapeId = model.a;
							var newPModel = _Utils_update(
								pModel,
								{
									tapes: A3(
										$elm$core$Dict$update,
										tapeId,
										function (m) {
											if (m.$ === 'Just') {
												var _v11 = m.a;
												var ar = _v11.a;
												var tapeSt = _v11.b;
												var newTape = A3($elm$core$Array$slice, 0, -1, ar);
												var freshSt = A2($author$project$Simulating$checkTape, sModel, newTape);
												return $elm$core$Maybe$Just(
													_Utils_Tuple2(
														A3($elm$core$Array$slice, 0, -1, ar),
														freshSt));
											} else {
												return m;
											}
										},
										pModel.tapes)
								});
							return _Utils_Tuple3(
								_Utils_Tuple3(model, newPModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, pModel, sModel),
								false,
								$elm$core$Platform$Cmd$none);
						}
					} else {
						if (k === 'ArrowRight') {
							if (model.$ === 'Default') {
								return _Utils_Tuple3(
									_Utils_Tuple3(model, pModel, sModel),
									false,
									A2(
										$elm$core$Task$perform,
										$elm$core$Basics$identity,
										$elm$core$Task$succeed($author$project$Simulating$Step)));
							} else {
								return _Utils_Tuple3(
									_Utils_Tuple3(model, pModel, sModel),
									false,
									$elm$core$Platform$Cmd$none);
							}
						} else {
							if (k === 'ArrowLeft') {
								if (model.$ === 'Default') {
									var tId = model.a;
									var hErr = model.c;
									return _Utils_Tuple3(
										_Utils_Tuple3(
											A3($author$project$Simulating$Default, tId, -1, hErr),
											_Utils_update(
												pModel,
												{currentStates: sModel.machine.start}),
											sModel),
										false,
										$elm$core$Platform$Cmd$none);
								} else {
									return _Utils_Tuple3(
										_Utils_Tuple3(model, pModel, sModel),
										false,
										$elm$core$Platform$Cmd$none);
								}
							} else {
								if (model.$ === 'Editing') {
									var tapeId = model.a;
									var chars = $elm$core$Array$fromList(
										$elm$core$Set$toList(
											A2(
												$elm$core$Set$remove,
												'\\epsilon',
												A3(
													$elm$core$List$foldr,
													$elm$core$Set$union,
													$elm$core$Set$empty,
													$elm$core$Dict$values(oldMachine.transitionNames)))));
									var charCode = function () {
										switch (k) {
											case 'a':
												return 0;
											case 's':
												return 1;
											case 'd':
												return 2;
											case 'f':
												return 3;
											case 'g':
												return 4;
											case 'h':
												return 5;
											case 'j':
												return 6;
											case 'k':
												return 7;
											case 'l':
												return 8;
											case 'q':
												return 9;
											case 'w':
												return 10;
											case 'e':
												return 11;
											case 'r':
												return 12;
											case 't':
												return 13;
											case 'y':
												return 14;
											case 'u':
												return 15;
											case 'i':
												return 16;
											case 'o':
												return 17;
											case 'p':
												return 18;
											case 'z':
												return 19;
											case 'x':
												return 20;
											case 'c':
												return 21;
											case 'v':
												return 22;
											case 'b':
												return 23;
											case 'n':
												return 24;
											case 'm':
												return 25;
											default:
												return -1;
										}
									}();
									var newChar = A2($elm$core$Array$get, charCode, chars);
									var newPModel = _Utils_update(
										pModel,
										{
											tapes: A3(
												$elm$core$Dict$update,
												tapeId,
												function (m) {
													var _v15 = _Utils_Tuple2(m, newChar);
													_v15$2:
													while (true) {
														if (_v15.a.$ === 'Just') {
															if (_v15.b.$ === 'Just') {
																var _v16 = _v15.a.a;
																var ar = _v16.a;
																var tapeSt = _v16.b;
																var ch = _v15.b.a;
																return $elm$core$Maybe$Just(
																	_Utils_Tuple2(
																		A2($elm$core$Array$push, ch, ar),
																		tapeSt));
															} else {
																break _v15$2;
															}
														} else {
															if (_v15.b.$ === 'Just') {
																var _v17 = _v15.a;
																var ch = _v15.b.a;
																return $elm$core$Maybe$Just(
																	_Utils_Tuple2(
																		$elm$core$Array$fromList(
																			_List_fromArray(
																				[ch])),
																		$author$project$Simulating$Fresh));
															} else {
																break _v15$2;
															}
														}
													}
													return m;
												},
												pModel.tapes)
										});
									return _Utils_Tuple3(
										_Utils_Tuple3(model, newPModel, sModel),
										false,
										$elm$core$Platform$Cmd$none);
								} else {
									return _Utils_Tuple3(
										_Utils_Tuple3(model, pModel, sModel),
										false,
										$elm$core$Platform$Cmd$none);
								}
							}
						}
					}
				}
			case 'ChangeMachine':
				var mtype = msg.a;
				if (mtype.$ === 'NFA') {
					var _v20 = sModel.machineType;
					if (_v20.$ === 'NFA') {
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$elm$core$Platform$Cmd$none);
					} else {
						if (model.$ === 'Editing') {
							var tId = model.a;
							return _Utils_Tuple3(
								_Utils_Tuple3(
									A3($author$project$Simulating$Default, tId, -1, $elm$core$Maybe$Nothing),
									pModel,
									_Utils_update(
										sModel,
										{machineType: $author$project$SharedModel$NFA})),
								false,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(
									model,
									pModel,
									_Utils_update(
										sModel,
										{machineType: $author$project$SharedModel$NFA})),
								false,
								$elm$core$Platform$Cmd$none);
						}
					}
				} else {
					var _v22 = sModel.machineType;
					if (_v22.$ === 'DFA') {
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$elm$core$Platform$Cmd$none);
					} else {
						var startState = ($elm$core$Set$size(oldMachine.start) > 1) ? $elm$core$Set$singleton(
							function (x) {
								if (x.$ === 'Just') {
									var val = x.a;
									return val;
								} else {
									return -1;
								}
							}(
								$elm$core$List$head(
									$elm$core$Set$toList(oldMachine.start)))) : oldMachine.start;
						var newSModel = _Utils_update(
							sModel,
							{
								machine: _Utils_update(
									oldMachine,
									{start: startState}),
								machineType: $author$project$SharedModel$DFA
							});
						var newPModel = _Utils_update(
							pModel,
							{currentStates: startState});
						if (model.$ === 'Editing') {
							var tId = model.a;
							return _Utils_Tuple3(
								_Utils_Tuple3(
									A3($author$project$Simulating$Default, tId, -1, $elm$core$Maybe$Nothing),
									newPModel,
									newSModel),
								true,
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple3(
								_Utils_Tuple3(model, newPModel, newSModel),
								true,
								$elm$core$Platform$Cmd$none);
						}
					}
				}
			case 'MachineMsg':
				var mmsg = msg.a;
				switch (mmsg.$) {
					case 'StartDragging':
						var sId = mmsg.a;
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$author$project$Helpers$sendMsg(
								$author$project$Simulating$ToggleStart(sId)));
					case 'TapState':
						var sId = mmsg.a;
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$author$project$Helpers$sendMsg(
								$author$project$Simulating$ToggleStart(sId)));
					default:
						return _Utils_Tuple3(
							_Utils_Tuple3(model, pModel, sModel),
							false,
							$elm$core$Platform$Cmd$none);
				}
			case 'ToggleStart':
				var sId = msg.a;
				var tests = oldMachine.start;
				var newMachine = function () {
					if (machineType.$ === 'NFA') {
						return _Utils_update(
							oldMachine,
							{
								start: function () {
									var _v28 = A2($elm$core$Set$member, sId, oldMachine.start);
									if (_v28) {
										return A2($elm$core$Set$remove, sId, oldMachine.start);
									} else {
										return A2($elm$core$Set$insert, sId, oldMachine.start);
									}
								}()
							});
					} else {
						return _Utils_update(
							oldMachine,
							{
								start: $elm$core$Set$singleton(sId)
							});
					}
				}();
				if (model.$ === 'Default') {
					var tId = model.a;
					return _Utils_Tuple3(
						_Utils_Tuple3(
							A3($author$project$Simulating$Default, tId, -1, $elm$core$Maybe$Nothing),
							_Utils_update(
								pModel,
								{
									currentStates: A3($author$project$Simulating$epsTrans, oldMachine.transitionNames, oldMachine.delta, newMachine.start)
								}),
							_Utils_update(
								sModel,
								{machine: newMachine})),
						true,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(
						_Utils_Tuple3(model, pModel, sModel),
						false,
						$elm$core$Platform$Cmd$none);
				}
			case 'HoverErrorEnter':
				var tapeId = msg.a;
				if (model.$ === 'Default') {
					var tId = model.a;
					var pos = model.b;
					return _Utils_Tuple3(
						_Utils_Tuple3(
							A3(
								$author$project$Simulating$Default,
								tId,
								pos,
								$elm$core$Maybe$Just(tapeId)),
							pModel,
							sModel),
						false,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(
						_Utils_Tuple3(model, pModel, sModel),
						false,
						$elm$core$Platform$Cmd$none);
				}
			default:
				if (model.$ === 'Default') {
					var tId = model.a;
					var pos = model.b;
					return _Utils_Tuple3(
						_Utils_Tuple3(
							A3($author$project$Simulating$Default, tId, pos, $elm$core$Maybe$Nothing),
							pModel,
							sModel),
						false,
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple3(
						_Utils_Tuple3(model, pModel, sModel),
						false,
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		var sm = model.saveModel;
		var oldEnvironment = model.environment;
		var currentAppState = model.appModel.present;
		switch (msg.$) {
			case 'BMsg':
				var bmsg = msg.a;
				var _v1 = currentAppState.appState;
				if (_v1.$ === 'Building') {
					var m = _v1.a;
					return A9(
						$author$project$Main$moduleUpdate,
						oldEnvironment,
						bmsg,
						m,
						currentAppState.buildingData,
						model,
						$author$project$Main$BMsg,
						$author$project$ApplicationModel$Building,
						F2(
							function (pm, am) {
								return _Utils_update(
									am,
									{buildingData: pm});
							}),
						$author$project$Building$update);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'SMsg':
				var smsg = msg.a;
				var _v2 = currentAppState.appState;
				if (_v2.$ === 'Simulating') {
					var m = _v2.a;
					return A9(
						$author$project$Main$moduleUpdate,
						oldEnvironment,
						smsg,
						m,
						currentAppState.simulatingData,
						model,
						$author$project$Main$SMsg,
						$author$project$ApplicationModel$Simulating,
						F2(
							function (pm, am) {
								return _Utils_update(
									am,
									{simulatingData: pm});
							}),
						$author$project$Simulating$update);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'EMsg':
				var emsg = msg.a;
				var _v3 = currentAppState.appState;
				if (_v3.$ === 'Exporting') {
					var m = _v3.a;
					return A9(
						$author$project$Main$moduleUpdate,
						oldEnvironment,
						emsg,
						m,
						currentAppState.exportingData,
						model,
						$author$project$Main$EMsg,
						$author$project$ApplicationModel$Exporting,
						F2(
							function (pm, am) {
								return _Utils_update(
									am,
									{exportingData: pm});
							}),
						$author$project$Exporting$update);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'WindowSize':
				var _v4 = msg.a;
				var w = _v4.a;
				var h = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{
									windowSize: _Utils_Tuple2(w, h)
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UrlChange':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'UrlRequest':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'KeyReleased':
				var k = msg.a;
				return (k === 'Shift') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{holdingShift: false})
						}),
					$elm$core$Platform$Cmd$none) : ((k === 'Meta') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{holdingMeta: false})
						}),
					$elm$core$Platform$Cmd$none) : ((k === 'Control') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{holdingControl: false})
						}),
					$elm$core$Platform$Cmd$none) : ((k === 'Enter') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{
							saveModel: _Utils_update(
								sm,
								{editingName: false, unsavedChanges: true})
						}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none))));
			case 'KeyPressed':
				var k = msg.a;
				if (k === 'Shift') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								environment: _Utils_update(
									oldEnvironment,
									{holdingShift: true})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					if ((k === 'y') || (k === 'z')) {
						var doUndo = (oldEnvironment.holdingControl || oldEnvironment.holdingMeta) && (k === 'z');
						var doRedo = (oldEnvironment.holdingControl && (k === 'y')) || (oldEnvironment.holdingMeta && (oldEnvironment.holdingShift && (k === 'z')));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									appModel: doRedo ? $author$project$BetterUndoList$redo(model.appModel) : (doUndo ? $author$project$BetterUndoList$undo(model.appModel) : model.appModel),
									saveModel: _Utils_update(
										sm,
										{unsavedChanges: doRedo || doUndo})
								}),
							$elm$core$Platform$Cmd$none);
					} else {
						if (k === 'Meta') {
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										environment: _Utils_update(
											oldEnvironment,
											{holdingMeta: true})
									}),
								$elm$core$Platform$Cmd$none);
						} else {
							if (k === 'Control') {
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											environment: _Utils_update(
												oldEnvironment,
												{holdingControl: true})
										}),
									$elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
							}
						}
					}
				}
			case 'GoTo':
				var mod = msg.a;
				var exit = function () {
					var _v7 = currentAppState.appState;
					switch (_v7.$) {
						case 'Building':
							var m = _v7.a;
							return A6(
								$author$project$Main$processExit,
								oldEnvironment,
								m,
								currentAppState.buildingData,
								model,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{buildingData: pm});
									}),
								$author$project$Building$onExit);
						case 'Simulating':
							var m = _v7.a;
							return A6(
								$author$project$Main$processExit,
								oldEnvironment,
								m,
								currentAppState.simulatingData,
								model,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{simulatingData: pm});
									}),
								$author$project$Simulating$onExit);
						default:
							var m = _v7.a;
							return A6(
								$author$project$Main$processExit,
								oldEnvironment,
								m,
								currentAppState.exportingData,
								model,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{exportingData: pm});
									}),
								$author$project$Exporting$onExit);
					}
				}();
				var _v5 = function () {
					switch (mod.$) {
						case 'BuildingModule':
							return A7(
								$author$project$Main$processEnter,
								oldEnvironment,
								currentAppState.buildingData,
								exit,
								$author$project$Main$BMsg,
								$author$project$ApplicationModel$Building,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{buildingData: pm});
									}),
								$author$project$Building$onEnter);
						case 'SimulatingModule':
							return A7(
								$author$project$Main$processEnter,
								oldEnvironment,
								currentAppState.simulatingData,
								exit,
								$author$project$Main$SMsg,
								$author$project$ApplicationModel$Simulating,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{simulatingData: pm});
									}),
								$author$project$Simulating$onEnter);
						default:
							return A7(
								$author$project$Main$processEnter,
								oldEnvironment,
								currentAppState.exportingData,
								exit,
								$author$project$Main$EMsg,
								$author$project$ApplicationModel$Exporting,
								F2(
									function (pm, am) {
										return _Utils_update(
											am,
											{exportingData: pm});
									}),
								$author$project$Exporting$onEnter);
					}
				}();
				var enter = _v5.a;
				var cmd = _v5.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{appModel: enter}),
					cmd);
			case 'VisibilityChanged':
				var vis = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{holdingControl: false, holdingMeta: false, holdingShift: false})
						}),
					$elm$core$Platform$Cmd$none);
			case 'GetTime':
				var time = msg.a;
				var oldEnv = model.environment;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnv,
								{currentTime: time})
						}),
					$elm$core$Platform$Cmd$none);
			case 'SaveMsg':
				var saveMsg = msg.a;
				switch (saveMsg.$) {
					case 'LoadMachineResponse':
						var response = saveMsg.a;
						var _v9 = A2($elm$core$Debug$log, 'loadMachineResponse', response);
						if (_v9.$ === 'Ok') {
							var loadPayload = _v9.a;
							var initSimModel = $author$project$Simulating$initPModel;
							var initSharedModel = $author$project$SharedModel$init;
							var newSharedModel = _Utils_update(
								initSharedModel,
								{machine: loadPayload.machine});
							var newModel = $author$project$BetterUndoList$fresh(
								_Utils_update(
									$author$project$Main$initAppRecord,
									{
										sharedModel: newSharedModel,
										simulatingData: _Utils_update(
											initSimModel,
											{
												tapes: A2($author$project$Simulating$checkTapesNoStatus, newSharedModel, loadPayload.tapes)
											})
									}));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										appModel: newModel,
										saveModel: function () {
											var meta = sm.machineMetadata;
											return _Utils_update(
												sm,
												{
													lastSaved: oldEnvironment.currentTime,
													machineData: $author$project$SaveLoad$MachineCreated,
													machineMetadata: _Utils_update(
														meta,
														{id: loadPayload.uuid, name: loadPayload.name})
												});
										}()
									}),
								$elm$core$Platform$Cmd$none);
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					case 'CreateNewMachine':
						var initSimModel = $author$project$Simulating$initPModel;
						var initSharedModel = $author$project$SharedModel$init;
						var newSharedModel = initSharedModel;
						var newModel = $author$project$BetterUndoList$fresh(
							_Utils_update(
								$author$project$Main$initAppRecord,
								{sharedModel: newSharedModel, simulatingData: initSimModel}));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									appModel: newModel,
									saveModel: _Utils_update(
										sm,
										{lastSaved: oldEnvironment.currentTime, loadDialog: $author$project$SaveLoad$NothingOpen, loadDialogModal: $rundis$elm_bootstrap$Bootstrap$Modal$hidden, machineData: $author$project$SaveLoad$MachineCreated, machineMetadata: $author$project$SaveLoad$initMachineMetadata})
								}),
							$elm$core$Platform$Cmd$none);
					default:
						var other = saveMsg;
						var _v10 = A4($author$project$SaveLoad$update, other, model.saveModel, model.environment, model.appModel.present);
						var newSM = _v10.a;
						var sCmd = _v10.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{saveModel: newSM}),
							A2($elm$core$Platform$Cmd$map, $author$project$Main$SaveMsg, sCmd));
				}
			case 'GetTZ':
				var zone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							environment: _Utils_update(
								oldEnvironment,
								{timeZone: zone})
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Link = F2(
	function (a, b) {
		return {$: 'Link', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$addHyperlink = F2(
	function (link, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Link, link, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$AlignCentred = {$: 'AlignCentred'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Face = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$: 'Face', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Text = F2(
	function (a, b) {
		return {$: 'Text', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$centered = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, f, $MacCASOutreach$graphicsvg$GraphicSVG$AlignCentred),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Collage = F2(
	function (a, b) {
		return {$: 'Collage', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$collage = F3(
	function (w, h, shapes) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Collage,
			_Utils_Tuple2(w, h),
			shapes);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$FixedWidth = {$: 'FixedWidth'};
var $MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, $MacCASOutreach$graphicsvg$GraphicSVG$FixedWidth, c),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ScaleXY = F3(
	function (a, b, c) {
		return {$: 'ScaleXY', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$addOutline = F3(
	function (style, outlineClr, shape) {
		var lineStyle = _Utils_Tuple2(style, outlineClr);
		switch (shape.$) {
			case 'Inked':
				var clr = shape.a;
				var outline = shape.b;
				var sh = shape.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
					clr,
					$elm$core$Maybe$Just(lineStyle),
					sh);
			case 'Move':
				var s = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Move,
					s,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
			case 'Rotate':
				var r = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
					r,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
			case 'ScaleXY':
				var sx = shape.a;
				var sy = shape.b;
				var sh = shape.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$ScaleXY,
					sx,
					sy,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
			case 'Group':
				var list = shape.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$Group(list);
			default:
				var a = shape;
				return a;
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Circle = function (a) {
	return {$: 'Circle', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$circle = function (r) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$Circle(r);
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ssc = function (n) {
	return A3($elm$core$Basics$clamp, 0, 255, n);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$rgb = F3(
	function (r, g, b) {
		return A4(
			$MacCASOutreach$graphicsvg$GraphicSVG$RGBA,
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(r),
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(g),
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(b),
			1);
	});
var $author$project$Helpers$finsmBlue = A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 21, 137, 255);
var $MacCASOutreach$graphicsvg$GraphicSVG$Solid = function (a) {
	return {$: 'Solid', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$solid = function (th) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$Solid(th);
};
var $author$project$Helpers$icon = F2(
	function (on, sh) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
					$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
					A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 220, 220, 220),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						on ? $author$project$Helpers$finsmBlue : $MacCASOutreach$graphicsvg$GraphicSVG$white,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(18))),
					sh
				]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask = F2(
	function (a, b) {
		return {$: 'AlphaMask', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Clip = F2(
	function (a, b) {
		return {$: 'Clip', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$EnterAt = F2(
	function (a, b) {
		return {$: 'EnterAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$EnterShape = F2(
	function (a, b) {
		return {$: 'EnterShape', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Everything = {$: 'Everything'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Exit = F2(
	function (a, b) {
		return {$: 'Exit', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ExitAt = F2(
	function (a, b) {
		return {$: 'ExitAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject = F3(
	function (a, b, c) {
		return {$: 'ForeignObject', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper = F3(
	function (a, b, c) {
		return {$: 'GraphPaper', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseDown = F2(
	function (a, b) {
		return {$: 'MouseDown', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt = F2(
	function (a, b) {
		return {$: 'MouseDownAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseUp = F2(
	function (a, b) {
		return {$: 'MouseUp', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt = F2(
	function (a, b) {
		return {$: 'MouseUpAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt = F2(
	function (a, b) {
		return {$: 'MoveOverAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Tap = F2(
	function (a, b) {
		return {$: 'Tap', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TapAt = F2(
	function (a, b) {
		return {$: 'TapAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd = F2(
	function (a, b) {
		return {$: 'TouchEnd', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt = F2(
	function (a, b) {
		return {$: 'TouchEndAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt = F2(
	function (a, b) {
		return {$: 'TouchMoveAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchStart = F2(
	function (a, b) {
		return {$: 'TouchStart', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt = F2(
	function (a, b) {
		return {$: 'TouchStartAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$map = F2(
	function (f, sh) {
		switch (sh.$) {
			case 'Inked':
				var fillClr = sh.a;
				var lt = sh.b;
				var stencil = sh.c;
				return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, fillClr, lt, stencil);
			case 'ForeignObject':
				var w = sh.a;
				var h = sh.b;
				var htm = sh.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject,
					w,
					h,
					A2($elm$html$Html$map, f, htm));
			case 'Move':
				var v = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Move,
					v,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'Rotate':
				var deg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
					deg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'ScaleXY':
				var sx = sh.a;
				var sy = sh.b;
				var shape = sh.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$ScaleXY,
					sx,
					sy,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'Link':
				var href = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Link,
					href,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'AlphaMask':
				var sh1 = sh.a;
				var sh2 = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, sh1),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, sh2));
			case 'Clip':
				var sh1 = sh.a;
				var sh2 = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Clip,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, sh1),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, sh2));
			case 'Everything':
				return $MacCASOutreach$graphicsvg$GraphicSVG$Everything;
			case 'Tap':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Tap,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TapAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TapAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'EnterShape':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$EnterShape,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'EnterAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$EnterAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'Exit':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Exit,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'ExitAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$ExitAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'MouseDown':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseDown,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'MouseDownAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'MouseUp':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseUp,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'MouseUpAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'MoveOverAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TouchStart':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchStart,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TouchEnd':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd,
					f(msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TouchStartAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TouchEndAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'TouchMoveAt':
				var msg = sh.a;
				var shape = sh.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt,
					A2($elm$core$Basics$composeL, f, msg),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$map, f, shape));
			case 'Group':
				var shapes = sh.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$Group(
					A2(
						$elm$core$List$map,
						$MacCASOutreach$graphicsvg$GraphicSVG$map(f),
						shapes));
			default:
				var s = sh.a;
				var th = sh.b;
				var c = sh.c;
				return A3($MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper, s, th, c);
		}
	});
var $author$project$Main$BuildingModule = {$: 'BuildingModule'};
var $author$project$Main$ExportingModule = {$: 'ExportingModule'};
var $author$project$Main$GoTo = function (a) {
	return {$: 'GoTo', a: a};
};
var $author$project$Main$SimulatingModule = {$: 'SimulatingModule'};
var $MacCASOutreach$graphicsvg$GraphicSVG$blank = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 0, 0, 0, 0);
var $MacCASOutreach$graphicsvg$GraphicSVG$darkGray = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 186, 189, 182, 1);
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyTap = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Tap, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$RoundRect = F3(
	function (a, b, c) {
		return {$: 'RoundRect', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$roundedRect = F3(
	function (w, h, r) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$RoundRect, w, h, r);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$AlignLeft = {$: 'AlignLeft'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Serif = {$: 'Serif'};
var $MacCASOutreach$graphicsvg$GraphicSVG$text = function (str) {
	return A2(
		$MacCASOutreach$graphicsvg$GraphicSVG$Text,
		A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, 12, false, false, false, false, false, $MacCASOutreach$graphicsvg$GraphicSVG$Serif, $MacCASOutreach$graphicsvg$GraphicSVG$AlignLeft),
		str);
};
var $author$project$SaveLoad$CloseLoadDialog = {$: 'CloseLoadDialog'};
var $author$project$SaveLoad$EditMachineName = {$: 'EditMachineName'};
var $author$project$SaveLoad$FilterArchived = {$: 'FilterArchived'};
var $author$project$SaveLoad$MachineFilter = function (a) {
	return {$: 'MachineFilter', a: a};
};
var $author$project$SaveLoad$OpenLoadDialog = {$: 'OpenLoadDialog'};
var $author$project$SaveLoad$OpenLoginDialog = {$: 'OpenLoginDialog'};
var $author$project$SaveLoad$OpenLogoutDialog = {$: 'OpenLogoutDialog'};
var $author$project$SaveLoad$OpenNewDialog = {$: 'OpenNewDialog'};
var $author$project$SaveLoad$SelectFilter = function (a) {
	return {$: 'SelectFilter', a: a};
};
var $author$project$SaveLoad$TabMsg = function (a) {
	return {$: 'TabMsg', a: a};
};
var $author$project$SaveLoad$TypeName = function (a) {
	return {$: 'TypeName', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$AlignRight = {$: 'AlignRight'};
var $MacCASOutreach$graphicsvg$GraphicSVG$alignRight = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, f, $MacCASOutreach$graphicsvg$GraphicSVG$AlignRight),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Attrs = function (a) {
	return {$: 'Attrs', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Button$attrs = function (attrs_) {
	return $rundis$elm_bootstrap$Bootstrap$Internal$Button$Attrs(attrs_);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$black = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 0, 0, 0, 1);
var $rundis$elm_bootstrap$Bootstrap$Modal$Body = function (a) {
	return {$: 'Body', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Modal$Config = function (a) {
	return {$: 'Config', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Modal$body = F3(
	function (attributes, children, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Modal$Config(
			_Utils_update(
				conf,
				{
					body: $elm$core$Maybe$Just(
						$rundis$elm_bootstrap$Bootstrap$Modal$Body(
							{attributes: attributes, children: children}))
				}));
	});
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$applyModifier = F2(
	function (modifier, options) {
		switch (modifier.$) {
			case 'Size':
				var size = modifier.a;
				return _Utils_update(
					options,
					{
						size: $elm$core$Maybe$Just(size)
					});
			case 'Coloring':
				var coloring = modifier.a;
				return _Utils_update(
					options,
					{
						coloring: $elm$core$Maybe$Just(coloring)
					});
			case 'Block':
				return _Utils_update(
					options,
					{block: true});
			case 'Disabled':
				var val = modifier.a;
				return _Utils_update(
					options,
					{disabled: val});
			default:
				var attrs = modifier.a;
				return _Utils_update(
					options,
					{
						attributes: _Utils_ap(options.attributes, attrs)
					});
		}
	});
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$defaultOptions = {attributes: _List_Nil, block: false, coloring: $elm$core$Maybe$Nothing, disabled: false, size: $elm$core$Maybe$Nothing};
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$roleClass = function (role) {
	switch (role.$) {
		case 'Primary':
			return 'primary';
		case 'Secondary':
			return 'secondary';
		case 'Success':
			return 'success';
		case 'Info':
			return 'info';
		case 'Warning':
			return 'warning';
		case 'Danger':
			return 'danger';
		case 'Dark':
			return 'dark';
		case 'Light':
			return 'light';
		default:
			return 'link';
	}
};
var $rundis$elm_bootstrap$Bootstrap$General$Internal$screenSizeOption = function (size) {
	switch (size.$) {
		case 'XS':
			return $elm$core$Maybe$Nothing;
		case 'SM':
			return $elm$core$Maybe$Just('sm');
		case 'MD':
			return $elm$core$Maybe$Just('md');
		case 'LG':
			return $elm$core$Maybe$Just('lg');
		default:
			return $elm$core$Maybe$Just('xl');
	}
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$buttonAttributes = function (modifiers) {
	var options = A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$Internal$Button$applyModifier, $rundis$elm_bootstrap$Bootstrap$Internal$Button$defaultOptions, modifiers);
	return _Utils_ap(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2('btn', true),
						_Utils_Tuple2('btn-block', options.block),
						_Utils_Tuple2('disabled', options.disabled)
					])),
				$elm$html$Html$Attributes$disabled(options.disabled)
			]),
		_Utils_ap(
			function () {
				var _v0 = A2($elm$core$Maybe$andThen, $rundis$elm_bootstrap$Bootstrap$General$Internal$screenSizeOption, options.size);
				if (_v0.$ === 'Just') {
					var s = _v0.a;
					return _List_fromArray(
						[
							$elm$html$Html$Attributes$class('btn-' + s)
						]);
				} else {
					return _List_Nil;
				}
			}(),
			_Utils_ap(
				function () {
					var _v1 = options.coloring;
					if (_v1.$ === 'Just') {
						if (_v1.a.$ === 'Roled') {
							var role = _v1.a.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class(
									'btn-' + $rundis$elm_bootstrap$Bootstrap$Internal$Button$roleClass(role))
								]);
						} else {
							var role = _v1.a.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class(
									'btn-outline-' + $rundis$elm_bootstrap$Bootstrap$Internal$Button$roleClass(role))
								]);
						}
					} else {
						return _List_Nil;
					}
				}(),
				options.attributes)));
};
var $rundis$elm_bootstrap$Bootstrap$Button$button = F2(
	function (options, children) {
		return A2(
			$elm$html$Html$button,
			$rundis$elm_bootstrap$Bootstrap$Internal$Button$buttonAttributes(options),
			children);
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$Center = {$: 'Center'};
var $rundis$elm_bootstrap$Bootstrap$Tab$Config = function (a) {
	return {$: 'Config', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Tab$layout = F2(
	function (layout_, _v0) {
		var configRec = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Tab$Config(
			_Utils_update(
				configRec,
				{
					layout: $elm$core$Maybe$Just(layout_)
				}));
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$center = $rundis$elm_bootstrap$Bootstrap$Tab$layout($rundis$elm_bootstrap$Bootstrap$Tab$Center);
var $rundis$elm_bootstrap$Bootstrap$Modal$config = function (closeMsg) {
	return $rundis$elm_bootstrap$Bootstrap$Modal$Config(
		{
			body: $elm$core$Maybe$Nothing,
			closeMsg: closeMsg,
			footer: $elm$core$Maybe$Nothing,
			header: $elm$core$Maybe$Nothing,
			options: {attrs: _List_Nil, centered: true, hideOnBackdropClick: true, modalSize: $elm$core$Maybe$Nothing, scrollableBody: false},
			withAnimation: $elm$core$Maybe$Nothing
		});
};
var $rundis$elm_bootstrap$Bootstrap$Tab$config = function (toMsg) {
	return $rundis$elm_bootstrap$Bootstrap$Tab$Config(
		{attributes: _List_Nil, isPill: false, items: _List_Nil, layout: $elm$core$Maybe$Nothing, toMsg: toMsg, useHash: false, withAnimation: false});
};
var $elm$html$Html$div = _VirtualDom_node('div');
var $rundis$elm_bootstrap$Bootstrap$Modal$Footer = function (a) {
	return {$: 'Footer', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Modal$footer = F3(
	function (attributes, children, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Modal$Config(
			_Utils_update(
				conf,
				{
					footer: $elm$core$Maybe$Just(
						$rundis$elm_bootstrap$Bootstrap$Modal$Footer(
							{attributes: attributes, children: children}))
				}));
	});
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $rundis$elm_bootstrap$Bootstrap$Modal$Header = function (a) {
	return {$: 'Header', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Modal$header = F3(
	function (attributes, children, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Modal$Config(
			_Utils_update(
				conf,
				{
					header: $elm$core$Maybe$Just(
						$rundis$elm_bootstrap$Bootstrap$Modal$Header(
							{attributes: attributes, children: children}))
				}));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$html = F3(
	function (w, h, htm) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject, w, h, htm);
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$Item = function (a) {
	return {$: 'Item', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Tab$item = function (rec) {
	return $rundis$elm_bootstrap$Bootstrap$Tab$Item(
		{id: rec.id, link: rec.link, pane: rec.pane});
};
var $rundis$elm_bootstrap$Bootstrap$Tab$items = F2(
	function (items_, _v0) {
		var configRec = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Tab$Config(
			_Utils_update(
				configRec,
				{items: items_}));
	});
var $ianmackenzie$elm_units$Quantity$Quantity = function (a) {
	return {$: 'Quantity', a: a};
};
var $ianmackenzie$elm_units$Duration$seconds = function (numSeconds) {
	return $ianmackenzie$elm_units$Quantity$Quantity(numSeconds);
};
var $ianmackenzie$elm_units$Duration$milliseconds = function (numMilliseconds) {
	return $ianmackenzie$elm_units$Duration$seconds(0.001 * numMilliseconds);
};
var $ianmackenzie$elm_units$Duration$from = F2(
	function (startTime, endTime) {
		var numMilliseconds = $elm$time$Time$posixToMillis(endTime) - $elm$time$Time$posixToMillis(startTime);
		return $ianmackenzie$elm_units$Duration$milliseconds(numMilliseconds);
	});
var $ianmackenzie$elm_units$Constants$second = 1;
var $ianmackenzie$elm_units$Constants$minute = 60 * $ianmackenzie$elm_units$Constants$second;
var $ianmackenzie$elm_units$Constants$hour = 60 * $ianmackenzie$elm_units$Constants$minute;
var $ianmackenzie$elm_units$Duration$inSeconds = function (_v0) {
	var numSeconds = _v0.a;
	return numSeconds;
};
var $ianmackenzie$elm_units$Duration$inHours = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) / $ianmackenzie$elm_units$Constants$hour;
};
var $ianmackenzie$elm_units$Duration$inMinutes = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) / 60;
};
var $author$project$SaveLoad$lastSaved = F2(
	function (model, env) {
		var duration = A2($ianmackenzie$elm_units$Duration$from, model.lastSaved, env.currentTime);
		if (!model.unsavedChanges) {
			return ($ianmackenzie$elm_units$Duration$inSeconds(duration) <= 30) ? 'last edit saved just now' : (($ianmackenzie$elm_units$Duration$inSeconds(duration) <= 90) ? 'last edit saved about a minute ago' : (($ianmackenzie$elm_units$Duration$inMinutes(duration) <= 60) ? ('last edit saved ' + ($elm$core$String$fromInt(
				$elm$core$Basics$round(
					$ianmackenzie$elm_units$Duration$inMinutes(duration))) + ' minutes ago')) : (($ianmackenzie$elm_units$Duration$inMinutes(duration) <= 90) ? 'last edit saved about an hour ago' : ('last edit saved ' + ($elm$core$String$fromInt(
				$elm$core$Basics$round(
					$ianmackenzie$elm_units$Duration$inHours(duration))) + ' hours ago')))));
		} else {
			var _v0 = model.loginState;
			switch (_v0.$) {
				case 'LoggedIn':
					return 'saving...';
				case 'NotLoggedIn':
					return 'log in to save changes';
				default:
					return '';
			}
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$Link = function (a) {
	return {$: 'Link', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Tab$link = F2(
	function (attributes, children) {
		return $rundis$elm_bootstrap$Bootstrap$Tab$Link(
			{attributes: attributes, children: children});
	});
var $rundis$elm_bootstrap$Bootstrap$Button$onClick = function (message) {
	return $rundis$elm_bootstrap$Bootstrap$Button$attrs(
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Events$preventDefaultOn,
				'click',
				$elm$json$Json$Decode$succeed(
					_Utils_Tuple2(message, true)))
			]));
};
var $rundis$elm_bootstrap$Bootstrap$Tab$Pane = function (a) {
	return {$: 'Pane', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Tab$pane = F2(
	function (attributes, children) {
		return $rundis$elm_bootstrap$Bootstrap$Tab$Pane(
			{attributes: attributes, children: children});
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$pills = function (_v0) {
	var configRec = _v0.a;
	return $rundis$elm_bootstrap$Bootstrap$Tab$Config(
		_Utils_update(
			configRec,
			{isPill: true}));
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Coloring = function (a) {
	return {$: 'Coloring', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Primary = {$: 'Primary'};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Roled = function (a) {
	return {$: 'Roled', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Button$primary = $rundis$elm_bootstrap$Bootstrap$Internal$Button$Coloring(
	$rundis$elm_bootstrap$Bootstrap$Internal$Button$Roled($rundis$elm_bootstrap$Bootstrap$Internal$Button$Primary));
var $author$project$SaveLoad$ArchiveMachine = function (a) {
	return {$: 'ArchiveMachine', a: a};
};
var $author$project$SaveLoad$LoadMachine = function (a) {
	return {$: 'LoadMachine', a: a};
};
var $author$project$SaveLoad$RestoreMachine = function (a) {
	return {$: 'RestoreMachine', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$alignItemsStart = $elm$html$Html$Attributes$class('align-items-start');
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Action = {$: 'Action'};
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Attrs = function (a) {
	return {$: 'Attrs', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$CustomItem = function (a) {
	return {$: 'CustomItem', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Disabled = {$: 'Disabled'};
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$preventClick = A2($elm$html$Html$Attributes$attribute, 'onclick', 'var event = arguments[0] || window.event; event.preventDefault();');
var $rundis$elm_bootstrap$Bootstrap$ListGroup$anchor = F2(
	function (options, children) {
		var updOptions = A2(
			$elm$core$List$any,
			$elm$core$Basics$eq($rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Disabled),
			options) ? _Utils_ap(
			options,
			_List_fromArray(
				[
					$rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Attrs(
					_List_fromArray(
						[$rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$preventClick]))
				])) : options;
		return $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$CustomItem(
			{
				children: children,
				itemFn: $elm$html$Html$a,
				options: A2($elm$core$List$cons, $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Action, updOptions)
			});
	});
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$Attrs = function (a) {
	return {$: 'Attrs', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$attrs = function (attrs_) {
	return $rundis$elm_bootstrap$Bootstrap$ButtonGroup$Attrs(attrs_);
};
var $rundis$elm_bootstrap$Bootstrap$ListGroup$attrs = function (attrs_) {
	return $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$Attrs(attrs_);
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$Attrs = function (a) {
	return {$: 'Attrs', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$attrs = function (attrs_) {
	return $rundis$elm_bootstrap$Bootstrap$Spinner$Attrs(attrs_);
};
var $elm$html$Html$b = _VirtualDom_node('b');
var $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$block = $elm$html$Html$Attributes$class('d-flex');
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$ButtonItem = function (a) {
	return {$: 'ButtonItem', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$button = F2(
	function (options, children) {
		return $rundis$elm_bootstrap$Bootstrap$ButtonGroup$ButtonItem(
			A2($rundis$elm_bootstrap$Bootstrap$Button$button, options, children));
	});
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$GroupItem = function (a) {
	return {$: 'GroupItem', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$applyModifier = F2(
	function (modifier, options) {
		switch (modifier.$) {
			case 'Size':
				var size = modifier.a;
				return _Utils_update(
					options,
					{
						size: $elm$core$Maybe$Just(size)
					});
			case 'Vertical':
				return _Utils_update(
					options,
					{vertical: true});
			default:
				var attrs_ = modifier.a;
				return _Utils_update(
					options,
					{
						attributes: _Utils_ap(options.attributes, attrs_)
					});
		}
	});
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$defaultOptions = {attributes: _List_Nil, size: $elm$core$Maybe$Nothing, vertical: false};
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$groupAttributes = F2(
	function (toggle, modifiers) {
		var options = A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$ButtonGroup$applyModifier, $rundis$elm_bootstrap$Bootstrap$ButtonGroup$defaultOptions, modifiers);
		return _Utils_ap(
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$attribute, 'role', 'group'),
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('btn-group', true),
							_Utils_Tuple2('btn-group-toggle', toggle),
							_Utils_Tuple2('btn-group-vertical', options.vertical)
						])),
					A2($elm$html$Html$Attributes$attribute, 'data-toggle', 'buttons')
				]),
			_Utils_ap(
				function () {
					var _v0 = A2($elm$core$Maybe$andThen, $rundis$elm_bootstrap$Bootstrap$General$Internal$screenSizeOption, options.size);
					if (_v0.$ === 'Just') {
						var s = _v0.a;
						return _List_fromArray(
							[
								$elm$html$Html$Attributes$class('btn-group-' + s)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				options.attributes));
	});
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$buttonGroupItem = F2(
	function (options, items) {
		return $rundis$elm_bootstrap$Bootstrap$ButtonGroup$GroupItem(
			A2(
				$elm$html$Html$div,
				A2($rundis$elm_bootstrap$Bootstrap$ButtonGroup$groupAttributes, false, options),
				A2(
					$elm$core$List$map,
					function (_v0) {
						var elem = _v0.a;
						return elem;
					},
					items)));
	});
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$renderGroup = function (_v0) {
	var elem = _v0.a;
	return elem;
};
var $rundis$elm_bootstrap$Bootstrap$ButtonGroup$buttonGroup = F2(
	function (options, items) {
		return $rundis$elm_bootstrap$Bootstrap$ButtonGroup$renderGroup(
			A2($rundis$elm_bootstrap$Bootstrap$ButtonGroup$buttonGroupItem, options, items));
	});
var $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$col = $elm$html$Html$Attributes$class('flex-column');
var $rundis$elm_bootstrap$Bootstrap$Spinner$Color = function (a) {
	return {$: 'Color', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$color = function (color_) {
	return $rundis$elm_bootstrap$Bootstrap$Spinner$Color(color_);
};
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$applyModifier = F2(
	function (modifier, options) {
		switch (modifier.$) {
			case 'Roled':
				var role = modifier.a;
				return _Utils_update(
					options,
					{
						role: $elm$core$Maybe$Just(role)
					});
			case 'Action':
				return _Utils_update(
					options,
					{action: true});
			case 'Disabled':
				return _Utils_update(
					options,
					{disabled: true});
			case 'Active':
				return _Utils_update(
					options,
					{active: true});
			default:
				var attrs = modifier.a;
				return _Utils_update(
					options,
					{
						attributes: _Utils_ap(options.attributes, attrs)
					});
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$defaultOptions = {action: false, active: false, attributes: _List_Nil, disabled: false, role: $elm$core$Maybe$Nothing};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass = F2(
	function (prefix, role) {
		return $elm$html$Html$Attributes$class(
			prefix + ('-' + function () {
				switch (role.$) {
					case 'Primary':
						return 'primary';
					case 'Secondary':
						return 'secondary';
					case 'Success':
						return 'success';
					case 'Info':
						return 'info';
					case 'Warning':
						return 'warning';
					case 'Danger':
						return 'danger';
					case 'Light':
						return 'light';
					default:
						return 'dark';
				}
			}()));
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$itemAttributes = function (options) {
	return _Utils_ap(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2('list-group-item', true),
						_Utils_Tuple2('disabled', options.disabled),
						_Utils_Tuple2('active', options.active),
						_Utils_Tuple2('list-group-item-action', options.action)
					]))
			]),
		_Utils_ap(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$disabled(options.disabled)
				]),
			_Utils_ap(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function (r) {
							return _List_fromArray(
								[
									A2($rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass, 'list-group-item', r)
								]);
						},
						options.role)),
				options.attributes)));
};
var $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$renderCustomItem = function (_v0) {
	var itemFn = _v0.a.itemFn;
	var options = _v0.a.options;
	var children = _v0.a.children;
	return A2(
		itemFn,
		$rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$itemAttributes(
			A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$applyModifier, $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$defaultOptions, options)),
		children);
};
var $rundis$elm_bootstrap$Bootstrap$ListGroup$custom = function (items) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('list-group')
			]),
		A2($elm$core$List$map, $rundis$elm_bootstrap$Bootstrap$Internal$ListGroup$renderCustomItem, items));
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Danger = {$: 'Danger'};
var $rundis$elm_bootstrap$Bootstrap$Button$danger = $rundis$elm_bootstrap$Bootstrap$Internal$Button$Coloring(
	$rundis$elm_bootstrap$Bootstrap$Internal$Button$Roled($rundis$elm_bootstrap$Bootstrap$Internal$Button$Danger));
var $ianmackenzie$elm_units$Constants$day = 24 * $ianmackenzie$elm_units$Constants$hour;
var $ianmackenzie$elm_units$Duration$inDays = function (duration) {
	return $ianmackenzie$elm_units$Duration$inSeconds(duration) / $ianmackenzie$elm_units$Constants$day;
};
var $author$project$SaveLoad$aboutAXAgo = function (duration) {
	return ($ianmackenzie$elm_units$Duration$inSeconds(duration) <= 30) ? 'just now' : (($ianmackenzie$elm_units$Duration$inSeconds(duration) <= 90) ? 'about a minute ago' : (($ianmackenzie$elm_units$Duration$inMinutes(duration) <= 60) ? ($elm$core$String$fromInt(
		$elm$core$Basics$round(
			$ianmackenzie$elm_units$Duration$inMinutes(duration))) + ' minutes ago') : (($ianmackenzie$elm_units$Duration$inMinutes(duration) <= 90) ? 'about an hour ago' : (($ianmackenzie$elm_units$Duration$inDays(duration) <= 1) ? ($elm$core$String$fromInt(
		$elm$core$Basics$round(
			$ianmackenzie$elm_units$Duration$inHours(duration))) + ' hours ago') : ($elm$core$String$fromInt(
		$elm$core$Basics$round(
			$ianmackenzie$elm_units$Duration$inDays(duration))) + ' days ago')))));
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $author$project$SaveLoad$dateFormat = F3(
	function (zn, now, thn) {
		var monStr = function (mon) {
			switch (mon.$) {
				case 'Jan':
					return 'January';
				case 'Feb':
					return 'February';
				case 'Mar':
					return 'March';
				case 'Apr':
					return 'April';
				case 'May':
					return 'May';
				case 'Jun':
					return 'June';
				case 'Jul':
					return 'July';
				case 'Aug':
					return 'August';
				case 'Sep':
					return 'September';
				case 'Oct':
					return 'October';
				case 'Nov':
					return 'November';
				default:
					return 'December';
			}
		};
		var duration = A2($ianmackenzie$elm_units$Duration$from, thn, now);
		var dayStr = function (day) {
			switch (day.$) {
				case 'Mon':
					return 'Monday';
				case 'Tue':
					return 'Tuesday';
				case 'Wed':
					return 'Wednesday';
				case 'Thu':
					return 'Thursday';
				case 'Fri':
					return 'Friday';
				case 'Sat':
					return 'Saturday';
				default:
					return 'Sunday';
			}
		};
		var dateFmt = function (t) {
			return monStr(
				A2($elm$time$Time$toMonth, zn, t)) + (' ' + ($elm$core$String$fromInt(
				A2($elm$time$Time$toDay, zn, t)) + (', ' + $elm$core$String$fromInt(
				A2($elm$time$Time$toYear, zn, t)))));
		};
		return ($ianmackenzie$elm_units$Duration$inDays(duration) <= 1) ? $author$project$SaveLoad$aboutAXAgo(duration) : (($ianmackenzie$elm_units$Duration$inDays(duration) <= 3) ? dayStr(
			A2($elm$time$Time$toWeekday, zn, thn)) : dateFmt(thn));
	});
var $rundis$elm_bootstrap$Bootstrap$Spinner$Growing = {$: 'Growing'};
var $rundis$elm_bootstrap$Bootstrap$Spinner$Kind = function (a) {
	return {$: 'Kind', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$grow = $rundis$elm_bootstrap$Bootstrap$Spinner$Kind($rundis$elm_bootstrap$Bootstrap$Spinner$Growing);
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$justifyBetween = $elm$html$Html$Attributes$class('justify-content-between');
var $rundis$elm_bootstrap$Bootstrap$Spinner$Large = {$: 'Large'};
var $rundis$elm_bootstrap$Bootstrap$Spinner$Size = function (a) {
	return {$: 'Size', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$large = $rundis$elm_bootstrap$Bootstrap$Spinner$Size($rundis$elm_bootstrap$Bootstrap$Spinner$Large);
var $author$project$SaveLoad$machineTypeFullStr = function (m) {
	switch (m.$) {
		case 'DFA':
			return 'DFA';
		case 'NFA':
			return 'NFA';
		case 'NPDA':
			return 'NPDA';
		default:
			return 'Turing';
	}
};
var $rundis$elm_bootstrap$Bootstrap$Utilities$Spacing$mb1 = $elm$html$Html$Attributes$class('mb-1');
var $rundis$elm_bootstrap$Bootstrap$Internal$Role$Primary = {$: 'Primary'};
var $rundis$elm_bootstrap$Bootstrap$Internal$Text$Role = function (a) {
	return {$: 'Role', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Text$primary = $rundis$elm_bootstrap$Bootstrap$Internal$Text$Role($rundis$elm_bootstrap$Bootstrap$Internal$Role$Primary);
var $rundis$elm_bootstrap$Bootstrap$General$Internal$SM = {$: 'SM'};
var $rundis$elm_bootstrap$Bootstrap$Internal$Button$Size = function (a) {
	return {$: 'Size', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Button$small = $rundis$elm_bootstrap$Bootstrap$Internal$Button$Size($rundis$elm_bootstrap$Bootstrap$General$Internal$SM);
var $elm$html$Html$small = _VirtualDom_node('small');
var $rundis$elm_bootstrap$Bootstrap$Spinner$applyModifier = F2(
	function (modifier, options) {
		switch (modifier.$) {
			case 'Kind':
				var spinnerKind = modifier.a;
				return _Utils_update(
					options,
					{kind: spinnerKind});
			case 'Size':
				var spinnerSize = modifier.a;
				return _Utils_update(
					options,
					{size: spinnerSize});
			case 'Color':
				var color_ = modifier.a;
				return _Utils_update(
					options,
					{
						color: $elm$core$Maybe$Just(color_)
					});
			default:
				var list = modifier.a;
				return _Utils_update(
					options,
					{attributes: list});
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Spinner$Border = {$: 'Border'};
var $rundis$elm_bootstrap$Bootstrap$Spinner$Normal = {$: 'Normal'};
var $rundis$elm_bootstrap$Bootstrap$Spinner$defaultOptions = {attributes: _List_Nil, color: $elm$core$Maybe$Nothing, kind: $rundis$elm_bootstrap$Bootstrap$Spinner$Border, size: $rundis$elm_bootstrap$Bootstrap$Spinner$Normal};
var $rundis$elm_bootstrap$Bootstrap$Spinner$kindClassName = function (kind_) {
	if (kind_.$ === 'Border') {
		return 'spinner-border';
	} else {
		return 'spinner-grow';
	}
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$kindClass = A2($elm$core$Basics$composeL, $elm$html$Html$Attributes$class, $rundis$elm_bootstrap$Bootstrap$Spinner$kindClassName);
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $rundis$elm_bootstrap$Bootstrap$Spinner$sizeAttributes = F2(
	function (size_, kind_) {
		switch (size_.$) {
			case 'Normal':
				return $elm$core$Maybe$Nothing;
			case 'Small':
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							$rundis$elm_bootstrap$Bootstrap$Spinner$kindClassName(kind_) + '-sm')
						]));
			default:
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', '3rem'),
							A2($elm$html$Html$Attributes$style, 'height', '3rem')
						]));
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Internal$Text$textColorClass = function (color) {
	if (color.$ === 'White') {
		return $elm$html$Html$Attributes$class('text-white');
	} else {
		var role = color.a;
		return A2($rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass, 'text', role);
	}
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$toAttributes = function (options) {
	return _Utils_ap(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					$rundis$elm_bootstrap$Bootstrap$Spinner$kindClass(options.kind)),
					A2($elm$core$Maybe$map, $rundis$elm_bootstrap$Bootstrap$Internal$Text$textColorClass, options.color)
				])),
		_Utils_ap(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($rundis$elm_bootstrap$Bootstrap$Spinner$sizeAttributes, options.size, options.kind)),
			_Utils_ap(
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'role', 'status')
					]),
				options.attributes)));
};
var $rundis$elm_bootstrap$Bootstrap$Spinner$spinner = F2(
	function (options, children) {
		var opts = A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$Spinner$applyModifier, $rundis$elm_bootstrap$Bootstrap$Spinner$defaultOptions, options);
		return A2(
			$elm$html$Html$div,
			$rundis$elm_bootstrap$Bootstrap$Spinner$toAttributes(opts),
			children);
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $rundis$elm_bootstrap$Bootstrap$Utilities$Size$w100 = $elm$html$Html$Attributes$class('w-100');
var $author$project$SaveLoad$renderLoadList = F5(
	function (loadingList, archiveList, metas, now, zn) {
		var oneRow = function (machine) {
			return A2(
				$rundis$elm_bootstrap$Bootstrap$ListGroup$anchor,
				_List_fromArray(
					[
						$rundis$elm_bootstrap$Bootstrap$ListGroup$attrs(
						_List_fromArray(
							[$rundis$elm_bootstrap$Bootstrap$Utilities$Flex$col, $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$alignItemsStart, $rundis$elm_bootstrap$Bootstrap$Utilities$Size$w100]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[$rundis$elm_bootstrap$Bootstrap$Utilities$Flex$block, $rundis$elm_bootstrap$Bootstrap$Utilities$Flex$justifyBetween, $rundis$elm_bootstrap$Bootstrap$Utilities$Size$w100]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h5,
								_List_fromArray(
									[$rundis$elm_bootstrap$Bootstrap$Utilities$Spacing$mb1]),
								_List_fromArray(
									[
										$elm$html$Html$text(machine.name)
									])),
								A2(
								$elm$html$Html$small,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										A3($author$project$SaveLoad$dateFormat, zn, now, machine.date))
									]))
							])),
						A2(
						$rundis$elm_bootstrap$Bootstrap$ButtonGroup$buttonGroup,
						_List_fromArray(
							[
								$rundis$elm_bootstrap$Bootstrap$ButtonGroup$attrs(
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$style, 'float', 'right')
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rundis$elm_bootstrap$Bootstrap$ButtonGroup$button,
								_List_fromArray(
									[
										$rundis$elm_bootstrap$Bootstrap$Button$primary,
										$rundis$elm_bootstrap$Bootstrap$Button$small,
										$rundis$elm_bootstrap$Bootstrap$Button$onClick(
										$author$project$SaveLoad$LoadMachine(machine))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Open')
									])),
								A2(
								$rundis$elm_bootstrap$Bootstrap$ButtonGroup$button,
								_List_fromArray(
									[
										$rundis$elm_bootstrap$Bootstrap$Button$danger,
										$rundis$elm_bootstrap$Bootstrap$Button$small,
										$rundis$elm_bootstrap$Bootstrap$Button$onClick(
										archiveList ? $author$project$SaveLoad$RestoreMachine(machine.id) : $author$project$SaveLoad$ArchiveMachine(machine.id))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										archiveList ? 'Restore' : 'Archive')
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$b,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$SaveLoad$machineTypeFullStr(machine.machine_type))
									]))
							]))
					]));
		};
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					loadingList ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'height', '500px')
						]),
					_List_fromArray(
						[
							A2(
							$rundis$elm_bootstrap$Bootstrap$Spinner$spinner,
							_List_fromArray(
								[
									$rundis$elm_bootstrap$Bootstrap$Spinner$color($rundis$elm_bootstrap$Bootstrap$Text$primary),
									$rundis$elm_bootstrap$Bootstrap$Spinner$large,
									$rundis$elm_bootstrap$Bootstrap$Spinner$grow,
									$rundis$elm_bootstrap$Bootstrap$Spinner$attrs(
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'display', 'block'),
											A2($elm$html$Html$Attributes$style, 'margin', 'auto'),
											$elm$html$Html$Attributes$class('align-middle')
										]))
								]),
							_List_Nil)
						])) : (_Utils_eq(metas, _List_Nil) ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'center')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('No machines matching current filter.')
						])) : $rundis$elm_bootstrap$Bootstrap$ListGroup$custom(
					A2($elm$core$List$map, oneRow, metas)))
				]));
	});
var $author$project$SaveLoad$CreateNewMachine = {$: 'CreateNewMachine'};
var $rundis$elm_bootstrap$Bootstrap$Card$Config = function (a) {
	return {$: 'Config', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$CardBlock = function (a) {
	return {$: 'CardBlock', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$applyBlockModifier = F2(
	function (option, options) {
		switch (option.$) {
			case 'AlignedBlock':
				var align = option.a;
				return _Utils_update(
					options,
					{
						aligned: $elm$core$Maybe$Just(align)
					});
			case 'BlockColoring':
				var role = option.a;
				return _Utils_update(
					options,
					{
						coloring: $elm$core$Maybe$Just(role)
					});
			case 'BlockTextColoring':
				var color = option.a;
				return _Utils_update(
					options,
					{
						textColoring: $elm$core$Maybe$Just(color)
					});
			default:
				var attrs = option.a;
				return _Utils_update(
					options,
					{
						attributes: _Utils_ap(options.attributes, attrs)
					});
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$defaultBlockOptions = {aligned: $elm$core$Maybe$Nothing, attributes: _List_Nil, coloring: $elm$core$Maybe$Nothing, textColoring: $elm$core$Maybe$Nothing};
var $rundis$elm_bootstrap$Bootstrap$Internal$Text$textAlignDirOption = function (dir) {
	switch (dir.$) {
		case 'Center':
			return 'center';
		case 'Left':
			return 'left';
		default:
			return 'right';
	}
};
var $rundis$elm_bootstrap$Bootstrap$Internal$Text$textAlignClass = function (_v0) {
	var dir = _v0.dir;
	var size = _v0.size;
	return $elm$html$Html$Attributes$class(
		'text' + (A2(
			$elm$core$Maybe$withDefault,
			'-',
			A2(
				$elm$core$Maybe$map,
				function (s) {
					return '-' + (s + '-');
				},
				$rundis$elm_bootstrap$Bootstrap$General$Internal$screenSizeOption(size))) + $rundis$elm_bootstrap$Bootstrap$Internal$Text$textAlignDirOption(dir)));
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$blockAttributes = function (modifiers) {
	var options = A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$Card$Internal$applyBlockModifier, $rundis$elm_bootstrap$Bootstrap$Card$Internal$defaultBlockOptions, modifiers);
	return _Utils_ap(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card-body')
			]),
		_Utils_ap(
			function () {
				var _v0 = options.aligned;
				if (_v0.$ === 'Just') {
					var align = _v0.a;
					return _List_fromArray(
						[
							$rundis$elm_bootstrap$Bootstrap$Internal$Text$textAlignClass(align)
						]);
				} else {
					return _List_Nil;
				}
			}(),
			_Utils_ap(
				function () {
					var _v1 = options.coloring;
					if (_v1.$ === 'Just') {
						var role = _v1.a;
						return _List_fromArray(
							[
								A2($rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass, 'bg', role)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				_Utils_ap(
					function () {
						var _v2 = options.textColoring;
						if (_v2.$ === 'Just') {
							var color = _v2.a;
							return _List_fromArray(
								[
									$rundis$elm_bootstrap$Bootstrap$Internal$Text$textColorClass(color)
								]);
						} else {
							return _List_Nil;
						}
					}(),
					options.attributes))));
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$block = F2(
	function (options, items) {
		return $rundis$elm_bootstrap$Bootstrap$Card$Internal$CardBlock(
			A2(
				$elm$html$Html$div,
				$rundis$elm_bootstrap$Bootstrap$Card$Internal$blockAttributes(options),
				A2(
					$elm$core$List$map,
					function (_v0) {
						var e = _v0.a;
						return e;
					},
					items)));
	});
var $rundis$elm_bootstrap$Bootstrap$Card$block = F3(
	function (options, items, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Card$Config(
			_Utils_update(
				conf,
				{
					blocks: _Utils_ap(
						conf.blocks,
						_List_fromArray(
							[
								A2($rundis$elm_bootstrap$Bootstrap$Card$Internal$block, options, items)
							]))
				}));
	});
var $rundis$elm_bootstrap$Bootstrap$Card$config = function (options) {
	return $rundis$elm_bootstrap$Bootstrap$Card$Config(
		{blocks: _List_Nil, footer: $elm$core$Maybe$Nothing, header: $elm$core$Maybe$Nothing, imgBottom: $elm$core$Maybe$Nothing, imgTop: $elm$core$Maybe$Nothing, options: options});
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$applyModifier = F2(
	function (option, options) {
		switch (option.$) {
			case 'Aligned':
				var align = option.a;
				return _Utils_update(
					options,
					{
						aligned: $elm$core$Maybe$Just(align)
					});
			case 'Coloring':
				var coloring = option.a;
				return _Utils_update(
					options,
					{
						coloring: $elm$core$Maybe$Just(coloring)
					});
			case 'TextColoring':
				var coloring = option.a;
				return _Utils_update(
					options,
					{
						textColoring: $elm$core$Maybe$Just(coloring)
					});
			default:
				var attrs = option.a;
				return _Utils_update(
					options,
					{
						attributes: _Utils_ap(options.attributes, attrs)
					});
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$defaultOptions = {aligned: $elm$core$Maybe$Nothing, attributes: _List_Nil, coloring: $elm$core$Maybe$Nothing, textColoring: $elm$core$Maybe$Nothing};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$cardAttributes = function (modifiers) {
	var options = A3($elm$core$List$foldl, $rundis$elm_bootstrap$Bootstrap$Card$Internal$applyModifier, $rundis$elm_bootstrap$Bootstrap$Card$Internal$defaultOptions, modifiers);
	return _Utils_ap(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card')
			]),
		_Utils_ap(
			function () {
				var _v0 = options.coloring;
				if (_v0.$ === 'Just') {
					if (_v0.a.$ === 'Roled') {
						var role = _v0.a.a;
						return _List_fromArray(
							[
								A2($rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass, 'bg', role)
							]);
					} else {
						var role = _v0.a.a;
						return _List_fromArray(
							[
								A2($rundis$elm_bootstrap$Bootstrap$Internal$Role$toClass, 'border', role)
							]);
					}
				} else {
					return _List_Nil;
				}
			}(),
			_Utils_ap(
				function () {
					var _v1 = options.textColoring;
					if (_v1.$ === 'Just') {
						var color = _v1.a;
						return _List_fromArray(
							[
								$rundis$elm_bootstrap$Bootstrap$Internal$Text$textColorClass(color)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				_Utils_ap(
					function () {
						var _v2 = options.aligned;
						if (_v2.$ === 'Just') {
							var align = _v2.a;
							return _List_fromArray(
								[
									$rundis$elm_bootstrap$Bootstrap$Internal$Text$textAlignClass(align)
								]);
						} else {
							return _List_Nil;
						}
					}(),
					options.attributes))));
};
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$renderBlocks = function (blocks) {
	return A2(
		$elm$core$List$map,
		function (block_) {
			if (block_.$ === 'CardBlock') {
				var e = block_.a;
				return e;
			} else {
				var e = block_.a;
				return e;
			}
		},
		blocks);
};
var $rundis$elm_bootstrap$Bootstrap$Card$view = function (_v0) {
	var conf = _v0.a;
	return A2(
		$elm$html$Html$div,
		$rundis$elm_bootstrap$Bootstrap$Card$Internal$cardAttributes(conf.options),
		_Utils_ap(
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var e = _v1.a;
							return e;
						},
						conf.header),
						A2(
						$elm$core$Maybe$map,
						function (_v2) {
							var e = _v2.a;
							return e;
						},
						conf.imgTop)
					])),
			_Utils_ap(
				$rundis$elm_bootstrap$Bootstrap$Card$Internal$renderBlocks(conf.blocks),
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$map,
							function (_v3) {
								var e = _v3.a;
								return e;
							},
							conf.footer),
							A2(
							$elm$core$Maybe$map,
							function (_v4) {
								var e = _v4.a;
								return e;
							},
							conf.imgBottom)
						])))));
};
var $rundis$elm_bootstrap$Bootstrap$Card$deck = function (cards) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('card-deck')
			]),
		A2($elm$core$List$map, $rundis$elm_bootstrap$Bootstrap$Card$view, cards));
};
var $rundis$elm_bootstrap$Bootstrap$Card$Footer = function (a) {
	return {$: 'Footer', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Card$footer = F3(
	function (attributes, children, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Card$Config(
			_Utils_update(
				conf,
				{
					footer: $elm$core$Maybe$Just(
						$rundis$elm_bootstrap$Bootstrap$Card$Footer(
							A2(
								$elm$html$Html$div,
								A2(
									$elm$core$List$cons,
									$elm$html$Html$Attributes$class('card-footer'),
									attributes),
								children)))
				}));
	});
var $rundis$elm_bootstrap$Bootstrap$Card$Header = function (a) {
	return {$: 'Header', a: a};
};
var $rundis$elm_bootstrap$Bootstrap$Card$headerPrivate = F4(
	function (elemFn, attributes, children, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Card$Config(
			_Utils_update(
				conf,
				{
					header: $elm$core$Maybe$Just(
						$rundis$elm_bootstrap$Bootstrap$Card$Header(
							A2(
								elemFn,
								A2(
									$elm$core$List$cons,
									$elm$html$Html$Attributes$class('card-header'),
									attributes),
								children)))
				}));
	});
var $rundis$elm_bootstrap$Bootstrap$Card$headerH3 = $rundis$elm_bootstrap$Bootstrap$Card$headerPrivate($elm$html$Html$h3);
var $rundis$elm_bootstrap$Bootstrap$Card$Internal$BlockItem = function (a) {
	return {$: 'BlockItem', a: a};
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $rundis$elm_bootstrap$Bootstrap$Card$Block$text = F2(
	function (attributes, children) {
		return $rundis$elm_bootstrap$Bootstrap$Card$Internal$BlockItem(
			A2(
				$elm$html$Html$p,
				_Utils_ap(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('card-text')
						]),
					attributes),
				children));
	});
var $author$project$SaveLoad$renderNew = function (loginStatus) {
	return $rundis$elm_bootstrap$Bootstrap$Card$deck(
		_List_fromArray(
			[
				A3(
				$rundis$elm_bootstrap$Bootstrap$Card$footer,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$rundis$elm_bootstrap$Bootstrap$Button$button,
						_List_fromArray(
							[
								$rundis$elm_bootstrap$Bootstrap$Button$primary,
								$rundis$elm_bootstrap$Bootstrap$Button$onClick($author$project$SaveLoad$CreateNewMachine)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Create!')
							]))
					]),
				A3(
					$rundis$elm_bootstrap$Bootstrap$Card$block,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$rundis$elm_bootstrap$Bootstrap$Card$Block$text,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('Create a new Finite State Machine.')
								]))
						]),
					A3(
						$rundis$elm_bootstrap$Bootstrap$Card$headerH3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('DFA / NFA')
							]),
						$rundis$elm_bootstrap$Bootstrap$Card$config(_List_Nil)))),
				function () {
				switch (loginStatus.$) {
					case 'LoggedIn':
						return A3(
							$rundis$elm_bootstrap$Bootstrap$Card$footer,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$rundis$elm_bootstrap$Bootstrap$Button$button,
									_List_fromArray(
										[
											$rundis$elm_bootstrap$Bootstrap$Button$primary,
											$rundis$elm_bootstrap$Bootstrap$Button$onClick($author$project$SaveLoad$OpenLoadDialog)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Load')
										]))
								]),
							A3(
								$rundis$elm_bootstrap$Bootstrap$Card$block,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rundis$elm_bootstrap$Bootstrap$Card$Block$text,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Load an existing machine.')
											]))
									]),
								A3(
									$rundis$elm_bootstrap$Bootstrap$Card$headerH3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Load Existing')
										]),
									$rundis$elm_bootstrap$Bootstrap$Card$config(_List_Nil))));
					case 'NotLoggedIn':
						return A3(
							$rundis$elm_bootstrap$Bootstrap$Card$footer,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$rundis$elm_bootstrap$Bootstrap$Button$button,
									_List_fromArray(
										[
											$rundis$elm_bootstrap$Bootstrap$Button$primary,
											$rundis$elm_bootstrap$Bootstrap$Button$onClick($author$project$SaveLoad$OpenLoginDialog)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Login')
										]))
								]),
							A3(
								$rundis$elm_bootstrap$Bootstrap$Card$block,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rundis$elm_bootstrap$Bootstrap$Card$Block$text,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Log in to load an existing machine.')
											]))
									]),
								A3(
									$rundis$elm_bootstrap$Bootstrap$Card$headerH3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Load Existing')
										]),
									$rundis$elm_bootstrap$Bootstrap$Card$config(_List_Nil))));
					default:
						return A3(
							$rundis$elm_bootstrap$Bootstrap$Card$footer,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$rundis$elm_bootstrap$Bootstrap$Button$button,
									_List_fromArray(
										[
											$rundis$elm_bootstrap$Bootstrap$Button$primary,
											$rundis$elm_bootstrap$Bootstrap$Button$onClick($author$project$SaveLoad$OpenLoginDialog)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Login')
										]))
								]),
							A3(
								$rundis$elm_bootstrap$Bootstrap$Card$block,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$rundis$elm_bootstrap$Bootstrap$Card$Block$text,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Please finish logging in to load your machines.')
											]))
									]),
								A3(
									$rundis$elm_bootstrap$Bootstrap$Card$headerH3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Load Existing')
										]),
									$rundis$elm_bootstrap$Bootstrap$Card$config(_List_Nil))));
				}
			}()
			]));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$size = F2(
	function (sze, stencil) {
		if (stencil.$ === 'Text') {
			var _v1 = stencil.a;
			var si = _v1.a;
			var bo = _v1.b;
			var i = _v1.c;
			var u = _v1.d;
			var s = _v1.e;
			var sel = _v1.f;
			var f = _v1.g;
			var c = _v1.h;
			var str = stencil.b;
			return A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$Text,
				A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, sze, bo, i, u, s, sel, f, c),
				str);
		} else {
			var a = stencil;
			return a;
		}
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $author$project$Utils$textBox = F5(
	function (txt, w, h, place, msg) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2((-w) / 2, h / 2),
			A3(
				$MacCASOutreach$graphicsvg$GraphicSVG$html,
				w * 1.5,
				h * 1.5,
				A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('input'),
							$elm$html$Html$Attributes$placeholder(place),
							$elm$html$Html$Events$onInput(msg),
							$elm$html$Html$Attributes$value(txt),
							A2(
							$elm$html$Html$Attributes$style,
							'width',
							$elm$core$String$fromFloat(w) + 'px'),
							A2(
							$elm$html$Html$Attributes$style,
							'height',
							$elm$core$String$fromFloat(h) + 'px'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '1px'),
							A2($elm$html$Html$Attributes$style, 'font-family', 'monospace')
						]),
					_List_Nil)));
	});
var $rundis$elm_bootstrap$Bootstrap$Modal$StartClose = {$: 'StartClose'};
var $rundis$elm_bootstrap$Bootstrap$Modal$getCloseMsg = function (config_) {
	var _v0 = config_.withAnimation;
	if (_v0.$ === 'Just') {
		var animationMsg = _v0.a;
		return animationMsg($rundis$elm_bootstrap$Bootstrap$Modal$StartClose);
	} else {
		return config_.closeMsg;
	}
};
var $rundis$elm_bootstrap$Bootstrap$Modal$isFade = function (conf) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			function (_v0) {
				return true;
			},
			conf.withAnimation));
};
var $rundis$elm_bootstrap$Bootstrap$Modal$backdrop = F2(
	function (visibility, conf) {
		var attributes = function () {
			switch (visibility.$) {
				case 'Show':
					return _Utils_ap(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('modal-backdrop', true),
										_Utils_Tuple2(
										'fade',
										$rundis$elm_bootstrap$Bootstrap$Modal$isFade(conf)),
										_Utils_Tuple2('show', true)
									]))
							]),
						conf.options.hideOnBackdropClick ? _List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$rundis$elm_bootstrap$Bootstrap$Modal$getCloseMsg(conf))
							]) : _List_Nil);
				case 'StartClose':
					return _List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('modal-backdrop', true),
									_Utils_Tuple2('fade', true),
									_Utils_Tuple2('show', true)
								]))
						]);
				case 'FadeClose':
					return _List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('modal-backdrop', true),
									_Utils_Tuple2('fade', true),
									_Utils_Tuple2('show', false)
								]))
						]);
				default:
					return _List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('modal-backdrop', false),
									_Utils_Tuple2(
									'fade',
									$rundis$elm_bootstrap$Bootstrap$Modal$isFade(conf)),
									_Utils_Tuple2('show', false)
								]))
						]);
			}
		}();
		return _List_fromArray(
			[
				A2($elm$html$Html$div, attributes, _List_Nil)
			]);
	});
var $rundis$elm_bootstrap$Bootstrap$Utilities$DomHelper$className = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['className']),
	$elm$json$Json$Decode$string);
var $rundis$elm_bootstrap$Bootstrap$Utilities$DomHelper$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $rundis$elm_bootstrap$Bootstrap$Modal$containerClickDecoder = function (closeMsg) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (c) {
			return A2($elm$core$String$contains, 'elm-bootstrap-modal', c) ? $elm$json$Json$Decode$succeed(closeMsg) : $elm$json$Json$Decode$fail('ignoring');
		},
		$rundis$elm_bootstrap$Bootstrap$Utilities$DomHelper$target($rundis$elm_bootstrap$Bootstrap$Utilities$DomHelper$className));
};
var $rundis$elm_bootstrap$Bootstrap$Modal$display = F2(
	function (visibility, conf) {
		switch (visibility.$) {
			case 'Show':
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('modal', true),
								_Utils_Tuple2(
								'fade',
								$rundis$elm_bootstrap$Bootstrap$Modal$isFade(conf)),
								_Utils_Tuple2('show', true)
							]))
					]);
			case 'StartClose':
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('modal', true),
								_Utils_Tuple2('fade', true),
								_Utils_Tuple2('show', true)
							]))
					]);
			case 'FadeClose':
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('modal', true),
								_Utils_Tuple2('fade', true),
								_Utils_Tuple2('show', false)
							])),
						A2(
						$elm$html$Html$Events$on,
						'transitionend',
						$elm$json$Json$Decode$succeed(conf.closeMsg))
					]);
			default:
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'height', '0px'),
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						$elm$html$Html$Attributes$classList(
						_List_fromArray(
							[
								_Utils_Tuple2('modal', true),
								_Utils_Tuple2(
								'fade',
								$rundis$elm_bootstrap$Bootstrap$Modal$isFade(conf)),
								_Utils_Tuple2('show', false)
							]))
					]);
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Modal$modalClass = function (size) {
	var _v0 = $rundis$elm_bootstrap$Bootstrap$General$Internal$screenSizeOption(size);
	if (_v0.$ === 'Just') {
		var s = _v0.a;
		return _List_fromArray(
			[
				$elm$html$Html$Attributes$class('modal-' + s)
			]);
	} else {
		return _List_Nil;
	}
};
var $rundis$elm_bootstrap$Bootstrap$Modal$modalAttributes = function (options) {
	return _Utils_ap(
		options.attrs,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('modal-dialog', true),
							_Utils_Tuple2('modal-dialog-centered', options.centered),
							_Utils_Tuple2('modal-dialog-scrollable', options.scrollableBody)
						])),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
				]),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $rundis$elm_bootstrap$Bootstrap$Modal$modalClass, options.modalSize))));
};
var $rundis$elm_bootstrap$Bootstrap$Modal$renderBody = function (maybeBody) {
	if (maybeBody.$ === 'Just') {
		var cfg = maybeBody.a.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$html$Html$div,
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$class('modal-body'),
					cfg.attributes),
				cfg.children));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rundis$elm_bootstrap$Bootstrap$Modal$renderFooter = function (maybeFooter) {
	if (maybeFooter.$ === 'Just') {
		var cfg = maybeFooter.a.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$html$Html$div,
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$class('modal-footer'),
					cfg.attributes),
				cfg.children));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rundis$elm_bootstrap$Bootstrap$Modal$closeButton = function (closeMsg) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('close'),
				$elm$html$Html$Events$onClick(closeMsg)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('×')
			]));
};
var $rundis$elm_bootstrap$Bootstrap$Modal$renderHeader = function (conf_) {
	var _v0 = conf_.header;
	if (_v0.$ === 'Just') {
		var cfg = _v0.a.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$html$Html$div,
				A2(
					$elm$core$List$cons,
					$elm$html$Html$Attributes$class('modal-header'),
					cfg.attributes),
				_Utils_ap(
					cfg.children,
					_List_fromArray(
						[
							$rundis$elm_bootstrap$Bootstrap$Modal$closeButton(
							$rundis$elm_bootstrap$Bootstrap$Modal$getCloseMsg(conf_))
						]))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $rundis$elm_bootstrap$Bootstrap$Modal$view = F2(
	function (visibility, _v0) {
		var conf = _v0.a;
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_Utils_ap(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$tabindex(-1)
								]),
							A2($rundis$elm_bootstrap$Bootstrap$Modal$display, visibility, conf)),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_Utils_ap(
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$attribute, 'role', 'document'),
											$elm$html$Html$Attributes$class('elm-bootstrap-modal')
										]),
									_Utils_ap(
										$rundis$elm_bootstrap$Bootstrap$Modal$modalAttributes(conf.options),
										conf.options.hideOnBackdropClick ? _List_fromArray(
											[
												A2(
												$elm$html$Html$Events$on,
												'click',
												$rundis$elm_bootstrap$Bootstrap$Modal$containerClickDecoder(conf.closeMsg))
											]) : _List_Nil)),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('modal-content')
											]),
										A2(
											$elm$core$List$filterMap,
											$elm$core$Basics$identity,
											_List_fromArray(
												[
													$rundis$elm_bootstrap$Bootstrap$Modal$renderHeader(conf),
													$rundis$elm_bootstrap$Bootstrap$Modal$renderBody(conf.body),
													$rundis$elm_bootstrap$Bootstrap$Modal$renderFooter(conf.footer)
												])))
									]))
							]))
					]),
				A2($rundis$elm_bootstrap$Bootstrap$Modal$backdrop, visibility, conf)));
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$getActiveItem = F2(
	function (_v0, configRec) {
		var activeTab = _v0.a.activeTab;
		if (activeTab.$ === 'Nothing') {
			return $elm$core$List$head(configRec.items);
		} else {
			var id = activeTab.a;
			return function (found) {
				if (found.$ === 'Just') {
					var f = found.a;
					return $elm$core$Maybe$Just(f);
				} else {
					return $elm$core$List$head(configRec.items);
				}
			}(
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v2) {
							var item_ = _v2.a;
							return _Utils_eq(item_.id, id);
						},
						configRec.items)));
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$Hidden = {$: 'Hidden'};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $rundis$elm_bootstrap$Bootstrap$Tab$Start = {$: 'Start'};
var $rundis$elm_bootstrap$Bootstrap$Tab$visibilityTransition = F2(
	function (withAnimation_, visibility) {
		var _v0 = _Utils_Tuple2(withAnimation_, visibility);
		_v0$2:
		while (true) {
			if (_v0.a) {
				switch (_v0.b.$) {
					case 'Hidden':
						var _v1 = _v0.b;
						return $rundis$elm_bootstrap$Bootstrap$Tab$Start;
					case 'Start':
						var _v2 = _v0.b;
						return $rundis$elm_bootstrap$Bootstrap$Tab$Showing;
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $rundis$elm_bootstrap$Bootstrap$Tab$Showing;
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$renderLink = F4(
	function (id, active, _v0, configRec) {
		var attributes = _v0.a.attributes;
		var children = _v0.a.children;
		var commonClasses = _List_fromArray(
			[
				_Utils_Tuple2('nav-link', true),
				_Utils_Tuple2('active', active)
			]);
		var clickHandler = $elm$html$Html$Events$onClick(
			configRec.toMsg(
				$rundis$elm_bootstrap$Bootstrap$Tab$State(
					{
						activeTab: $elm$core$Maybe$Just(id),
						visibility: A2($rundis$elm_bootstrap$Bootstrap$Tab$visibilityTransition, configRec.withAnimation && (!active), $rundis$elm_bootstrap$Bootstrap$Tab$Hidden)
					})));
		var linkItem = configRec.useHash ? A2(
			$elm$html$Html$a,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$classList(commonClasses),
						clickHandler,
						$elm$html$Html$Attributes$href('#' + id)
					]),
				attributes),
			children) : A2(
			$elm$html$Html$button,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$classList(
						_Utils_ap(
							commonClasses,
							_List_fromArray(
								[
									_Utils_Tuple2('btn', true),
									_Utils_Tuple2('btn-link', true)
								]))),
						clickHandler
					]),
				attributes),
			children);
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('nav-item')
				]),
			_List_fromArray(
				[linkItem]));
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$transitionStyles = function (opacity) {
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$Attributes$style,
			'opacity',
			$elm$core$String$fromInt(opacity)),
			A2($elm$html$Html$Attributes$style, '-webkit-transition', 'opacity 0.15s linear'),
			A2($elm$html$Html$Attributes$style, '-o-transition', 'opacity 0.15s linear'),
			A2($elm$html$Html$Attributes$style, 'transition', 'opacity 0.15s linear')
		]);
};
var $rundis$elm_bootstrap$Bootstrap$Tab$activeTabAttributes = F2(
	function (_v0, configRec) {
		var visibility = _v0.a.visibility;
		switch (visibility.$) {
			case 'Hidden':
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'none')
					]);
			case 'Start':
				return _List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'block'),
						A2($elm$html$Html$Attributes$style, 'opacity', '0')
					]);
			default:
				return _Utils_ap(
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					$rundis$elm_bootstrap$Bootstrap$Tab$transitionStyles(1));
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$renderTabPane = F5(
	function (id, active, _v0, state, configRec) {
		var attributes = _v0.a.attributes;
		var children = _v0.a.children;
		var displayAttrs = active ? A2($rundis$elm_bootstrap$Bootstrap$Tab$activeTabAttributes, state, configRec) : _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'none')
			]);
		return A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id(id),
						$elm$html$Html$Attributes$class('tab-pane')
					]),
				_Utils_ap(displayAttrs, attributes)),
			children);
	});
var $rundis$elm_bootstrap$Bootstrap$Tab$tabAttributes = function (configRec) {
	return _Utils_ap(
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2('nav', true),
						_Utils_Tuple2('nav-tabs', !configRec.isPill),
						_Utils_Tuple2('nav-pills', configRec.isPill)
					]))
			]),
		_Utils_ap(
			function () {
				var _v0 = configRec.layout;
				if (_v0.$ === 'Just') {
					switch (_v0.a.$) {
						case 'Justified':
							var _v1 = _v0.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class('nav-justified')
								]);
						case 'Fill':
							var _v2 = _v0.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class('nav-fill')
								]);
						case 'Center':
							var _v3 = _v0.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class('justify-content-center')
								]);
						default:
							var _v4 = _v0.a;
							return _List_fromArray(
								[
									$elm$html$Html$Attributes$class('justify-content-end')
								]);
					}
				} else {
					return _List_Nil;
				}
			}(),
			configRec.attributes));
};
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $rundis$elm_bootstrap$Bootstrap$Tab$view = F2(
	function (state, _v0) {
		var configRec = _v0.a;
		var _v1 = A2($rundis$elm_bootstrap$Bootstrap$Tab$getActiveItem, state, configRec);
		if (_v1.$ === 'Nothing') {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$ul,
						$rundis$elm_bootstrap$Bootstrap$Tab$tabAttributes(configRec),
						_List_Nil),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('tab-content')
							]),
						_List_Nil)
					]));
		} else {
			var currentItem = _v1.a.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$ul,
						$rundis$elm_bootstrap$Bootstrap$Tab$tabAttributes(configRec),
						A2(
							$elm$core$List$map,
							function (_v2) {
								var item_ = _v2.a;
								return A4(
									$rundis$elm_bootstrap$Bootstrap$Tab$renderLink,
									item_.id,
									_Utils_eq(item_.id, currentItem.id),
									item_.link,
									configRec);
							},
							configRec.items)),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('tab-content')
							]),
						A2(
							$elm$core$List$map,
							function (_v3) {
								var item_ = _v3.a;
								return A5(
									$rundis$elm_bootstrap$Bootstrap$Tab$renderTabPane,
									item_.id,
									_Utils_eq(item_.id, currentItem.id),
									item_.pane,
									state,
									configRec);
							},
							configRec.items))
					]));
		}
	});
var $rundis$elm_bootstrap$Bootstrap$Modal$withAnimation = F2(
	function (animateMsg, _v0) {
		var conf = _v0.a;
		return $rundis$elm_bootstrap$Bootstrap$Modal$Config(
			_Utils_update(
				conf,
				{
					withAnimation: $elm$core$Maybe$Just(animateMsg)
				}));
	});
var $author$project$SaveLoad$view = F2(
	function (model, env) {
		var winY = env.windowSize.b;
		var winX = env.windowSize.a;
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					function () {
					var _v0 = model.loginState;
					switch (_v0.$) {
						case 'NotLoggedIn':
							return A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
								$author$project$SaveLoad$OpenLoginDialog,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2((winX / 2) - 50, (winY / 2) - 15),
									$MacCASOutreach$graphicsvg$GraphicSVG$group(
										_List_fromArray(
											[
												A3(
												$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
												$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
												$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$filled,
													$MacCASOutreach$graphicsvg$GraphicSVG$blank,
													A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 50, 15, 1))),
												A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(0, -4),
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$filled,
													$MacCASOutreach$graphicsvg$GraphicSVG$black,
													$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
														$MacCASOutreach$graphicsvg$GraphicSVG$centered(
															$MacCASOutreach$graphicsvg$GraphicSVG$text('Log in')))))
											]))));
						case 'LoggedIn':
							var email = _v0.a;
							var lastMachine = _v0.b;
							return A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2((winX / 2) - 100, (winY / 2) - 15),
								$MacCASOutreach$graphicsvg$GraphicSVG$group(
									_List_fromArray(
										[
											A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$move,
											_Utils_Tuple2(0, -4),
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$black,
												$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
													$MacCASOutreach$graphicsvg$GraphicSVG$alignRight(
														$MacCASOutreach$graphicsvg$GraphicSVG$text('Welcome ' + email))))),
											A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
											$author$project$SaveLoad$OpenLogoutDialog,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(40, 0),
												$MacCASOutreach$graphicsvg$GraphicSVG$group(
													_List_fromArray(
														[
															A3(
															$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
															$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
															$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																$MacCASOutreach$graphicsvg$GraphicSVG$blank,
																A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 55, 15, 1))),
															A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$move,
															_Utils_Tuple2(0, -4),
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																$MacCASOutreach$graphicsvg$GraphicSVG$black,
																$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
																	$MacCASOutreach$graphicsvg$GraphicSVG$centered(
																		$MacCASOutreach$graphicsvg$GraphicSVG$text('Log out')))))
														])))),
											A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
											$author$project$SaveLoad$OpenLoadDialog,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(40, -20),
												$MacCASOutreach$graphicsvg$GraphicSVG$group(
													_List_fromArray(
														[
															A3(
															$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
															$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
															$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																$MacCASOutreach$graphicsvg$GraphicSVG$blank,
																A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 85, 15, 1))),
															A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$move,
															_Utils_Tuple2(0, -4),
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																$MacCASOutreach$graphicsvg$GraphicSVG$black,
																$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
																	$MacCASOutreach$graphicsvg$GraphicSVG$centered(
																		$MacCASOutreach$graphicsvg$GraphicSVG$text('My Machines')))))
														]))))
										])));
						default:
							return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}(),
					function () {
					var _v1 = model.loadDialog;
					switch (_v1.$) {
						case 'LoadOpen':
							var metas = _v1.a;
							var tab = function (ft) {
								return $rundis$elm_bootstrap$Bootstrap$Tab$item(
									{
										id: function () {
											switch (ft.$) {
												case 'FilterActive':
													return 'all';
												case 'MachineFilter':
													switch (ft.a.$) {
														case 'DFA':
															var _v3 = ft.a;
															return 'D';
														case 'NFA':
															var _v4 = ft.a;
															return 'N';
														case 'NPDA':
															var _v5 = ft.a;
															return 'P';
														default:
															var _v6 = ft.a;
															return 'T';
													}
												default:
													return 'arc';
											}
										}(),
										link: A2(
											$rundis$elm_bootstrap$Bootstrap$Tab$link,
											_List_fromArray(
												[
													$elm$html$Html$Events$onClick(
													$author$project$SaveLoad$SelectFilter(ft))
												]),
											_Utils_ap(
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text(
														function () {
															switch (ft.$) {
																case 'FilterActive':
																	return 'All';
																case 'MachineFilter':
																	switch (ft.a.$) {
																		case 'DFA':
																			var _v8 = ft.a;
																			return 'DFA/NFA';
																		case 'NFA':
																			var _v9 = ft.a;
																			return 'DFA/NFA';
																		case 'NPDA':
																			var _v10 = ft.a;
																			return 'NPDA';
																		default:
																			var _v11 = ft.a;
																			return 'TM';
																	}
																default:
																	return 'Archived';
															}
														}())
													]))),
										pane: A2($rundis$elm_bootstrap$Bootstrap$Tab$pane, _List_Nil, _List_Nil)
									});
							};
							return A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2((-winX) / 2, winY / 2),
								A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$html,
									winX,
									winY,
									A2(
										$rundis$elm_bootstrap$Bootstrap$Modal$view,
										model.loadDialogModal,
										A3(
											$rundis$elm_bootstrap$Bootstrap$Modal$footer,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															A2($elm$html$Html$Attributes$style, 'width', '100%')
														]),
													_List_fromArray(
														[
															A2(
															$rundis$elm_bootstrap$Bootstrap$Tab$view,
															model.tabState,
															A2(
																$rundis$elm_bootstrap$Bootstrap$Tab$items,
																A2(
																	$elm$core$List$map,
																	tab,
																	_List_fromArray(
																		[
																			$author$project$SaveLoad$FilterActive,
																			$author$project$SaveLoad$MachineFilter($author$project$SaveLoad$DFA),
																			$author$project$SaveLoad$FilterArchived
																		])),
																$rundis$elm_bootstrap$Bootstrap$Tab$center(
																	$rundis$elm_bootstrap$Bootstrap$Tab$pills(
																		$rundis$elm_bootstrap$Bootstrap$Tab$config(
																			A2($elm$core$Basics$composeL, $author$project$SaveLoad$MachineCreatedMsg, $author$project$SaveLoad$TabMsg))))))
														]))
												]),
											A3(
												$rundis$elm_bootstrap$Bootstrap$Modal$body,
												_List_fromArray(
													[
														A2(
														$elm$html$Html$Attributes$style,
														'height',
														$elm$core$String$fromFloat(winY / 2) + 'px'),
														A2($elm$html$Html$Attributes$style, 'overflow', 'scroll')
													]),
												_List_fromArray(
													[
														A5(
														$author$project$SaveLoad$renderLoadList,
														!_Utils_eq(model.loadingList, $elm$core$Maybe$Nothing),
														_Utils_eq(model.loadFilter, $author$project$SaveLoad$FilterArchived),
														metas,
														env.currentTime,
														env.timeZone)
													]),
												A3(
													$rundis$elm_bootstrap$Bootstrap$Modal$header,
													_List_Nil,
													_List_fromArray(
														[
															A2(
															$elm$html$Html$div,
															_List_Nil,
															_List_fromArray(
																[
																	A2(
																	$elm$html$Html$h3,
																	_List_Nil,
																	_List_fromArray(
																		[
																			$elm$html$Html$text('My Machines')
																		]))
																])),
															A2(
															$elm$html$Html$div,
															_List_Nil,
															_List_fromArray(
																[
																	A2(
																	$rundis$elm_bootstrap$Bootstrap$Button$button,
																	_List_fromArray(
																		[
																			$rundis$elm_bootstrap$Bootstrap$Button$primary,
																			$rundis$elm_bootstrap$Bootstrap$Button$attrs(
																			_List_fromArray(
																				[
																					A2($elm$html$Html$Attributes$style, 'margin-left', '10px')
																				])),
																			$rundis$elm_bootstrap$Bootstrap$Button$onClick($author$project$SaveLoad$OpenNewDialog)
																		]),
																	_List_fromArray(
																		[
																			$elm$html$Html$text('New')
																		]))
																]))
														]),
													A2(
														$rundis$elm_bootstrap$Bootstrap$Modal$withAnimation,
														$author$project$SaveLoad$ModalAnimation,
														$rundis$elm_bootstrap$Bootstrap$Modal$config($author$project$SaveLoad$CloseLoadDialog))))))));
						case 'NewOpen':
							return A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2((-winX) / 2, winY / 2),
								A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$html,
									winX,
									winY,
									A2(
										$rundis$elm_bootstrap$Bootstrap$Modal$view,
										model.loadDialogModal,
										A3(
											$rundis$elm_bootstrap$Bootstrap$Modal$footer,
											_List_Nil,
											_List_Nil,
											A3(
												$rundis$elm_bootstrap$Bootstrap$Modal$body,
												_List_fromArray(
													[
														A2(
														$elm$html$Html$Attributes$style,
														'height',
														$elm$core$String$fromFloat(winY / 2) + 'px'),
														A2($elm$html$Html$Attributes$style, 'overflow', 'scroll')
													]),
												_List_fromArray(
													[
														A2(
														$elm$html$Html$h4,
														_List_Nil,
														_List_fromArray(
															[
																$elm$html$Html$text('finsm.io lets you create, test and export finite state machines. Get started by selecting an option below:')
															])),
														$author$project$SaveLoad$renderNew(model.loginState)
													]),
												A3(
													$rundis$elm_bootstrap$Bootstrap$Modal$header,
													_List_Nil,
													_List_fromArray(
														[
															A2(
															$elm$html$Html$div,
															_List_Nil,
															_List_fromArray(
																[
																	A2(
																	$elm$html$Html$h3,
																	_List_Nil,
																	_List_fromArray(
																		[
																			$elm$html$Html$text('Welcome to finsm.io!')
																		]))
																]))
														]),
													A2(
														$rundis$elm_bootstrap$Bootstrap$Modal$withAnimation,
														$author$project$SaveLoad$ModalAnimation,
														$rundis$elm_bootstrap$Bootstrap$Modal$config($author$project$SaveLoad$CloseLoadDialog))))))));
						default:
							return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}(),
					function () {
					var _v12 = model.machineData;
					if (_v12.$ === 'MachineCreated') {
						return $MacCASOutreach$graphicsvg$GraphicSVG$group(
							_List_fromArray(
								[
									(!model.editingName) ? A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
									$author$project$SaveLoad$MachineCreatedMsg($author$project$SaveLoad$EditMachineName),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(((-winX) / 2) + 175, (winY / 2) - 20),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$size,
												16,
												$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
													$MacCASOutreach$graphicsvg$GraphicSVG$text(model.machineMetadata.name)))))) : A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(((-winX) / 2) + 325, (winY / 2) - 10),
									A5(
										$author$project$Utils$textBox,
										model.machineMetadata.name,
										300,
										20,
										'Machine Name',
										A2($elm$core$Basics$composeL, $author$project$SaveLoad$MachineCreatedMsg, $author$project$SaveLoad$TypeName))),
									A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(((-winX) / 2) + 490, (winY / 2) - 20),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$size,
											14,
											$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
												$MacCASOutreach$graphicsvg$GraphicSVG$text(
													A2($author$project$SaveLoad$lastSaved, model, env))))))
								]));
					} else {
						return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}()
				]));
	});
var $author$project$Main$modeButtons = function (model) {
	var winY = model.environment.windowSize.b;
	var winX = model.environment.windowSize.a;
	var simulating = function () {
		var _v2 = model.appModel.present.appState;
		if (_v2.$ === 'Simulating') {
			return true;
		} else {
			return false;
		}
	}();
	var exporting = function () {
		var _v1 = model.appModel.present.appState;
		if (_v1.$ === 'Exporting') {
			return true;
		} else {
			return false;
		}
	}();
	var building = function () {
		var _v0 = model.appModel.present.appState;
		if (_v0.$ === 'Building') {
			return true;
		} else {
			return false;
		}
	}();
	return $MacCASOutreach$graphicsvg$GraphicSVG$group(
		_List_fromArray(
			[
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
				$author$project$Main$GoTo($author$project$Main$BuildingModule),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(((-winX) / 2) + 25, (winY / 2) - 15),
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
								$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
								$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									building ? $author$project$Helpers$finsmBlue : $MacCASOutreach$graphicsvg$GraphicSVG$blank,
									A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 40, 15, 1))),
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0, -4),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									building ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										$MacCASOutreach$graphicsvg$GraphicSVG$centered(
											$MacCASOutreach$graphicsvg$GraphicSVG$text('Build')))))
							])))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
				$author$project$Main$GoTo($author$project$Main$SimulatingModule),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(((-winX) / 2) + 77, (winY / 2) - 15),
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
								$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
								$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									simulating ? $author$project$Helpers$finsmBlue : $MacCASOutreach$graphicsvg$GraphicSVG$blank,
									A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 60, 15, 1))),
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0, -4),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									simulating ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										$MacCASOutreach$graphicsvg$GraphicSVG$centered(
											$MacCASOutreach$graphicsvg$GraphicSVG$text('Simulate')))))
							])))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
				$author$project$Main$GoTo($author$project$Main$ExportingModule),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(((-winX) / 2) + 134, (winY / 2) - 15),
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
								$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
								$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									exporting ? $author$project$Helpers$finsmBlue : $MacCASOutreach$graphicsvg$GraphicSVG$blank,
									A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 50, 15, 1))),
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0, -4),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									exporting ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										$MacCASOutreach$graphicsvg$GraphicSVG$centered(
											$MacCASOutreach$graphicsvg$GraphicSVG$text('Export')))))
							])))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$map,
				$author$project$Main$SaveMsg,
				A2($author$project$SaveLoad$view, model.saveModel, model.environment))
			]));
};
var $author$project$Building$AddState = function (a) {
	return {$: 'AddState', a: a};
};
var $author$project$Building$MachineMsg = function (a) {
	return {$: 'MachineMsg', a: a};
};
var $author$project$Machine$Reset = {$: 'Reset'};
var $MacCASOutreach$graphicsvg$GraphicSVG$clip = F2(
	function (shape1, shape2) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, shape1, shape2);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$gray = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 211, 215, 207, 1);
var $MacCASOutreach$graphicsvg$GraphicSVG$repaint = F2(
	function (color, shape) {
		switch (shape.$) {
			case 'Inked':
				var clr = shape.a;
				var outline = shape.b;
				var sh = shape.c;
				return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, color, outline, sh);
			case 'Move':
				var s = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Move,
					s,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Rotate':
				var r = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
					r,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'ScaleXY':
				var sx = shape.a;
				var sy = shape.b;
				var sh = shape.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$ScaleXY,
					sx,
					sy,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Group':
				var shapes = shape.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$Group(
					A2(
						$elm$core$List$map,
						$MacCASOutreach$graphicsvg$GraphicSVG$repaint(color),
						shapes));
			case 'AlphaMask':
				var sh1 = shape.a;
				var sh2 = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
					sh1,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh2));
			case 'Clip':
				var shape1 = shape.a;
				var shape2 = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Clip,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, shape1),
					shape2);
			default:
				var a = shape;
				return a;
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$scale = F2(
	function (s, shape) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$ScaleXY, s, s, shape);
	});
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $MacCASOutreach$graphicsvg$GraphicSVG$ghost = function (stencil) {
	return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, $MacCASOutreach$graphicsvg$GraphicSVG$white, $elm$core$Maybe$Nothing, stencil);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$rotate = F2(
	function (theta, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Rotate, theta, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$subtract = F2(
	function (shape1, shape2) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
			$MacCASOutreach$graphicsvg$GraphicSVG$Group(
				_List_fromArray(
					[
						$MacCASOutreach$graphicsvg$GraphicSVG$Everything,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, $MacCASOutreach$graphicsvg$GraphicSVG$black, shape1)
					])),
			shape2);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Polygon = function (a) {
	return {$: 'Polygon', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$wedgeHelper = F2(
	function (r, cn) {
		var angle = cn;
		return _Utils_Tuple2(
			r * $elm$core$Basics$cos(
				$elm$core$Basics$degrees(angle)),
			r * $elm$core$Basics$sin(
				$elm$core$Basics$degrees(angle)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$wedge = F2(
	function (r, frac) {
		var n = ((frac * 360) / 10) + 5;
		var ni = $elm$core$Basics$round(n);
		return $MacCASOutreach$graphicsvg$GraphicSVG$Polygon(
			(frac > 0) ? _Utils_ap(
				_List_fromArray(
					[
						_Utils_Tuple2(0, 0),
						A2($MacCASOutreach$graphicsvg$GraphicSVG$wedgeHelper, r, (-frac) * 180)
					]),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeL,
							A2(
								$elm$core$Basics$composeL,
								$MacCASOutreach$graphicsvg$GraphicSVG$wedgeHelper(r),
								$elm$core$Basics$mul((frac / n) * 180)),
							$elm$core$Basics$toFloat),
						A2($elm$core$List$range, -ni, ni)),
					_List_fromArray(
						[
							A2($MacCASOutreach$graphicsvg$GraphicSVG$wedgeHelper, r, frac * 180),
							_Utils_Tuple2(0, 0)
						]))) : _List_Nil);
	});
var $author$project$Building$snapIcon = $MacCASOutreach$graphicsvg$GraphicSVG$group(
	_List_fromArray(
		[
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$subtract,
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(5, -10),
				$MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
							$elm$core$Basics$degrees(90),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$wedge, 10, 0.5))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(6, -6),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 8, 12))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(-6, -6),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 8, 12))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, -3),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 12, 8)))
						]))),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(0, 10),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 33, 4, 2.5))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 33, 4, 2.5)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(0, -10),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 33, 4, 2.5))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(10, 0),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 4, 33, 2.5))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 4, 33, 2.5)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(-10, 0),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 4, 33, 2.5)))
					]))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(5, -10),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$subtract,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
							$elm$core$Basics$degrees(90),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$wedge, 2, 0.5))),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
							$elm$core$Basics$degrees(90),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$black,
								A2($MacCASOutreach$graphicsvg$GraphicSVG$wedge, 8, 0.5)))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$subtract,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(5, -3),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 2.5, 3))),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(5, -3),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$black,
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 6, 6)))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$subtract,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(-5, -3),
							$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 2.5, 3))),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(-5, -3),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$black,
								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 6, 6))))
					])))
		]));
var $author$project$Building$editingButtons = function (model) {
	var snapping = function () {
		var _v0 = model.snapToGrid;
		if (_v0.$ === 'SnapToGrid') {
			return true;
		} else {
			return false;
		}
	}();
	return $MacCASOutreach$graphicsvg$GraphicSVG$group(
		_List_fromArray(
			[
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-36, 0),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
					$author$project$Building$ToggleSnap,
					A2(
						$author$project$Helpers$icon,
						snapping,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$repaint,
							snapping ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$gray,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$scale, 0.75, $author$project$Building$snapIcon)))))
			]));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Set$isEmpty = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$isEmpty(dict);
};
var $author$project$Mistakes$checkEpsilonTransLabel = function (tNames) {
	var tMistakes = A3(
		$elm$core$Dict$foldl,
		F3(
			function (tid, tnames, tmistakes) {
				return (!$author$project$Mistakes$checkTransitionValid(tnames)) ? A2($elm$core$Set$insert, tid, tmistakes) : tmistakes;
			}),
		$elm$core$Set$empty,
		tNames);
	return $elm$core$Set$isEmpty(tMistakes) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tMistakes);
};
var $author$project$Mistakes$getTransitionMistakes = function (mac) {
	var tNames = mac.transitionNames;
	return $author$project$Mistakes$checkEpsilonTransLabel(tNames);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$graphPaperCustom = F3(
	function (s, th, c) {
		return (s >= 2) ? A3($MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper, s, th, c) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyTapAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$TapAt, msg, shape);
	});
var $author$project$Machine$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $author$project$Machine$StopDragging = {$: 'StopDragging'};
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseUp = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MouseUp, msg, shape);
	});
var $author$project$Helpers$AlignCentre = {$: 'AlignCentre'};
var $author$project$Helpers$AlignLeft = {$: 'AlignLeft'};
var $author$project$Helpers$AlignRight = {$: 'AlignRight'};
var $author$project$Machine$EditLabel = F2(
	function (a, b) {
		return {$: 'EditLabel', a: a, b: b};
	});
var $author$project$Machine$MouseLeaveLabel = {$: 'MouseLeaveLabel'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Pull = F2(
	function (a, b) {
		return {$: 'Pull', a: a, b: b};
	});
var $author$project$Machine$SelectArrow = function (a) {
	return {$: 'SelectArrow', a: a};
};
var $author$project$Machine$StartDraggingArrow = F2(
	function (a, b) {
		return {$: 'StartDraggingArrow', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$BezierPath = F2(
	function (a, b) {
		return {$: 'BezierPath', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$curveListHelper = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	var b = _v1.b;
	var _v2 = _v0.b;
	var c = _v2.a;
	var d = _v2.b;
	return _Utils_Tuple2(
		_Utils_Tuple2(a, b),
		_Utils_Tuple2(c, d));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$curve = F2(
	function (_v0, list) {
		var a = _v0.a;
		var b = _v0.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$BezierPath,
			_Utils_Tuple2(a, b),
			A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$curveListHelper, list));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ssa = function (n) {
	return A3($elm$core$Basics$clamp, 0, 1, n);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$rgba = F4(
	function (r, g, b, a) {
		return A4(
			$MacCASOutreach$graphicsvg$GraphicSVG$RGBA,
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(r),
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(g),
			$MacCASOutreach$graphicsvg$GraphicSVG$ssc(b),
			$MacCASOutreach$graphicsvg$GraphicSVG$ssa(a));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$outlined = F3(
	function (style, outlineClr, stencil) {
		var lineStyle = _Utils_Tuple2(style, outlineClr);
		return A3(
			$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
			A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 0, 0, 0, 0),
			$elm$core$Maybe$Just(lineStyle),
			stencil);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ptOnCircle = F3(
	function (r, n, cn) {
		var angle = (360 * cn) / n;
		return _Utils_Tuple2(
			r * $elm$core$Basics$cos(
				$elm$core$Basics$degrees(angle)),
			r * $elm$core$Basics$sin(
				$elm$core$Basics$degrees(angle)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ngon = F2(
	function (n, r) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$Polygon(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeL,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$ptOnCircle, r, n),
					$elm$core$Basics$toFloat),
				A2($elm$core$List$range, 0, n)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$triangle = function (r) {
	return A2($MacCASOutreach$graphicsvg$GraphicSVG$ngon, 3, r);
};
var $author$project$Machine$arrow = F3(
	function (_v0, _v1, _v2) {
		var x0 = _v0.a;
		var y0 = _v0.b;
		var x1 = _v1.a;
		var y1 = _v1.b;
		var x2 = _v2.a;
		var y2 = _v2.b;
		var _v3 = _Utils_Tuple2(x2 - x1, y2 - y1);
		var dx = _v3.a;
		var dy = _v3.b;
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
					$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
					$MacCASOutreach$graphicsvg$GraphicSVG$black,
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$curve,
						_Utils_Tuple2(x0, y0),
						_List_fromArray(
							[
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$Pull,
								_Utils_Tuple2(x1, y1),
								_Utils_Tuple2(
									x2 - (2 * $elm$core$Basics$cos(
										A2($elm$core$Basics$atan2, dy, dx))),
									y2 - (2 * $elm$core$Basics$sin(
										A2($elm$core$Basics$atan2, dy, dx)))))
							]))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(
						x2 - (4 * $elm$core$Basics$cos(
							A2($elm$core$Basics$atan2, dy, dx))),
						y2 - (4 * $elm$core$Basics$sin(
							A2($elm$core$Basics$atan2, dy, dx)))),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
						A2($elm$core$Basics$atan2, dy, dx),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							$MacCASOutreach$graphicsvg$GraphicSVG$triangle(4))))
				]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Broken = F2(
	function (a, b) {
		return {$: 'Broken', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$dotted = function (th) {
	return A2(
		$MacCASOutreach$graphicsvg$GraphicSVG$Broken,
		_List_fromArray(
			[
				_Utils_Tuple2(th, th)
			]),
		th);
};
var $author$project$Helpers$Above = {$: 'Above'};
var $author$project$Helpers$Below = {$: 'Below'};
var $author$project$Helpers$Left = {$: 'Left'};
var $author$project$Helpers$Right = {$: 'Right'};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $author$project$Helpers$labelPosition = F2(
	function (y1, theta) {
		var thetaF = (theta < 0) ? ((2 * $elm$core$Basics$pi) - $elm$core$Basics$abs(theta)) : theta;
		return ((0 <= thetaF) && (_Utils_cmp(thetaF, $elm$core$Basics$pi / 32) < 1)) ? ((y1 > 0) ? $author$project$Helpers$Above : $author$project$Helpers$Below) : (((_Utils_cmp($elm$core$Basics$pi / 32, thetaF) < 0) && (_Utils_cmp(thetaF, (31 * $elm$core$Basics$pi) / 32) < 1)) ? ((y1 > 0) ? $author$project$Helpers$Left : $author$project$Helpers$Right) : (((_Utils_cmp((31 * $elm$core$Basics$pi) / 32, thetaF) < 0) && (_Utils_cmp(thetaF, (33 * $elm$core$Basics$pi) / 32) < 1)) ? ((y1 > 0) ? $author$project$Helpers$Below : $author$project$Helpers$Above) : (((_Utils_cmp((33 * $elm$core$Basics$pi) / 32, thetaF) < 0) && (_Utils_cmp(thetaF, (63 * $elm$core$Basics$pi) / 32) < 1)) ? ((y1 > 0) ? $author$project$Helpers$Right : $author$project$Helpers$Left) : ((_Utils_cmp((63 * $elm$core$Basics$pi) / 32, thetaF) < 0) ? ((y1 > 0) ? $author$project$Helpers$Above : $author$project$Helpers$Below) : $author$project$Helpers$Above))));
	});
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $author$project$Helpers$latexurl = function (lx) {
	return 'https://finsm.io/latex/render/' + $elm$url$Url$percentEncode(lx);
};
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $author$project$Helpers$latex = F5(
	function (w, h, backclr, txt, align) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(
				function () {
					switch (align.$) {
						case 'AlignLeft':
							return 0;
						case 'AlignRight':
							return -w;
						default:
							return (-w) / 2;
					}
				}(),
				0),
			A3(
				$MacCASOutreach$graphicsvg$GraphicSVG$html,
				w,
				h,
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', '100%'),
							A2($elm$html$Html$Attributes$style, 'height', '100%'),
							A2($elm$html$Html$Attributes$style, '-moz-user-select', 'none'),
							A2($elm$html$Html$Attributes$style, '-webkit-user-select', 'none'),
							A2($elm$html$Html$Attributes$style, '-user-select', 'none')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$img,
							_Utils_ap(
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$style, 'background-color', backclr),
										A2(
										$elm$html$Html$Attributes$attribute,
										'onerror',
										'this.src=\'' + ($author$project$Helpers$latexurl('\\LaTeX?') + '\'')),
										$elm$html$Html$Attributes$src(
										$author$project$Helpers$latexurl(txt)),
										A2($elm$html$Html$Attributes$style, 'height', '100%')
									]),
								_Utils_ap(
									function () {
										switch (align.$) {
											case 'AlignCentre':
												return _List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin-left', 'auto'),
														A2($elm$html$Html$Attributes$style, 'margin-right', 'auto')
													]);
											case 'AlignLeft':
												return _List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin-right', 'auto')
													]);
											default:
												return _List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin-left', 'auto')
													]);
										}
									}(),
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'display', 'block'),
											A2($elm$html$Html$Attributes$style, 'max-width', '100%')
										]))),
							_List_Nil)
						]))));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Path = function (a) {
	return {$: 'Path', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$line = F2(
	function (p1, p2) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$Path(
			_List_fromArray(
				[p1, p2]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Exit, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDown = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MouseDown, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt, msg, shape);
	});
var $author$project$Helpers$add = F2(
	function (_v0, _v1) {
		var x0 = _v0.a;
		var y0 = _v0.b;
		var x1 = _v1.a;
		var y1 = _v1.b;
		return _Utils_Tuple2(x0 + x1, y0 + y1);
	});
var $author$project$Helpers$mult = F2(
	function (_v0, s) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(x * s, y * s);
	});
var $author$project$Helpers$p = F4(
	function (p0, p1, p2, t) {
		return A2(
			$author$project$Helpers$add,
			A2(
				$author$project$Helpers$mult,
				p0,
				A2($elm$core$Basics$pow, 1 - t, 2)),
			A2(
				$author$project$Helpers$add,
				A2(
					$author$project$Helpers$mult,
					A2(
						$author$project$Helpers$mult,
						A2($author$project$Helpers$mult, p1, t),
						1 - t),
					2),
				A2(
					$author$project$Helpers$mult,
					p2,
					A2($elm$core$Basics$pow, t, 2))));
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Machine$renderArrow = function (_v0) {
	return function (_v1) {
		return function (_v2) {
			return function (r0) {
				return function (r1) {
					return function (_char) {
						return function (charID) {
							return function (sel) {
								return function (mistake) {
									return function (s1) {
										return function (s2) {
											return function (model) {
												var x0 = _v0.a;
												var y0 = _v0.b;
												var x1 = _v1.a;
												var y1 = _v1.b;
												var x2 = _v2.a;
												var y2 = _v2.b;
												var tLblW = 200;
												var off = (y1 > 0) ? 8 : (-8);
												var _v3 = _Utils_Tuple2(x2 - x0, y2 - y0);
												var tx = _v3.a;
												var ty = _v3.b;
												var theta = A2($elm$core$Basics$atan2, ty, tx);
												var alignment = function () {
													var _v14 = A2($author$project$Helpers$labelPosition, y1, theta);
													switch (_v14.$) {
														case 'Above':
															return $author$project$Helpers$AlignCentre;
														case 'Below':
															return $author$project$Helpers$AlignCentre;
														case 'Left':
															return $author$project$Helpers$AlignRight;
														default:
															return $author$project$Helpers$AlignLeft;
													}
												}();
												var offset = _Utils_Tuple2(
													(-off) * $elm$core$Basics$sin(theta),
													off * $elm$core$Basics$cos(theta));
												var _v4 = _Utils_Tuple2(
													(x1 * $elm$core$Basics$cos(theta)) - (y1 * $elm$core$Basics$sin(theta)),
													(y1 * $elm$core$Basics$cos(theta)) + (x1 * $elm$core$Basics$sin(theta)));
												var rx = _v4.a;
												var ry = _v4.b;
												var _v5 = _Utils_Tuple2(((x2 + x0) / 2) + rx, ((y2 + y0) / 2) + ry);
												var mx = _v5.a;
												var my = _v5.b;
												var _v6 = _Utils_Tuple2(mx - x2, my - y2);
												var dx1 = _v6.a;
												var dy1 = _v6.b;
												var _v7 = _Utils_Tuple2(mx - x0, my - y0);
												var dx0 = _v7.a;
												var dy0 = _v7.b;
												var _v8 = _Utils_eq(s1, s2) ? _Utils_Tuple2(
													x0 + (r0 * $elm$core$Basics$cos(
														A2($elm$core$Basics$atan2, dy0, dx0) + $elm$core$Basics$degrees(45))),
													y0 + (r0 * $elm$core$Basics$sin(
														A2($elm$core$Basics$atan2, dy0, dx0) + $elm$core$Basics$degrees(45)))) : _Utils_Tuple2(
													x0 + (r0 * $elm$core$Basics$cos(
														A2($elm$core$Basics$atan2, dy0, dx0))),
													y0 + (r0 * $elm$core$Basics$sin(
														A2($elm$core$Basics$atan2, dy0, dx0))));
												var xx0 = _v8.a;
												var yy0 = _v8.b;
												var _v9 = _Utils_eq(s1, s2) ? _Utils_Tuple2(
													x0 + (r0 * $elm$core$Basics$cos(
														A2($elm$core$Basics$atan2, dy0, dx0) - $elm$core$Basics$degrees(45))),
													y0 + (r0 * $elm$core$Basics$sin(
														A2($elm$core$Basics$atan2, dy0, dx0) - $elm$core$Basics$degrees(45)))) : _Utils_Tuple2(
													x2 + (r1 * $elm$core$Basics$cos(
														A2($elm$core$Basics$atan2, dy1, dx1))),
													y2 + (r1 * $elm$core$Basics$sin(
														A2($elm$core$Basics$atan2, dy1, dx1))));
												var xx1 = _v9.a;
												var yy1 = _v9.b;
												return $MacCASOutreach$graphicsvg$GraphicSVG$group(
													_List_fromArray(
														[
															$MacCASOutreach$graphicsvg$GraphicSVG$group(
															_List_fromArray(
																[
																	function () {
																	if (_Utils_eq(s1, s2)) {
																		var mr = $elm$core$Basics$sqrt(
																			A2($elm$core$Basics$pow, mx - x0, 2) + A2($elm$core$Basics$pow, my - y0, 2));
																		var mpl = mr - r0;
																		var ppr = $elm$core$Basics$sqrt(
																			A2($elm$core$Basics$pow, mr, 2) + A2($elm$core$Basics$pow, mpl, 2));
																		var gamma = A2($elm$core$Basics$atan2, mpl, mr);
																		var beta = A2($elm$core$Basics$atan2, ry, rx);
																		var _v10 = _Utils_Tuple2(
																			x0 + (r0 * $elm$core$Basics$cos(beta + gamma)),
																			y0 + (r0 * $elm$core$Basics$sin(beta + gamma)));
																		var x1s = _v10.a;
																		var y1s = _v10.b;
																		var _v11 = _Utils_Tuple2(
																			x0 + (r0 * $elm$core$Basics$cos(beta - gamma)),
																			y0 + (r0 * $elm$core$Basics$sin(beta - gamma)));
																		var x0s = _v11.a;
																		var y0s = _v11.b;
																		return A2(
																			$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDown,
																			$author$project$Machine$SelectArrow(
																				_Utils_Tuple3(s1, charID, s2)),
																			$MacCASOutreach$graphicsvg$GraphicSVG$group(
																				_List_fromArray(
																					[
																						A3(
																						$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
																						$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
																						$MacCASOutreach$graphicsvg$GraphicSVG$black,
																						A2(
																							$MacCASOutreach$graphicsvg$GraphicSVG$curve,
																							_Utils_Tuple2(x0s, y0s),
																							_List_fromArray(
																								[
																									A2(
																									$MacCASOutreach$graphicsvg$GraphicSVG$Pull,
																									_Utils_Tuple2(
																										x0 + (ppr * $elm$core$Basics$cos(beta - gamma)),
																										y0 + (ppr * $elm$core$Basics$sin(beta - gamma))),
																									_Utils_Tuple2(mx, my))
																								]))),
																						A3(
																						$author$project$Machine$arrow,
																						_Utils_Tuple2(mx, my),
																						_Utils_Tuple2(
																							x0 + (ppr * $elm$core$Basics$cos(beta + gamma)),
																							y0 + (ppr * $elm$core$Basics$sin(beta + gamma))),
																						_Utils_Tuple2(x1s, y1s))
																					])));
																	} else {
																		return A2(
																			$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDown,
																			$author$project$Machine$SelectArrow(
																				_Utils_Tuple3(s1, charID, s2)),
																			A3(
																				$author$project$Machine$arrow,
																				_Utils_Tuple2(xx0, yy0),
																				_Utils_Tuple2(mx, my),
																				_Utils_Tuple2(xx1, yy1)));
																	}
																}(),
																	A2(
																	$MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave,
																	$author$project$Machine$MouseLeaveLabel,
																	((!_Utils_eq(s1, s2)) ? A2(
																		$elm$core$Basics$composeR,
																		$MacCASOutreach$graphicsvg$GraphicSVG$move(
																			_Utils_Tuple2(0, 7)),
																		A2(
																			$elm$core$Basics$composeR,
																			$MacCASOutreach$graphicsvg$GraphicSVG$move(
																				A4(
																					$author$project$Helpers$p,
																					_Utils_Tuple2(xx0, yy0),
																					_Utils_Tuple2(mx, my),
																					_Utils_Tuple2(xx1, yy1),
																					0.5)),
																			$MacCASOutreach$graphicsvg$GraphicSVG$move(offset))) : $MacCASOutreach$graphicsvg$GraphicSVG$move(
																		_Utils_Tuple2(mx, my + 12)))(
																		$MacCASOutreach$graphicsvg$GraphicSVG$group(
																			_List_fromArray(
																				[
																					function () {
																					if (model.$ === 'EditingTransitionLabel') {
																						var tId = model.a;
																						var str = model.b;
																						return _Utils_eq(tId, charID) ? A5(
																							$author$project$Utils$textBox,
																							str,
																							(!$elm$core$String$length(str)) ? 34 : (6 * $elm$core$String$length(str)),
																							20,
																							'LaTeX',
																							$author$project$Machine$EditLabel(tId)) : A5(
																							$author$project$Helpers$latex,
																							tLblW,
																							12,
																							mistake ? 'LightSalmon' : 'none',
																							_char,
																							alignment);
																					} else {
																						return A5(
																							$author$project$Helpers$latex,
																							tLblW,
																							12,
																							mistake ? 'LightSalmon' : 'none',
																							_char,
																							alignment);
																					}
																				}(),
																					function () {
																					if (model.$ === 'EditingTransitionLabel') {
																						var tId = model.a;
																						var str = model.b;
																						return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
																					} else {
																						return A2(
																							$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
																							$author$project$Machine$SelectArrow(
																								_Utils_Tuple3(s1, charID, s2)),
																							A2(
																								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																								$MacCASOutreach$graphicsvg$GraphicSVG$blank,
																								A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 50, 20)));
																					}
																				}()
																				]))))
																])),
															sel ? $MacCASOutreach$graphicsvg$GraphicSVG$group(
															_List_fromArray(
																[
																	(!_Utils_eq(s1, s2)) ? A3(
																	$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
																	$MacCASOutreach$graphicsvg$GraphicSVG$dotted(1),
																	$MacCASOutreach$graphicsvg$GraphicSVG$black,
																	A2(
																		$MacCASOutreach$graphicsvg$GraphicSVG$line,
																		_Utils_Tuple2(xx0, yy0),
																		_Utils_Tuple2(mx, my))) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil),
																	(!_Utils_eq(s1, s2)) ? A3(
																	$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
																	$MacCASOutreach$graphicsvg$GraphicSVG$dotted(1),
																	$MacCASOutreach$graphicsvg$GraphicSVG$black,
																	A2(
																		$MacCASOutreach$graphicsvg$GraphicSVG$line,
																		_Utils_Tuple2(xx1, yy1),
																		_Utils_Tuple2(mx, my))) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil),
																	A2(
																	$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt,
																	$author$project$Machine$Drag,
																	A2(
																		$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt,
																		$author$project$Machine$StartDraggingArrow(
																			_Utils_Tuple3(s1, charID, s2)),
																		A2(
																			$MacCASOutreach$graphicsvg$GraphicSVG$move,
																			_Utils_Tuple2(mx, my),
																			A2(
																				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																				$author$project$Helpers$finsmBlue,
																				$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)))))
																])) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil)
														]));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $author$project$Machine$renderArrows = F3(
	function (machine, model, tMistakes) {
		var transPos = machine.stateTransitions;
		var states = machine.q;
		var stateList = $elm$core$Set$toList(states);
		var pos = machine.statePositions;
		var getTransPos = function (_v14) {
			var s1 = _v14.a;
			var _char = _v14.b;
			var s2 = _v14.c;
			var _v12 = A2(
				$elm$core$Dict$get,
				_Utils_Tuple3(s1, _char, s2),
				transPos);
			if (_v12.$ === 'Just') {
				var _v13 = _v12.a;
				var x = _v13.a;
				var y = _v13.b;
				return _Utils_Tuple2(x, y);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		};
		var getPos = function (state) {
			var _v10 = A2($elm$core$Dict$get, state, pos);
			if (_v10.$ === 'Just') {
				var _v11 = _v10.a;
				var x = _v11.a;
				var y = _v11.b;
				return _Utils_Tuple2(x, y);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		};
		var delta = machine.delta;
		var edgeToList = function (state) {
			return $elm$core$Dict$toList(
				function () {
					var _v9 = A2($elm$core$Dict$get, state, delta);
					if (_v9.$ === 'Just') {
						var d = _v9.a;
						return d;
					} else {
						return $elm$core$Dict$empty;
					}
				}());
		};
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			A2(
				$elm$core$List$map,
				function (s1) {
					return $MacCASOutreach$graphicsvg$GraphicSVG$group(
						$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								function (_v0) {
									var chId = _v0.a;
									var ss = _v0.b;
									return A2(
										$elm$core$List$map,
										function (s2) {
											var sel = function () {
												switch (model.$) {
													case 'SelectedArrow':
														var _v7 = model.a;
														var ss1 = _v7.a;
														var _char = _v7.b;
														var ss2 = _v7.c;
														return _Utils_eq(_char, chId);
													case 'DraggingArrow':
														var _v8 = model.a;
														var ss1 = _v8.a;
														var _char = _v8.b;
														var ss2 = _v8.c;
														return _Utils_eq(_char, chId);
													default:
														return false;
												}
											}();
											var getTransMistake = F2(
												function (transMistakes, tId) {
													if (transMistakes.$ === 'Nothing') {
														return false;
													} else {
														var setOfMistakes = transMistakes.a;
														return A2($elm$core$Set$member, tId, setOfMistakes);
													}
												});
											var mistake = A2(getTransMistake, tMistakes, chId);
											var ch = function () {
												var _v4 = A2($elm$core$Dict$get, chId, machine.transitionNames);
												if (_v4.$ === 'Just') {
													var setc = _v4.a;
													return $author$project$Helpers$renderString(
														$elm$core$Set$toList(setc));
												} else {
													return '';
												}
											}();
											var _v1 = getPos(s2);
											var x2 = _v1.a;
											var y2 = _v1.b;
											var _v2 = getTransPos(
												_Utils_Tuple3(s1, chId, s2));
											var x1 = _v2.a;
											var y1 = _v2.b;
											var _v3 = getPos(s1);
											var x0 = _v3.a;
											var y0 = _v3.b;
											return $MacCASOutreach$graphicsvg$GraphicSVG$group(
												_List_fromArray(
													[
														$author$project$Machine$renderArrow(
														_Utils_Tuple2(x0, y0))(
														_Utils_Tuple2(x1, y1))(
														_Utils_Tuple2(x2, y2))(20)(20)(ch)(chId)(sel)(mistake)(s1)(s2)(model)
													]));
										},
										_List_fromArray(
											[ss]));
								},
								edgeToList(s1))));
				},
				stateList));
	});
var $author$project$Machine$MoveMouseOverRim = function (a) {
	return {$: 'MoveMouseOverRim', a: a};
};
var $author$project$Machine$StartDragging = F2(
	function (a, b) {
		return {$: 'StartDragging', a: a, b: b};
	});
var $author$project$Machine$StartMouseOverRim = F2(
	function (a, b) {
		return {$: 'StartMouseOverRim', a: a, b: b};
	});
var $author$project$Machine$StopMouseOverRim = {$: 'StopMouseOverRim'};
var $author$project$Machine$TapState = function (a) {
	return {$: 'TapState', a: a};
};
var $author$project$Helpers$finsmLightBlue = A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 112, 190, 255);
var $MacCASOutreach$graphicsvg$GraphicSVG$lightBlue = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 114, 159, 207, 1);
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyEnter = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$EnterShape, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyEnterAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$EnterAt, msg, shape);
	});
var $author$project$Machine$renderStates = F4(
	function (currentStates, machine, model, env) {
		var thickness = function (state) {
			return A2($elm$core$Set$member, state, currentStates) ? 2 : 1;
		};
		var states = machine.q;
		var stateName = function (sId) {
			var _v8 = A2($elm$core$Dict$get, sId, machine.stateNames);
			if (_v8.$ === 'Just') {
				var n = _v8.a;
				return n;
			} else {
				return '';
			}
		};
		var stateList = $elm$core$Set$toList(states);
		var pos = machine.statePositions;
		var getPos = function (state) {
			var _v6 = A2($elm$core$Dict$get, state, pos);
			if (_v6.$ === 'Just') {
				var _v7 = _v6.a;
				var x = _v7.a;
				var y = _v7.b;
				return _Utils_Tuple2(x, y);
			} else {
				return _Utils_Tuple2(0, 0);
			}
		};
		var finals = machine._final;
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			A2(
				$elm$core$List$map,
				function (sId) {
					return function () {
						if (model.$ === 'EditingStateLabel') {
							return $elm$core$Basics$identity;
						} else {
							return (!env.holdingShift) ? $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt(
								$author$project$Machine$StartDragging(sId)) : $MacCASOutreach$graphicsvg$GraphicSVG$notifyTap(
								$author$project$Machine$TapState(sId));
						}
					}()(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							getPos(sId),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt,
										$author$project$Machine$StartMouseOverRim(sId),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$notifyEnterAt,
											$author$project$Machine$StartMouseOverRim(sId),
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$blank,
												$MacCASOutreach$graphicsvg$GraphicSVG$circle(21)))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt,
										$author$project$Machine$StartDragging(sId),
										A3(
											$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
											$MacCASOutreach$graphicsvg$GraphicSVG$solid(
												thickness(sId)),
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$blank,
												$MacCASOutreach$graphicsvg$GraphicSVG$circle(20)))),
										A2($elm$core$Set$member, sId, finals) ? A3(
										$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
										$MacCASOutreach$graphicsvg$GraphicSVG$solid(
											thickness(sId)),
										$MacCASOutreach$graphicsvg$GraphicSVG$black,
										$MacCASOutreach$graphicsvg$GraphicSVG$circle(17)) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil),
										function () {
										if (model.$ === 'EditingStateLabel') {
											var st = model.a;
											var str = model.b;
											return _Utils_eq(st, sId) ? A5(
												$author$project$Utils$textBox,
												str,
												(!$elm$core$String$length(str)) ? 34 : (6 * $elm$core$String$length(str)),
												20,
												'LaTeX',
												$author$project$Machine$EditLabel(sId)) : $MacCASOutreach$graphicsvg$GraphicSVG$group(
												_List_fromArray(
													[
														A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$move,
														_Utils_Tuple2(0, 9),
														A5(
															$author$project$Helpers$latex,
															25,
															18,
															'none',
															stateName(sId),
															$author$project$Helpers$AlignCentre))
													]));
										} else {
											return $MacCASOutreach$graphicsvg$GraphicSVG$group(
												_List_fromArray(
													[
														A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$move,
														_Utils_Tuple2(0, 9),
														A5(
															$author$project$Helpers$latex,
															25,
															18,
															'none',
															stateName(sId),
															$author$project$Helpers$AlignCentre))
													]));
										}
									}(),
										function () {
										switch (model.$) {
											case 'SelectedState':
												var st = model.a;
												return _Utils_eq(st, sId) ? A3(
													$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
													$MacCASOutreach$graphicsvg$GraphicSVG$solid(1.5),
													$MacCASOutreach$graphicsvg$GraphicSVG$lightBlue,
													$MacCASOutreach$graphicsvg$GraphicSVG$circle(20.75)) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
											case 'MousingOverRim':
												var st = model.a;
												var _v2 = model.b;
												var x = _v2.a;
												var y = _v2.b;
												var _v3 = getPos(st);
												var x0 = _v3.a;
												var y0 = _v3.b;
												var _v4 = _Utils_Tuple2(x - x0, y - y0);
												var dx = _v4.a;
												var dy = _v4.b;
												return _Utils_eq(st, sId) ? $MacCASOutreach$graphicsvg$GraphicSVG$group(
													_List_fromArray(
														[
															A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$notifyEnter,
															$author$project$Machine$StopMouseOverRim,
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																$MacCASOutreach$graphicsvg$GraphicSVG$blank,
																$MacCASOutreach$graphicsvg$GraphicSVG$circle(500))),
															A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$move,
															_Utils_Tuple2(
																20 * $elm$core$Basics$cos(
																	A2($elm$core$Basics$atan2, dy, dx)),
																20 * $elm$core$Basics$sin(
																	A2($elm$core$Basics$atan2, dy, dx))),
															A2(
																$MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave,
																$author$project$Machine$StopMouseOverRim,
																A2(
																	$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt,
																	$author$project$Machine$MoveMouseOverRim,
																	$MacCASOutreach$graphicsvg$GraphicSVG$group(
																		_List_fromArray(
																			[
																				A3(
																				$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
																				$MacCASOutreach$graphicsvg$GraphicSVG$solid(0.5),
																				$MacCASOutreach$graphicsvg$GraphicSVG$black,
																				A2(
																					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																					$MacCASOutreach$graphicsvg$GraphicSVG$white,
																					$MacCASOutreach$graphicsvg$GraphicSVG$circle(7))),
																				A2(
																				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																				$MacCASOutreach$graphicsvg$GraphicSVG$black,
																				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 8, 1.5)),
																				A2(
																				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
																				$MacCASOutreach$graphicsvg$GraphicSVG$black,
																				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 1.5, 8))
																			])))))
														])) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
											case 'AddingArrowOverOtherState':
												var st = model.c;
												return _Utils_eq(st, sId) ? A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave,
													$author$project$Machine$StopMouseOverRim,
													A3(
														$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
														$MacCASOutreach$graphicsvg$GraphicSVG$solid(3),
														$author$project$Helpers$finsmLightBlue,
														$MacCASOutreach$graphicsvg$GraphicSVG$circle(21.5))) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
											default:
												return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
										}
									}()
									]))));
				},
				stateList));
	});
var $author$project$Machine$view = F5(
	function (env, model, machine, currentStates, tMistakes) {
		var _v0 = env.windowSize;
		var winX = _v0.a;
		var winY = _v0.b;
		var dragRegion = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseUp,
			$author$project$Machine$StopDragging,
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt,
				$author$project$Machine$Drag,
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$blank,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, winX, winY))));
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A3($author$project$Machine$renderArrows, machine, model, tMistakes),
					A4($author$project$Machine$renderStates, currentStates, machine, model, env),
					function () {
					switch (model.$) {
						case 'AddingArrow':
							var s = model.a;
							var _v2 = model.b;
							var x = _v2.a;
							var y = _v2.b;
							var s0Pos = function () {
								var _v5 = A2($elm$core$Dict$get, s, machine.statePositions);
								if (_v5.$ === 'Just') {
									var pos = _v5.a;
									return pos;
								} else {
									return _Utils_Tuple2(0, 0);
								}
							}();
							var newTransID = function () {
								var _v4 = $elm$core$List$head(
									$elm$core$Dict$keys(machine.transitionNames));
								if (_v4.$ === 'Just') {
									var _char = _v4.a;
									return _char;
								} else {
									return 0;
								}
							}();
							var newTrans = function () {
								var _v3 = $elm$core$List$head(
									$elm$core$Dict$values(machine.transitionNames));
								if (_v3.$ === 'Just') {
									var schar = _v3.a;
									return $author$project$Helpers$renderString(
										$elm$core$Set$toList(schar));
								} else {
									return ' ';
								}
							}();
							return $author$project$Machine$renderArrow(s0Pos)(
								_Utils_Tuple2(0, 0))(
								_Utils_Tuple2(x, y))(20)(0)(newTrans)(newTransID)(false)(false)(s)(-1)(model);
						case 'AddingArrowOverOtherState':
							var s = model.a;
							var _v6 = model.b;
							var x = _v6.a;
							var y = _v6.b;
							var s1 = model.c;
							var s1Pos = function () {
								var _v10 = A2($elm$core$Dict$get, s1, machine.statePositions);
								if (_v10.$ === 'Just') {
									var pos = _v10.a;
									return pos;
								} else {
									return _Utils_Tuple2(0, 0);
								}
							}();
							var s0Pos = function () {
								var _v9 = A2($elm$core$Dict$get, s, machine.statePositions);
								if (_v9.$ === 'Just') {
									var pos = _v9.a;
									return pos;
								} else {
									return _Utils_Tuple2(0, 0);
								}
							}();
							var pullPos = _Utils_eq(s, s1) ? _Utils_Tuple2(0, 50) : _Utils_Tuple2(0, 0);
							var newTransID = function () {
								var _v8 = $elm$core$List$head(
									$elm$core$Dict$keys(machine.transitionNames));
								if (_v8.$ === 'Just') {
									var _char = _v8.a;
									return _char;
								} else {
									return 0;
								}
							}();
							var newTrans = function () {
								var _v7 = $elm$core$List$head(
									$elm$core$Dict$values(machine.transitionNames));
								if (_v7.$ === 'Just') {
									var schar = _v7.a;
									return $author$project$Helpers$renderString(
										$elm$core$Set$toList(schar));
								} else {
									return ' ';
								}
							}();
							return $author$project$Machine$renderArrow(s0Pos)(pullPos)(s1Pos)(20)(20)(newTrans)(newTransID)(false)(false)(s)(s1)(model);
						default:
							return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}(),
					function () {
					switch (model.$) {
						case 'DraggingState':
							return dragRegion;
						case 'DraggingArrow':
							return dragRegion;
						case 'AddingArrow':
							return dragRegion;
						case 'AddingArrowOverOtherState':
							return dragRegion;
						default:
							return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}()
				]));
	});
var $author$project$Building$view = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var winY = env.windowSize.b;
		var winX = env.windowSize.a;
		var transMistakes = $author$project$Mistakes$getTransitionMistakes(sModel.machine);
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					function () {
					if (env.holdingShift) {
						return $MacCASOutreach$graphicsvg$GraphicSVG$notifyTapAt($author$project$Building$AddState);
					} else {
						var _v1 = model.machineState;
						switch (_v1.$) {
							case 'SelectedState':
								return $MacCASOutreach$graphicsvg$GraphicSVG$notifyTap(
									$author$project$Building$MachineMsg($author$project$Machine$Reset));
							case 'SelectedArrow':
								return $MacCASOutreach$graphicsvg$GraphicSVG$notifyTap(
									$author$project$Building$MachineMsg($author$project$Machine$Reset));
							default:
								return $elm$core$Basics$identity;
						}
					}
				}()(
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$blank,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, winX, winY))),
					function () {
					var _v2 = _Utils_Tuple2(model.machineState, model.snapToGrid);
					_v2$2:
					while (true) {
						if (_v2.b.$ === 'SnapToGrid') {
							switch (_v2.a.$) {
								case 'DraggingState':
									var _v3 = _v2.a;
									var _v4 = _v3.b;
									var ox = _v4.a;
									var oy = _v4.b;
									var _v5 = _v3.c;
									var x = _v5.a;
									var y = _v5.b;
									var n = _v2.b.a;
									return $MacCASOutreach$graphicsvg$GraphicSVG$group(
										_List_fromArray(
											[
												A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$clip,
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$move,
													_Utils_Tuple2(x - ox, y - oy),
													$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
														$MacCASOutreach$graphicsvg$GraphicSVG$circle(30))),
												A3($MacCASOutreach$graphicsvg$GraphicSVG$graphPaperCustom, n, 1, $MacCASOutreach$graphicsvg$GraphicSVG$gray)),
												A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(
													A2($author$project$Helpers$roundTo, 10, x - ox),
													A2($author$project$Helpers$roundTo, 10, y - oy)),
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$filled,
													A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 112, 190, 255),
													$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)))
											]));
								case 'DraggingArrow':
									var _v6 = _v2.a;
									var id = _v6.a;
									var pos = _v6.b;
									var n = _v2.b.a;
									return $MacCASOutreach$graphicsvg$GraphicSVG$group(
										_List_fromArray(
											[
												A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$clip,
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$move,
													pos,
													$MacCASOutreach$graphicsvg$GraphicSVG$ghost(
														$MacCASOutreach$graphicsvg$GraphicSVG$circle(30))),
												A3($MacCASOutreach$graphicsvg$GraphicSVG$graphPaperCustom, n, 1, $MacCASOutreach$graphicsvg$GraphicSVG$gray))
											]));
								default:
									break _v2$2;
							}
						} else {
							break _v2$2;
						}
					}
					return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
				}(),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$map,
					$author$project$Building$MachineMsg,
					A5($author$project$Machine$view, env, model.machineState, sModel.machine, $elm$core$Set$empty, transMistakes)),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((winX / 2) - 30, ((-winY) / 2) + 25),
					$author$project$Building$editingButtons(model))
				]));
	});
var $author$project$Exporting$GenerateOutput = {$: 'GenerateOutput'};
var $author$project$Exporting$HoverErrorEnter = {$: 'HoverErrorEnter'};
var $author$project$Exporting$HoverErrorExit = {$: 'HoverErrorExit'};
var $author$project$Exporting$MachineMsg = function (a) {
	return {$: 'MachineMsg', a: a};
};
var $author$project$Error$NoError = {$: 'NoError'};
var $author$project$Error$contextHasError = F2(
	function (err, mtype) {
		if (mtype.$ === 'DFA') {
			return _Utils_eq(err, $author$project$Error$NoError) ? false : true;
		} else {
			switch (err.$) {
				case 'EpsTransError':
					return true;
				case 'DuplicateStates':
					return true;
				default:
					return false;
			}
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$darkGrey = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 186, 189, 182, 1);
var $author$project$Error$errorIcon = F2(
	function (backclr, shapeclrs) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
					22.5,
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						backclr,
						$MacCASOutreach$graphicsvg$GraphicSVG$triangle(20))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(0, 7.5),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						shapeclrs,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 7.5, 10, 5))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(0, -2.5),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						shapeclrs,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)))
				]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$darkRed = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 164, 0, 0, 1);
var $MacCASOutreach$graphicsvg$GraphicSVG$red = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 204, 0, 0, 1);
var $author$project$Error$errorMenu = F4(
	function (err, mac, winX, winY) {
		var errorReason = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, -40),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$red,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(15, -5),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$darkRed,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									12,
									$MacCASOutreach$graphicsvg$GraphicSVG$text(
										function () {
											_v7$4:
											while (true) {
												switch (err.$) {
													case 'DFAError':
														switch (err.a.$) {
															case 'HasEpsilon':
																var _v8 = err.a;
																return 'Possible cause: There are epsilon transitions';
															case 'Incomplete':
																var _v9 = err.a;
																return 'Possible cause: There are missing transitions';
															case 'Nondeterministic':
																var _v10 = err.a;
																return 'Possible cause: There are extraneous transitions';
															default:
																break _v7$4;
														}
													case 'EpsTransError':
														return 'Cause: Epsilon transitions are mixed with normal transitions';
													default:
														break _v7$4;
												}
											}
											return 'You might have missed something somewhere?';
										}())))))
					])));
		var errorHint = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, -60),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$red,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(15, -5),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$darkRed,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									12,
									$MacCASOutreach$graphicsvg$GraphicSVG$text(
										function () {
											_v3$4:
											while (true) {
												switch (err.$) {
													case 'DFAError':
														switch (err.a.$) {
															case 'HasEpsilon':
																var _v4 = err.a;
																return 'Hint: Try removing all your epsilon transitions';
															case 'Incomplete':
																var _v5 = err.a;
																return 'Hint: Check states for missing transitions';
															case 'Nondeterministic':
																var _v6 = err.a;
																return 'Hint: Find and remove extra transitions';
															default:
																break _v3$4;
														}
													case 'EpsTransError':
														return 'Hint: Switch to Build mode and fix transitions in red';
													default:
														break _v3$4;
												}
											}
											return '';
										}())))))
					])));
		var errorHeader = function (txt) {
			return A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(0, -20),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$scale,
					0.75,
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A2($author$project$Error$errorIcon, $MacCASOutreach$graphicsvg$GraphicSVG$red, $MacCASOutreach$graphicsvg$GraphicSVG$white),
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(20, 0),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									$MacCASOutreach$graphicsvg$GraphicSVG$darkRed,
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$size,
											20,
											$MacCASOutreach$graphicsvg$GraphicSVG$text(txt)))))
							]))));
		};
		var errStId = function () {
			if (err.$ === 'DFAError') {
				var stId = err.b;
				var _v2 = A2($elm$core$Dict$get, stId, mac.stateNames);
				if (_v2.$ === 'Just') {
					var name = _v2.a;
					return name;
				} else {
					return '';
				}
			} else {
				return '';
			}
		}();
		var errorState = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, -80),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$red,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(15, -5),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$darkRed,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									12,
									$MacCASOutreach$graphicsvg$GraphicSVG$text('Hint: Check state '))))),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(150, 3),
						A5($author$project$Helpers$latex, 50, 12, 'blank', errStId, $author$project$Helpers$AlignLeft))
					])));
		var actionHint = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, -100),
			$MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$red,
						$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(15, -5),
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$darkRed,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									12,
									$MacCASOutreach$graphicsvg$GraphicSVG$text('Go to Build mode to fix your machine, or use a NFA')))))
					])));
		switch (err.$) {
			case 'DFAError':
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							errorHeader('DFA error: Your machine has a problem!'),
							errorReason,
							errorHint,
							errorState,
							actionHint
						]));
			case 'EpsTransError':
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							errorHeader('Error: You have invalid state transitions!'),
							errorReason,
							errorHint
						]));
			case 'NoError':
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
			default:
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
		}
	});
var $author$project$Exporting$exportButton = function (clickable) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$group(
		_List_fromArray(
			[
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				clickable ? $author$project$Helpers$finsmBlue : $MacCASOutreach$graphicsvg$GraphicSVG$gray,
				A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 130, 40, 5)),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(0, -7),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					clickable ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
					$MacCASOutreach$graphicsvg$GraphicSVG$centered(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							24,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								$MacCASOutreach$graphicsvg$GraphicSVG$text('Export'))))))
			]));
};
var $author$project$Exporting$exportTikz = function (selected) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$group(
		_List_fromArray(
			[
				A3(
				$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
				$MacCASOutreach$graphicsvg$GraphicSVG$solid(2),
				$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
				A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 250, 75, 5)),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-50, 7.5),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$black,
					$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							20,
							$MacCASOutreach$graphicsvg$GraphicSVG$text('TikZ'))))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(20, 12.5),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$author$project$Helpers$finsmBlue,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 30, 15, 2))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(20, 9.5),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$white,
					$MacCASOutreach$graphicsvg$GraphicSVG$centered(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							10,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								$MacCASOutreach$graphicsvg$GraphicSVG$text('Beta')))))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-50, -10),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$black,
					$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							12,
							$MacCASOutreach$graphicsvg$GraphicSVG$text('Export code to include'))))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-50, -22.5),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$black,
					$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							12,
							$MacCASOutreach$graphicsvg$GraphicSVG$text('in a LaTeX document'))))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-90, 0),
				A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
					$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
					$MacCASOutreach$graphicsvg$GraphicSVG$gray,
					$MacCASOutreach$graphicsvg$GraphicSVG$circle(10))),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-90, 0),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$author$project$Helpers$finsmBlue,
					$MacCASOutreach$graphicsvg$GraphicSVG$circle(8)))
			]));
};
var $elm$core$String$append = _String_append;
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $author$project$Exporting$unlines = A2(
	$elm$core$Basics$composeL,
	$elm$core$String$concat,
	$elm$core$List$intersperse('\n'));
var $author$project$Exporting$indtBy = function (n) {
	return A2(
		$elm$core$Basics$composeL,
		$author$project$Exporting$unlines,
		$elm$core$List$map(
			$elm$core$Basics$append(
				A2($elm$core$String$repeat, n, ' '))));
};
var $author$project$Helpers$roundPrec = F2(
	function (n, m) {
		return $elm$core$Basics$round(
			m * A2($elm$core$Basics$pow, 10, n)) / A2($elm$core$Basics$pow, 10, n);
	});
var $billstclair$elm_sha256$Sha256$initialHs = function (is224) {
	return is224 ? {a: 3238371032, b: 914150663, c: 812702999, d: 4144912697, e: 4290775857, f: 1750603025, g: 1694076839, h: 3204075428} : {a: 1779033703, b: 3144134277, c: 1013904242, d: 2773480762, e: 1359893119, f: 2600822924, g: 528734635, h: 1541459225};
};
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $billstclair$elm_sha256$Sha256$extra = _List_fromArray(
	[-2147483648, 8388608, 32768, 128]);
var $billstclair$elm_sha256$Sha256$get = F2(
	function (index, array) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Array$get, index, array));
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $billstclair$elm_sha256$Sha256$getAt = F2(
	function (index, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm_community$list_extra$List$Extra$getAt, index, list));
	});
var $billstclair$elm_sha256$Sha256$getShift = F2(
	function (i, n) {
		return 8 * (3 - ((i + n) & 3));
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $billstclair$elm_sha256$Sha256$orIntoBlocks = F3(
	function (idx, val, blocks) {
		return A3(
			$elm$core$Array$set,
			idx,
			val | A2($billstclair$elm_sha256$Sha256$get, idx, blocks),
			blocks);
	});
var $billstclair$elm_sha256$Sha256$sl = F2(
	function (num, shift) {
		return num << shift;
	});
var $billstclair$elm_sha256$Sha256$sr = F2(
	function (num, shift) {
		return num >> shift;
	});
var $billstclair$elm_sha256$Sha256$indexLoop = F5(
	function (i, index, message, length, blocks) {
		indexLoop:
		while (true) {
			if (!((_Utils_cmp(index, length) < 0) && (i < 64))) {
				return _Utils_Tuple3(i, index, blocks);
			} else {
				var shift = $billstclair$elm_sha256$Sha256$getShift(i);
				var code = A2($billstclair$elm_sha256$Sha256$get, index, message);
				var _v0 = (code < 128) ? _Utils_Tuple3(
					1,
					0,
					A2(
						$billstclair$elm_sha256$Sha256$sl,
						code,
						shift(0))) : ((code < 2048) ? _Utils_Tuple3(
					2,
					0,
					A2(
						$billstclair$elm_sha256$Sha256$sl,
						128 | (code & 63),
						shift(1)) | A2(
						$billstclair$elm_sha256$Sha256$sl,
						192 | A2($billstclair$elm_sha256$Sha256$sr, code, 6),
						shift(0))) : (((code < 55296) || (code >= 57344)) ? _Utils_Tuple3(
					3,
					0,
					A2(
						$billstclair$elm_sha256$Sha256$sl,
						128 | (code & 63),
						shift(2)) | (A2(
						$billstclair$elm_sha256$Sha256$sl,
						128 | (A2($billstclair$elm_sha256$Sha256$sr, code, 6) & 63),
						shift(1)) | A2(
						$billstclair$elm_sha256$Sha256$sl,
						224 | A2($billstclair$elm_sha256$Sha256$sr, code, 12),
						shift(0)))) : _Utils_Tuple3(
					4,
					1,
					function () {
						var code2 = (A2($billstclair$elm_sha256$Sha256$get, index + 1, message) & 1023) | (65536 + A2($billstclair$elm_sha256$Sha256$sl, code & 1023, 10));
						return A2(
							$billstclair$elm_sha256$Sha256$sl,
							128 | (code2 & 63),
							shift(3)) | (A2(
							$billstclair$elm_sha256$Sha256$sl,
							128 | (A2($billstclair$elm_sha256$Sha256$sr, code2, 6) & 63),
							shift(2)) | (A2(
							$billstclair$elm_sha256$Sha256$sl,
							128 | ((code2 >> 12) & 63),
							shift(1)) | A2(
							$billstclair$elm_sha256$Sha256$sl,
							240 | (code2 >> 18),
							shift(0))));
					}())));
				var iInc = _v0.a;
				var idxInc = _v0.b;
				var val = _v0.c;
				var blocks2 = A3(
					$billstclair$elm_sha256$Sha256$orIntoBlocks,
					A2($billstclair$elm_sha256$Sha256$sr, i, 2),
					val,
					blocks);
				var $temp$i = i + iInc,
					$temp$index = (index + idxInc) + 1,
					$temp$message = message,
					$temp$length = length,
					$temp$blocks = blocks2;
				i = $temp$i;
				index = $temp$index;
				message = $temp$message;
				length = $temp$length;
				blocks = $temp$blocks;
				continue indexLoop;
			}
		}
	});
var $billstclair$elm_sha256$Sha256$srz = F2(
	function (num, shift) {
		return num >>> shift;
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $billstclair$elm_sha256$Sha256$jLoop1 = F2(
	function (j, blocks) {
		jLoop1:
		while (true) {
			var t2 = A2($billstclair$elm_sha256$Sha256$get, j - 2, blocks);
			var t1 = A2($billstclair$elm_sha256$Sha256$get, j - 15, blocks);
			var s1 = A2($billstclair$elm_sha256$Sha256$srz, t2, 10) ^ ((A2($billstclair$elm_sha256$Sha256$srz, t2, 19) | A2($billstclair$elm_sha256$Sha256$sl, t2, 13)) ^ (A2($billstclair$elm_sha256$Sha256$srz, t2, 17) | A2($billstclair$elm_sha256$Sha256$sl, t2, 15)));
			var s0 = A2($billstclair$elm_sha256$Sha256$srz, t1, 3) ^ ((A2($billstclair$elm_sha256$Sha256$srz, t1, 18) | A2($billstclair$elm_sha256$Sha256$sl, t1, 14)) ^ (A2($billstclair$elm_sha256$Sha256$srz, t1, 7) | A2($billstclair$elm_sha256$Sha256$sl, t1, 25)));
			var blocks2 = A3(
				$elm$core$Array$set,
				j,
				A2(
					$billstclair$elm_sha256$Sha256$sl,
					((A2($billstclair$elm_sha256$Sha256$get, j - 16, blocks) + s0) + A2($billstclair$elm_sha256$Sha256$get, j - 7, blocks)) + s1,
					0),
				blocks);
			if (j < 63) {
				var $temp$j = j + 1,
					$temp$blocks = blocks2;
				j = $temp$j;
				blocks = $temp$blocks;
				continue jLoop1;
			} else {
				return blocks2;
			}
		}
	});
var $billstclair$elm_sha256$Sha256$ks = $elm$core$Array$fromList(
	_List_fromArray(
		[1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]));
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $billstclair$elm_sha256$Sha256$lognot = $elm$core$Bitwise$complement;
var $billstclair$elm_sha256$Sha256$jLoopBody2 = F4(
	function (j, ab, hs, blocks) {
		var h = hs.h;
		var s1 = (A2($billstclair$elm_sha256$Sha256$srz, h, 25) | A2($billstclair$elm_sha256$Sha256$sl, h, 7)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, h, 11) | A2($billstclair$elm_sha256$Sha256$sl, h, 21)) ^ (A2($billstclair$elm_sha256$Sha256$srz, h, 6) | A2($billstclair$elm_sha256$Sha256$sl, h, 26)));
		var g = hs.g;
		var f = hs.f;
		var e = hs.e;
		var d = hs.d;
		var s0 = (A2($billstclair$elm_sha256$Sha256$srz, d, 22) | A2($billstclair$elm_sha256$Sha256$sl, d, 10)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, d, 13) | A2($billstclair$elm_sha256$Sha256$sl, d, 19)) ^ (A2($billstclair$elm_sha256$Sha256$srz, d, 2) | A2($billstclair$elm_sha256$Sha256$sl, d, 30)));
		var ch = ($billstclair$elm_sha256$Sha256$lognot(h) & f) ^ (h & e);
		var t1 = (((g + s1) + ch) + A2($billstclair$elm_sha256$Sha256$get, j + 1, $billstclair$elm_sha256$Sha256$ks)) + A2($billstclair$elm_sha256$Sha256$get, j + 1, blocks);
		var c = hs.c;
		var g2 = A2($billstclair$elm_sha256$Sha256$sl, c + t1, 0);
		var ch2 = (g2 & h) ^ ($billstclair$elm_sha256$Sha256$lognot(g2) & e);
		var s3 = (A2($billstclair$elm_sha256$Sha256$srz, g2, 25) | A2($billstclair$elm_sha256$Sha256$sl, g2, 7)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, g2, 11) | A2($billstclair$elm_sha256$Sha256$sl, g2, 21)) ^ (A2($billstclair$elm_sha256$Sha256$srz, g2, 6) | A2($billstclair$elm_sha256$Sha256$sl, g2, 26)));
		var t3 = (((f + s3) + ch2) + A2($billstclair$elm_sha256$Sha256$get, j + 2, $billstclair$elm_sha256$Sha256$ks)) + A2($billstclair$elm_sha256$Sha256$get, j + 2, blocks);
		var b = hs.b;
		var f2 = A2($billstclair$elm_sha256$Sha256$sl, b + t3, 0);
		var ch3 = (f2 & g2) ^ ($billstclair$elm_sha256$Sha256$lognot(f2) & h);
		var s5 = (A2($billstclair$elm_sha256$Sha256$srz, f2, 25) | A2($billstclair$elm_sha256$Sha256$sl, f2, 7)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, f2, 11) | A2($billstclair$elm_sha256$Sha256$sl, f2, 21)) ^ (A2($billstclair$elm_sha256$Sha256$srz, f2, 6) | A2($billstclair$elm_sha256$Sha256$sl, f2, 26)));
		var t5 = (((e + s5) + ch3) + A2($billstclair$elm_sha256$Sha256$get, j + 3, $billstclair$elm_sha256$Sha256$ks)) + A2($billstclair$elm_sha256$Sha256$get, j + 3, blocks);
		var a = hs.a;
		var da = d & a;
		var maj = ab ^ (da ^ (d & b));
		var t2 = s0 + maj;
		var c2 = A2($billstclair$elm_sha256$Sha256$sl, t1 + t2, 0);
		var cd = c2 & d;
		var s2 = (A2($billstclair$elm_sha256$Sha256$srz, c2, 22) | A2($billstclair$elm_sha256$Sha256$sl, c2, 10)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, c2, 13) | A2($billstclair$elm_sha256$Sha256$sl, c2, 19)) ^ (A2($billstclair$elm_sha256$Sha256$srz, c2, 2) | A2($billstclair$elm_sha256$Sha256$sl, c2, 30)));
		var e2 = A2($billstclair$elm_sha256$Sha256$sl, a + t5, 0);
		var maj2 = da ^ (cd ^ (c2 & a));
		var t4 = s2 + maj2;
		var b2 = A2($billstclair$elm_sha256$Sha256$sl, t3 + t4, 0);
		var bc = b2 & c2;
		var maj3 = cd ^ (bc ^ (b2 & d));
		var s4 = (A2($billstclair$elm_sha256$Sha256$srz, b2, 22) | A2($billstclair$elm_sha256$Sha256$sl, b2, 10)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, b2, 13) | A2($billstclair$elm_sha256$Sha256$sl, b2, 19)) ^ (A2($billstclair$elm_sha256$Sha256$srz, b2, 2) | A2($billstclair$elm_sha256$Sha256$sl, b2, 30)));
		var t6 = s4 + maj3;
		var a2 = A2($billstclair$elm_sha256$Sha256$sl, t5 + t6, 0);
		return {a: a2, b: b2, c: c2, d: d, e: e2, f: f2, g: g2, h: h};
	});
var $billstclair$elm_sha256$Sha256$jLoop2 = F5(
	function (j, first, is224, hs, blocks) {
		jLoop2:
		while (true) {
			var jp4 = j + 4;
			var first2 = false;
			var _v0 = function () {
				if (first) {
					if (is224) {
						var t1 = A2($billstclair$elm_sha256$Sha256$get, 0, blocks) - 1413257819;
						return _Utils_Tuple3(
							300032,
							A2($billstclair$elm_sha256$Sha256$sl, t1 - 150054599, 0),
							A2($billstclair$elm_sha256$Sha256$sl, t1 + 24177077, 0));
					} else {
						var t2 = A2($billstclair$elm_sha256$Sha256$get, 0, blocks) - 210244248;
						return _Utils_Tuple3(
							704751109,
							A2($billstclair$elm_sha256$Sha256$sl, t2 - 1521486534, 0),
							A2($billstclair$elm_sha256$Sha256$sl, t2 + 143694565, 0));
					}
				} else {
					var s1 = (A2($billstclair$elm_sha256$Sha256$srz, hs.e, 25) | A2($billstclair$elm_sha256$Sha256$sl, hs.e, 7)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, hs.e, 11) | A2($billstclair$elm_sha256$Sha256$sl, hs.e, 21)) ^ (A2($billstclair$elm_sha256$Sha256$srz, hs.e, 6) | A2($billstclair$elm_sha256$Sha256$sl, hs.e, 26)));
					var s0 = (A2($billstclair$elm_sha256$Sha256$srz, hs.a, 22) | A2($billstclair$elm_sha256$Sha256$sl, hs.a, 10)) ^ ((A2($billstclair$elm_sha256$Sha256$srz, hs.a, 13) | A2($billstclair$elm_sha256$Sha256$sl, hs.a, 19)) ^ (A2($billstclair$elm_sha256$Sha256$srz, hs.a, 2) | A2($billstclair$elm_sha256$Sha256$sl, hs.a, 30)));
					var ch = (hs.e & hs.f) ^ ($billstclair$elm_sha256$Sha256$lognot(hs.e) & hs.g);
					var t3 = (((hs.h + s1) + ch) + A2($billstclair$elm_sha256$Sha256$get, j, $billstclair$elm_sha256$Sha256$ks)) + A2($billstclair$elm_sha256$Sha256$get, j, blocks);
					var ab2 = hs.a & hs.b;
					var maj = (hs.b & hs.c) ^ (ab2 ^ (hs.a & hs.c));
					var t4 = s0 + maj;
					return _Utils_Tuple3(
						ab2,
						A2($billstclair$elm_sha256$Sha256$sl, hs.d + t3, 0),
						A2($billstclair$elm_sha256$Sha256$sl, t3 + t4, 0));
				}
			}();
			var ab = _v0.a;
			var h = _v0.b;
			var d = _v0.c;
			var hs2 = _Utils_update(
				hs,
				{d: d, h: h});
			var hs3 = A4($billstclair$elm_sha256$Sha256$jLoopBody2, j, ab, hs2, blocks);
			if (jp4 < 64) {
				var $temp$j = jp4,
					$temp$first = first2,
					$temp$is224 = is224,
					$temp$hs = hs3,
					$temp$blocks = blocks;
				j = $temp$j;
				first = $temp$first;
				is224 = $temp$is224;
				hs = $temp$hs;
				blocks = $temp$blocks;
				continue jLoop2;
			} else {
				return hs3;
			}
		}
	});
var $elm$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			$elm$core$Array$initialize,
			n,
			function (_v0) {
				return e;
			});
	});
var $billstclair$elm_sha256$Sha256$makeBlocks = function (block) {
	return A3(
		$elm$core$Array$set,
		0,
		block,
		A2($elm$core$Array$repeat, 64, 0));
};
var $billstclair$elm_sha256$Sha256$sumHS = F2(
	function (hs1, hs2) {
		return {
			a: A2($billstclair$elm_sha256$Sha256$sl, hs1.a + hs2.a, 0),
			b: A2($billstclair$elm_sha256$Sha256$sl, hs1.b + hs2.b, 0),
			c: A2($billstclair$elm_sha256$Sha256$sl, hs1.c + hs2.c, 0),
			d: A2($billstclair$elm_sha256$Sha256$sl, hs1.d + hs2.d, 0),
			e: A2($billstclair$elm_sha256$Sha256$sl, hs1.e + hs2.e, 0),
			f: A2($billstclair$elm_sha256$Sha256$sl, hs1.f + hs2.f, 0),
			g: A2($billstclair$elm_sha256$Sha256$sl, hs1.g + hs2.g, 0),
			h: A2($billstclair$elm_sha256$Sha256$sl, hs1.h + hs2.h, 0)
		};
	});
var $billstclair$elm_sha256$Sha256$outerLoop = F9(
	function (first, hs, block, start, bytes, index, is224, message, length) {
		outerLoop:
		while (true) {
			var blocks = $billstclair$elm_sha256$Sha256$makeBlocks(block);
			var _v0 = A5($billstclair$elm_sha256$Sha256$indexLoop, start, index, message, length, blocks);
			var i = _v0.a;
			var index2 = _v0.b;
			var blocks2 = _v0.c;
			var bytes2 = (bytes + i) - start;
			var start2 = i - 64;
			var _v1 = _Utils_eq(index2, length) ? _Utils_Tuple2(
				A3(
					$billstclair$elm_sha256$Sha256$orIntoBlocks,
					A2($billstclair$elm_sha256$Sha256$sr, i, 2),
					A2($billstclair$elm_sha256$Sha256$getAt, i & 3, $billstclair$elm_sha256$Sha256$extra),
					blocks2),
				index2 + 1) : _Utils_Tuple2(blocks2, index2);
			var blocks3 = _v1.a;
			var index3 = _v1.b;
			var block2 = A2($billstclair$elm_sha256$Sha256$get, 16, blocks3);
			var _v2 = ((_Utils_cmp(index3, length) > 0) && (i < 56)) ? _Utils_Tuple2(
				true,
				A3(
					$elm$core$Array$set,
					15,
					A2($billstclair$elm_sha256$Sha256$sl, bytes2, 3),
					blocks3)) : _Utils_Tuple2(false, blocks3);
			var end = _v2.a;
			var blocks4 = _v2.b;
			var blocks5 = A2($billstclair$elm_sha256$Sha256$jLoop1, 16, blocks4);
			var hs2 = A5($billstclair$elm_sha256$Sha256$jLoop2, 0, first, is224, hs, blocks5);
			var hs3 = A2($billstclair$elm_sha256$Sha256$sumHS, hs, hs2);
			if (!end) {
				var $temp$first = false,
					$temp$hs = hs3,
					$temp$block = block2,
					$temp$start = start2,
					$temp$bytes = bytes2,
					$temp$index = index3,
					$temp$is224 = is224,
					$temp$message = message,
					$temp$length = length;
				first = $temp$first;
				hs = $temp$hs;
				block = $temp$block;
				start = $temp$start;
				bytes = $temp$bytes;
				index = $temp$index;
				is224 = $temp$is224;
				message = $temp$message;
				length = $temp$length;
				continue outerLoop;
			} else {
				return hs3;
			}
		}
	});
var $billstclair$elm_sha256$Sha256$stringToMessage = function (string) {
	return $elm$core$Array$fromList(
		A2(
			$elm$core$List$map,
			$elm$core$Char$toCode,
			$elm$core$String$toList(string)));
};
var $elm$core$Char$fromCode = _Char_fromCode;
var $billstclair$elm_sha256$Sha256$toHex1 = function (x) {
	var x2 = x & 15;
	return $elm$core$Char$fromCode(
		x2 + ((x2 < 10) ? $elm$core$Char$toCode(
			_Utils_chr('0')) : ((-10) + $elm$core$Char$toCode(
			_Utils_chr('a')))));
};
var $billstclair$elm_sha256$Sha256$toHex8 = function (x) {
	return $elm$core$String$fromList(
		A2(
			$elm$core$List$map,
			function (shift) {
				return $billstclair$elm_sha256$Sha256$toHex1(
					A2($billstclair$elm_sha256$Sha256$sr, x, shift));
			},
			_List_fromArray(
				[28, 24, 20, 16, 12, 8, 4, 0])));
};
var $billstclair$elm_sha256$Sha256$toHex56 = function (hs) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Basics$append,
		'',
		A2(
			$elm$core$List$map,
			$billstclair$elm_sha256$Sha256$toHex8,
			_List_fromArray(
				[hs.a, hs.b, hs.c, hs.d, hs.e, hs.f, hs.g])));
};
var $billstclair$elm_sha256$Sha256$toHex64 = function (hs) {
	return _Utils_ap(
		$billstclair$elm_sha256$Sha256$toHex56(hs),
		$billstclair$elm_sha256$Sha256$toHex8(hs.h));
};
var $billstclair$elm_sha256$Sha256$hash = F2(
	function (string, is224) {
		var start = 0;
		var message = $billstclair$elm_sha256$Sha256$stringToMessage(string);
		var length = $elm$core$Array$length(message);
		var index = 0;
		var hs = $billstclair$elm_sha256$Sha256$initialHs(is224);
		var bytes = 0;
		var block = 0;
		var hs2 = A9($billstclair$elm_sha256$Sha256$outerLoop, true, hs, block, start, bytes, index, is224, message, length);
		return is224 ? $billstclair$elm_sha256$Sha256$toHex56(hs2) : $billstclair$elm_sha256$Sha256$toHex64(hs2);
	});
var $billstclair$elm_sha256$Sha256$sha256 = function (string) {
	return A2($billstclair$elm_sha256$Sha256$hash, string, false);
};
var $author$project$Exporting$est = A2($elm$time$Time$customZone, (-5) * 60, _List_Nil);
var $author$project$Exporting$monthToInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $author$project$Exporting$timeToString = function (timestamp) {
	var year = A2(
		$elm$time$Time$toYear,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	var second = A2(
		$elm$time$Time$toSecond,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	var month = A2(
		$elm$time$Time$toMonth,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	var minute = A2(
		$elm$time$Time$toMinute,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	var hour = A2(
		$elm$time$Time$toHour,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	var day = A2(
		$elm$time$Time$toDay,
		$author$project$Exporting$est,
		$elm$time$Time$millisToPosix(timestamp));
	return $elm$core$String$fromInt(year) + ('-' + ($elm$core$String$fromInt(
		$author$project$Exporting$monthToInt(month)) + ('-' + ($elm$core$String$fromInt(day) + ('-' + ($elm$core$String$fromInt(hour) + (':' + (((minute < 10) ? '0' : '') + ($elm$core$String$fromInt(minute) + (':' + (((minute < 10) ? '0' : '') + $elm$core$String$fromInt(second))))))))))));
};
var $author$project$Exporting$generateTikz = F2(
	function (time, machine) {
		var statePos = function (sId) {
			var _v15 = A2($elm$core$Dict$get, sId, machine.statePositions);
			if (_v15.$ === 'Just') {
				var p = _v15.a;
				return p;
			} else {
				return _Utils_Tuple2(0, 0);
			}
		};
		var stateName = function (sId) {
			var _v14 = A2($elm$core$Dict$get, sId, machine.stateNames);
			if (_v14.$ === 'Just') {
				var n = _v14.a;
				return n;
			} else {
				return '';
			}
		};
		var scale = 40;
		var dateStr = $author$project$Exporting$timeToString(time);
		var hashCode = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$String$dropRight(56),
				$billstclair$elm_sha256$Sha256$sha256),
			$elm$core$String$append(dateStr));
		var oneState = function (_v12) {
			var sId = _v12.a;
			var _v13 = _v12.b;
			var x = _v13.a;
			var y = _v13.b;
			var start = A2($elm$core$Set$member, sId, machine.start) ? 'line width = 0.55mm,' : 'thick,';
			var _final = A2($elm$core$Set$member, sId, machine._final) ? 'accepting,' : '';
			var _v11 = _Utils_Tuple2(
				$elm$core$String$fromFloat(x / scale),
				$elm$core$String$fromFloat(y / scale));
			var tx = _v11.a;
			var ty = _v11.b;
			return $elm$core$String$concat(
				_List_fromArray(
					[
						'\\node[',
						start,
						_final,
						'state] at (',
						tx,
						',',
						ty,
						') (',
						hashCode(
						stateName(sId)),
						') {$',
						stateName(sId),
						'$};'
					]));
		};
		var states = A2(
			$author$project$Exporting$indtBy,
			4,
			A2(
				$elm$core$List$map,
				oneState,
				$elm$core$Dict$toList(machine.statePositions)));
		var oneTransition = function (_v8) {
			var _v9 = _v8.a;
			var s0 = _v9.a;
			var tId = _v9.b;
			var s1 = _v9.c;
			var _v10 = _v8.b;
			var x1 = _v10.a;
			var y1 = _v10.b;
			var transitionName = function () {
				var _v7 = A2($elm$core$Dict$get, tId, machine.transitionNames);
				if (_v7.$ === 'Just') {
					var n = _v7.a;
					return $author$project$Helpers$renderSet2String(n);
				} else {
					return '';
				}
			}();
			var r = 20;
			var loop = function () {
				if (_Utils_eq(s0, s1)) {
					var loopDistance = $elm$core$String$fromFloat(
						A2(
							$author$project$Helpers$roundPrec,
							2,
							$elm$core$Basics$sqrt(
								A2($elm$core$Basics$pow, x1, 2) + A2($elm$core$Basics$pow, y1, 2)) / 40));
					return $elm$core$String$concat(
						_List_fromArray(
							['loop,min distance = ', loopDistance, 'cm,']));
				} else {
					return '';
				}
			}();
			var _v0 = statePos(s1);
			var x2 = _v0.a;
			var y2 = _v0.b;
			var _v1 = statePos(s0);
			var x0 = _v1.a;
			var y0 = _v1.b;
			var _v2 = _Utils_Tuple2(x2 - x0, y2 - y0);
			var tx = _v2.a;
			var ty = _v2.b;
			var theta = A2($elm$core$Basics$atan2, ty, tx);
			var position = function () {
				var _v6 = A2($author$project$Helpers$labelPosition, y1, theta);
				switch (_v6.$) {
					case 'Above':
						return 'above';
					case 'Below':
						return 'below';
					case 'Left':
						return 'left';
					default:
						return 'right';
				}
			}();
			var _v3 = _Utils_Tuple2(
				(x1 * $elm$core$Basics$cos(theta)) - (y1 * $elm$core$Basics$sin(theta)),
				(y1 * $elm$core$Basics$cos(theta)) + (x1 * $elm$core$Basics$sin(theta)));
			var rx = _v3.a;
			var ry = _v3.b;
			var _v4 = _Utils_Tuple2(((x2 + x0) / 2) + rx, ((y2 + y0) / 2) + ry);
			var mx = _v4.a;
			var my = _v4.b;
			var _v5 = function () {
				if (_Utils_eq(s0, s1)) {
					var mr = $elm$core$Basics$sqrt(
						A2($elm$core$Basics$pow, mx - x0, 2) + A2($elm$core$Basics$pow, my - y0, 2));
					var mpl = mr - r;
					var gamma = A2($elm$core$Basics$atan2, mpl, mr);
					var beta = A2($elm$core$Basics$atan2, ry, rx);
					return _Utils_Tuple2(
						$elm$core$Basics$round(((beta + gamma) * 180) / $elm$core$Basics$pi),
						$elm$core$Basics$round(((beta - gamma) * 180) / $elm$core$Basics$pi));
				} else {
					return _Utils_Tuple2(
						$elm$core$Basics$round(
							(A2($elm$core$Basics$atan2, my - y2, mx - x2) * 180) / $elm$core$Basics$pi),
						$elm$core$Basics$round(
							(A2($elm$core$Basics$atan2, my - y0, mx - x0) * 180) / $elm$core$Basics$pi));
				}
			}();
			var inTheta = _v5.a;
			var outTheta = _v5.b;
			return $elm$core$String$concat(
				_List_fromArray(
					[
						'(',
						hashCode(
						stateName(s0)),
						') edge [',
						loop,
						position,
						',in = ',
						$elm$core$String$fromInt(inTheta),
						', out = ',
						$elm$core$String$fromInt(outTheta),
						'] node {$',
						transitionName,
						'$} (',
						hashCode(
						stateName(s1)),
						')'
					]));
		};
		var transitions = A2(
			$author$project$Exporting$indtBy,
			4,
			A2(
				$elm$core$List$map,
				oneTransition,
				$elm$core$Dict$toList(machine.stateTransitions)));
		return $author$project$Exporting$unlines(
			_List_fromArray(
				[
					'%% Machine generated by https://finsm.io',
					$elm$core$String$concat(
					_List_fromArray(
						['%% ', dateStr])),
					'%% include in preamble:',
					'%% \\usepackage{tikz}',
					'%% \\usetikzlibrary{automata,positioning,arrows}',
					'\\begin{center}',
					'\\begin{tikzpicture}[]',
					states,
					'    \\path[->, thick, >=stealth]',
					transitions,
					'    ;',
					'\\end{tikzpicture}',
					'\\end{center}'
				]));
	});
var $author$project$Error$DFAError = F2(
	function (a, b) {
		return {$: 'DFAError', a: a, b: b};
	});
var $author$project$Error$EpsTransError = {$: 'EpsTransError'};
var $author$project$Error$HasEpsilon = {$: 'HasEpsilon'};
var $author$project$Error$Incomplete = {$: 'Incomplete'};
var $author$project$Error$Nondeterministic = {$: 'Nondeterministic'};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $author$project$Error$machineCheck = function (sModel) {
	var mac = sModel.machine;
	var tMistakes = $author$project$Mistakes$getTransitionMistakes(mac);
	var _catch = function (ms) {
		if (ms.$ === 'Nothing') {
			return _List_Nil;
		} else {
			var s = ms.a;
			return $elm$core$Set$toList(s);
		}
	};
	var getTrans = function (d) {
		return $elm$core$List$sort(
			A2(
				$elm$core$List$concatMap,
				function (e) {
					return _catch(
						A2($elm$core$Dict$get, e, mac.transitionNames));
				},
				$elm$core$Dict$keys(d)));
	};
	var allTransitionLabels = $elm$core$List$sort(
		$elm$core$Set$toList(
			A2(
				$elm$core$Set$remove,
				'\\epsilon',
				A3(
					$elm$core$List$foldr,
					$elm$core$Set$union,
					$elm$core$Set$empty,
					$elm$core$Dict$values(mac.transitionNames)))));
	var foldingFunc = F2(
		function (sTuple, err) {
			switch (err.$) {
				case 'DFAError':
					var errType = err.a;
					var x = err.b;
					return A2($author$project$Error$DFAError, errType, x);
				case 'NoError':
					var transitions = getTrans(sTuple.b);
					var stId = sTuple.a;
					if (_Utils_eq(transitions, allTransitionLabels)) {
						return $author$project$Error$NoError;
					} else {
						if (A2($elm$core$List$member, '\\epsilon', transitions)) {
							return A2($author$project$Error$DFAError, $author$project$Error$HasEpsilon, stId);
						} else {
							var _v1 = A2(
								$elm$core$Basics$compare,
								$elm$core$List$length(transitions),
								$elm$core$List$length(allTransitionLabels));
							switch (_v1.$) {
								case 'LT':
									return A2($author$project$Error$DFAError, $author$project$Error$Incomplete, stId);
								case 'EQ':
									return A2($author$project$Error$DFAError, $author$project$Error$Incomplete, stId);
								default:
									return A2($author$project$Error$DFAError, $author$project$Error$Nondeterministic, stId);
							}
						}
					}
				default:
					var otherErr = err;
					return otherErr;
			}
		});
	return (!_Utils_eq(tMistakes, $elm$core$Maybe$Nothing)) ? $author$project$Error$EpsTransError : A3(
		$elm$core$List$foldr,
		F2(
			function (x, acc) {
				return A2(foldingFunc, x, acc);
			}),
		$author$project$Error$NoError,
		$elm$core$Dict$toList(mac.delta));
};
var $author$project$Exporting$machineSelected = F3(
	function (mtype, winX, winY) {
		var mtypeStr = function () {
			if (mtype.$ === 'DFA') {
				return 'DFA';
			} else {
				return 'NFA';
			}
		}();
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(((-winX) / 2) + 117, (winY / 2) - 32),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
				$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
					$MacCASOutreach$graphicsvg$GraphicSVG$centered(
						$MacCASOutreach$graphicsvg$GraphicSVG$text('Your exported machine type: ' + mtypeStr)))));
	});
var $author$project$Exporting$CloseOutput = {$: 'CloseOutput'};
var $elm$html$Html$Attributes$readonly = $elm$html$Html$Attributes$boolProperty('readOnly');
var $elm$html$Html$textarea = _VirtualDom_node('textarea');
var $author$project$Exporting$output = F3(
	function (w, h, txt) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
					$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
					$MacCASOutreach$graphicsvg$GraphicSVG$gray,
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$white,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, w + 20, h + 20, 5))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((-w) / 2, (h / 2) - 5),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							8,
							$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
								$MacCASOutreach$graphicsvg$GraphicSVG$text('Select all and copy this code into your favourite LaTeX editor'))))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((-w) / 2, (h / 2) - 12.5),
					A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$html,
						w,
						h - 10,
						A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'width', '100%'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'padding', '2px'),
									A2($elm$html$Html$Attributes$style, 'padding-right', '4px')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$textarea,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$value(txt),
											A2($elm$html$Html$Attributes$style, 'width', '99%'),
											A2($elm$html$Html$Attributes$style, 'height', '98%'),
											A2($elm$html$Html$Attributes$style, 'border', 'none'),
											A2($elm$html$Html$Attributes$style, 'resize', 'none'),
											A2($elm$html$Html$Attributes$style, 'border-radius', '2px'),
											A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
											$elm$html$Html$Attributes$readonly(true)
										]),
									_List_Nil)
								])))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((w / 2) - 5, (h / 2) - 5),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
						$author$project$Exporting$CloseOutput,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
							$elm$core$Basics$degrees(45),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A3(
										$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
										$MacCASOutreach$graphicsvg$GraphicSVG$solid(2),
										$MacCASOutreach$graphicsvg$GraphicSVG$gray,
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$white,
											$MacCASOutreach$graphicsvg$GraphicSVG$circle(10))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$gray,
										A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 10, 3, 1.5)),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$gray,
										A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 3, 10, 1.5))
									])))))
				]));
	});
var $author$project$Exporting$view = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var winY = env.windowSize.b;
		var winX = env.windowSize.a;
		var oldMachine = sModel.machine;
		var transMistakes = $author$project$Mistakes$getTransitionMistakes(oldMachine);
		var menu = $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
		var errCheck = $author$project$Error$machineCheck(sModel);
		var errHover = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2((winX / 6) - 100, -105),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave,
				$author$project$Exporting$HoverErrorExit,
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$notifyEnter,
					$author$project$Exporting$HoverErrorEnter,
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A2($author$project$Error$errorIcon, $MacCASOutreach$graphicsvg$GraphicSVG$red, $MacCASOutreach$graphicsvg$GraphicSVG$white),
								_Utils_eq(model, $author$project$Exporting$HoverError) ? $MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(215, -55),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$darkGrey,
											A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 465, 110, 5))),
										A4($author$project$Error$errorMenu, errCheck, sModel.machine, winX, winY)
									])) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil)
							])))));
		var hasErr = A2($author$project$Error$contextHasError, errCheck, sModel.machineType);
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((-winX) / 6, 0),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$map,
						$author$project$Exporting$MachineMsg,
						A5($author$project$Machine$view, env, $author$project$Machine$Regular, sModel.machine, sModel.machine.start, transMistakes))),
					A3($author$project$Exporting$machineSelected, sModel.machineType, winX, winY),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((winX / 6) - 125, 80),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$size,
								20,
								$MacCASOutreach$graphicsvg$GraphicSVG$text('Choose format:'))))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(winX / 6, 0),
					$author$project$Exporting$exportTikz(
						_Utils_eq(pModel.outputType, $author$project$Exporting$Tikz))),
					(hasErr ? $elm$core$Basics$identity : $MacCASOutreach$graphicsvg$GraphicSVG$notifyTap($author$project$Exporting$GenerateOutput))(
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(winX / 6, -100),
						$author$project$Exporting$exportButton(!hasErr))),
					hasErr ? errHover : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil),
					function () {
					var _v1 = _Utils_Tuple2(model, pModel.outputType);
					if (_v1.a.$ === 'ShowingOutput') {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						return A3(
							$author$project$Exporting$output,
							winX / 2,
							winY / 2,
							A2($author$project$Exporting$generateTikz, pModel.time, sModel.machine));
					} else {
						return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}()
				]));
	});
var $author$project$Simulating$AddNewTape = {$: 'AddNewTape'};
var $author$project$Simulating$MachineMsg = function (a) {
	return {$: 'MachineMsg', a: a};
};
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Simulating$latexKeyboard = F3(
	function (w, h, chars) {
		var topRow = _List_fromArray(
			[
				_Utils_chr('q'),
				_Utils_chr('w'),
				_Utils_chr('e'),
				_Utils_chr('r'),
				_Utils_chr('t'),
				_Utils_chr('y'),
				_Utils_chr('u'),
				_Utils_chr('i'),
				_Utils_chr('o'),
				_Utils_chr('p')
			]);
		var keyH = h / 18;
		var keyW = A3(
			$elm$core$Basics$clamp,
			0,
			50,
			A2($elm$core$Basics$min, w / 11, keyH * 1.2));
		var renderKey = F2(
			function (letter, _char) {
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							A3(
							$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
							$MacCASOutreach$graphicsvg$GraphicSVG$solid(0.5),
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$white,
								A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, keyW, keyH, 2))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(((-keyW) / 2) + 2, (keyH / 2) - 8),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 150, 150, 150),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									10,
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										$MacCASOutreach$graphicsvg$GraphicSVG$text(
											$elm$core$String$fromChar(letter)))))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, 10),
							A5($author$project$Helpers$latex, keyW / 1.5, keyH / 1.5, 'white', _char, $author$project$Helpers$AlignCentre))
						]));
			});
		var oneRow = F2(
			function (letters, chs) {
				return $MacCASOutreach$graphicsvg$GraphicSVG$group(
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (x, _v0) {
								var c = _v0.a;
								var l = _v0.b;
								return A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(
										(((keyW + 2) * (x - ($elm$core$List$length(chs) / 2))) + (keyW / 2)) + (w / 33),
										0),
									A2(renderKey, l, c));
							}),
						A3(
							$elm$core$List$map2,
							F2(
								function (a, b) {
									return _Utils_Tuple2(a, b);
								}),
							chs,
							letters)));
			});
		var homeRow = _List_fromArray(
			[
				_Utils_chr('a'),
				_Utils_chr('s'),
				_Utils_chr('d'),
				_Utils_chr('f'),
				_Utils_chr('g'),
				_Utils_chr('h'),
				_Utils_chr('j'),
				_Utils_chr('k'),
				_Utils_chr('l')
			]);
		var fillOutExtras = F3(
			function (n, offset, chs) {
				var newL = A2(
					$elm$core$List$take,
					n,
					A2($elm$core$List$drop, offset, chs));
				return _Utils_ap(
					newL,
					A2(
						$elm$core$List$repeat,
						n - $elm$core$List$length(newL),
						'\\ '));
			});
		var botRow = _List_fromArray(
			[
				_Utils_chr('z'),
				_Utils_chr('x'),
				_Utils_chr('c'),
				_Utils_chr('v'),
				_Utils_chr('b'),
				_Utils_chr('n'),
				_Utils_chr('m')
			]);
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((-keyW) / 3, 0),
					A2(
						oneRow,
						topRow,
						A3(fillOutExtras, 10, 9, chars))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2((-keyW) / 3, (-keyH) - 2),
					A2(
						oneRow,
						homeRow,
						A3(fillOutExtras, 9, 0, chars))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(-keyW, (-(keyH + 2)) * 2),
					A2(
						oneRow,
						botRow,
						A3(fillOutExtras, 7, 19, chars)))
				]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$lightGray = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 238, 238, 236, 1);
var $author$project$Simulating$machineDefn = F4(
	function (sModel, mtype, winX, winY) {
		var machineHeader = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(((-winX) / 2) + 492, (winY / 6) - 15),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$size,
						16,
						$MacCASOutreach$graphicsvg$GraphicSVG$text('Machine')))));
		var machine = sModel.machine;
		var getStateName = function (sId) {
			var _v2 = A2($elm$core$Dict$get, sId, machine.stateNames);
			if (_v2.$ === 'Just') {
				var n = _v2.a;
				return n;
			} else {
				return '\\ ';
			}
		};
		if (mtype.$ === 'NFA') {
			return $MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						machineHeader,
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 500, (winY / 6) - 25),
						A5($author$project$Helpers$latex, 500, 18, 'blank', 'let\\ N = (Q,\\Sigma,\\Delta,S,F)', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 500, (winY / 6) - 45),
						A5($author$project$Helpers$latex, 500, 14, 'blank', 'where', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 65),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'Q = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								$elm$core$Dict$values(machine.stateNames)) + ' \\}'),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 90),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'\\Sigma = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								$elm$core$Set$toList(
									A2(
										$elm$core$Set$remove,
										'\\epsilon',
										A3(
											$elm$core$List$foldl,
											$elm$core$Set$union,
											$elm$core$Set$empty,
											$elm$core$Dict$values(machine.transitionNames))))) + ' \\}'),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 115),
						A5($author$project$Helpers$latex, 500, 18, 'blank', '\\Delta = (above)', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 140),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'S = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								A2(
									$elm$core$List$map,
									getStateName,
									$elm$core$Set$toList(machine.start))) + ' \\}'),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 165),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'F = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								A2(
									$elm$core$List$map,
									getStateName,
									$elm$core$Set$toList(machine._final))) + ' \\}'),
							$author$project$Helpers$AlignLeft))
					]));
		} else {
			return $MacCASOutreach$graphicsvg$GraphicSVG$group(
				_List_fromArray(
					[
						machineHeader,
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 500, (winY / 6) - 25),
						A5($author$project$Helpers$latex, 500, 18, 'blank', 'let\\ M = (Q,\\Sigma,\\delta,s,F)', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 500, (winY / 6) - 45),
						A5($author$project$Helpers$latex, 500, 14, 'blank', 'where', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 65),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'Q = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								$elm$core$Dict$values(machine.stateNames)) + ' \\}'),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 90),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'\\Sigma = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								$elm$core$Set$toList(
									A2(
										$elm$core$Set$remove,
										'\\epsilon',
										A3(
											$elm$core$List$foldl,
											$elm$core$Set$union,
											$elm$core$Set$empty,
											$elm$core$Dict$values(machine.transitionNames))))) + ' \\}'),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 115),
						A5($author$project$Helpers$latex, 500, 18, 'blank', '\\delta = (above)', $author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 140),
						A5(
							$author$project$Helpers$latex,
							500,
							14,
							'blank',
							's = ' + function () {
								var _v1 = $elm$core$Set$toList(machine.start);
								if (!_v1.b) {
									return 'Please\\ select\\ a\\ start\\ state';
								} else {
									if (!_v1.b.b) {
										var x = _v1.a;
										return getStateName(x);
									} else {
										var x = _v1.a;
										var xs = _v1.b;
										return 'Congratulations,\\ you\\ found\\ a\\ bug!';
									}
								}
							}(),
							$author$project$Helpers$AlignLeft)),
						A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 510, (winY / 6) - 160),
						A5(
							$author$project$Helpers$latex,
							500,
							18,
							'blank',
							'F = \\{ ' + (A2(
								$elm$core$String$join,
								',',
								A2(
									$elm$core$List$map,
									getStateName,
									$elm$core$Set$toList(machine._final))) + ' \\}'),
							$author$project$Helpers$AlignLeft))
					]));
		}
	});
var $author$project$Simulating$ChangeMachine = function (a) {
	return {$: 'ChangeMachine', a: a};
};
var $author$project$Simulating$machineModeButtons = F3(
	function (mtype, winX, winY) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
					$author$project$Simulating$ChangeMachine($author$project$SharedModel$DFA),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 20, (winY / 2) - 32),
						$MacCASOutreach$graphicsvg$GraphicSVG$group(
							_List_fromArray(
								[
									A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
									$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
									$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										_Utils_eq(mtype, $author$project$SharedModel$DFA) ? $author$project$Helpers$finsmLightBlue : $MacCASOutreach$graphicsvg$GraphicSVG$blank,
										A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 30, 15, 1))),
									A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(0, -4),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										_Utils_eq(mtype, $author$project$SharedModel$DFA) ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
										$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
											$MacCASOutreach$graphicsvg$GraphicSVG$centered(
												$MacCASOutreach$graphicsvg$GraphicSVG$text('DFA')))))
								])))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
					$author$project$Simulating$ChangeMachine($author$project$SharedModel$NFA),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$move,
						_Utils_Tuple2(((-winX) / 2) + 52, (winY / 2) - 32),
						$MacCASOutreach$graphicsvg$GraphicSVG$group(
							_List_fromArray(
								[
									A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
									$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
									$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										_Utils_eq(mtype, $author$project$SharedModel$NFA) ? $author$project$Helpers$finsmLightBlue : $MacCASOutreach$graphicsvg$GraphicSVG$blank,
										A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 30, 15, 1))),
									A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(0, -4),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										_Utils_eq(mtype, $author$project$SharedModel$NFA) ? $MacCASOutreach$graphicsvg$GraphicSVG$white : $MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
										$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
											$MacCASOutreach$graphicsvg$GraphicSVG$centered(
												$MacCASOutreach$graphicsvg$GraphicSVG$text('NFA')))))
								]))))
				]));
	});
var $author$project$Simulating$ChangeTape = function (a) {
	return {$: 'ChangeTape', a: a};
};
var $author$project$Simulating$DeleteTape = function (a) {
	return {$: 'DeleteTape', a: a};
};
var $author$project$Simulating$EditTape = function (a) {
	return {$: 'EditTape', a: a};
};
var $author$project$Simulating$HoverErrorEnter = function (a) {
	return {$: 'HoverErrorEnter', a: a};
};
var $author$project$Simulating$HoverErrorExit = {$: 'HoverErrorExit'};
var $MacCASOutreach$graphicsvg$GraphicSVG$blue = A4($MacCASOutreach$graphicsvg$GraphicSVG$RGBA, 52, 101, 164, 1);
var $author$project$Helpers$editIcon = $MacCASOutreach$graphicsvg$GraphicSVG$group(
	_List_fromArray(
		[
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(3, 3),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
				$elm$core$Basics$degrees(45),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 21, 137, 255),
					A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 5, 2)))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
			$elm$core$Basics$degrees(-15),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$blue,
				$MacCASOutreach$graphicsvg$GraphicSVG$triangle(1)))
		]));
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var $elm$core$Array$indexedMap = F2(
	function (func, _v0) {
		var len = _v0.a;
		var tree = _v0.c;
		var tail = _v0.d;
		var initialBuilder = {
			nodeList: _List_Nil,
			nodeListSize: 0,
			tail: A3(
				$elm$core$Elm$JsArray$indexedMap,
				func,
				$elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.nodeListSize * $elm$core$Array$branchFactor;
					var mappedLeaf = $elm$core$Array$Leaf(
						A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						nodeList: A2($elm$core$List$cons, mappedLeaf, builder.nodeList),
						nodeListSize: builder.nodeListSize + 1,
						tail: builder.tail
					};
				}
			});
		return A2(
			$elm$core$Array$builderToArray,
			true,
			A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$square = function (r) {
	return A2($MacCASOutreach$graphicsvg$GraphicSVG$Rect, r, r);
};
var $author$project$Helpers$trashIcon = $MacCASOutreach$graphicsvg$GraphicSVG$group(
	_List_fromArray(
		[
			A3(
			$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
			$MacCASOutreach$graphicsvg$GraphicSVG$solid(4),
			$MacCASOutreach$graphicsvg$GraphicSVG$black,
			A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 30, 40, 3)),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, 19.5),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 42, 5))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, 21.5),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 36, 5, 1))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, 23.5),
			A3(
				$MacCASOutreach$graphicsvg$GraphicSVG$outlined,
				$MacCASOutreach$graphicsvg$GraphicSVG$solid(3),
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 10, 10, 1))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$filled,
			$MacCASOutreach$graphicsvg$GraphicSVG$black,
			A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 4, 30)),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(-8, 0),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 4, 30))),
			A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(8, 0),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$black,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 4, 30)))
		]));
var $author$project$Simulating$renderTape = F7(
	function (model, input, tapeSt, tapeId, selectedId, inputAt, showButtons) {
		var xpad = 20;
		var hoverOn = function () {
			if ((model.$ === 'Default') && (model.c.$ === 'Just')) {
				var errId = model.c.a;
				return _Utils_eq(errId, tapeId) ? true : false;
			} else {
				return false;
			}
		}();
		var errWindow = $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(400, 5),
					A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
						$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
						$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$white,
							A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 800, 30, 2)))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$red,
					$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$size,
							25,
							$MacCASOutreach$graphicsvg$GraphicSVG$text('This tape has stale transitions. Modify or delete it!'))))
				]));
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_Utils_ap(
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$indexedMap,
						F2(
							function (n, st) {
								return A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
									$author$project$Simulating$ChangeTape(tapeId),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(
											(n * xpad) + ((!showButtons) ? (xpad / 2) : 0),
											0),
										$MacCASOutreach$graphicsvg$GraphicSVG$group(
											_List_fromArray(
												[
													A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$move,
													_Utils_Tuple2(0, 3),
													A3(
														$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
														$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
														_Utils_eq(tapeSt, $author$project$Simulating$Fresh) ? $MacCASOutreach$graphicsvg$GraphicSVG$black : $MacCASOutreach$graphicsvg$GraphicSVG$red,
														A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$filled,
															$MacCASOutreach$graphicsvg$GraphicSVG$white,
															$MacCASOutreach$graphicsvg$GraphicSVG$square(xpad)))),
													A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$move,
													_Utils_Tuple2(0, 10.25),
													A5($author$project$Helpers$latex, xpad * 0.9, xpad * 0.7, 'white', st, $author$project$Helpers$AlignCentre))
												]))));
							}),
						input)),
				_Utils_ap(
					_Utils_eq(tapeId, selectedId) ? _List_fromArray(
						[
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2((xpad / 2) + (xpad * inputAt), 0),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(0, (xpad / 2) + 5.75),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
											$elm$core$Basics$degrees(30),
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$black,
												$MacCASOutreach$graphicsvg$GraphicSVG$triangle(2.25)))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(0, ((-xpad) / 2) + 0.25),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
											$elm$core$Basics$degrees(-30),
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$black,
												$MacCASOutreach$graphicsvg$GraphicSVG$triangle(2.25)))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(0, 3),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 2, xpad + 1)))
									])))
						]) : _List_Nil,
					showButtons ? _List_fromArray(
						[
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
							$author$project$Simulating$EditTape(tapeId),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(
									$elm$core$Array$length(input) * xpad,
									3),
								$MacCASOutreach$graphicsvg$GraphicSVG$group(
									_List_fromArray(
										[
											A3(
											$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
											$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
											$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$white,
												A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 15, 15, 2))),
											A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$repaint,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(-3, -3),
												A2($MacCASOutreach$graphicsvg$GraphicSVG$scale, 1.5, $author$project$Helpers$editIcon)))
										])))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
							$author$project$Simulating$DeleteTape(tapeId),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(
									($elm$core$Array$length(input) + 1) * xpad,
									3),
								$MacCASOutreach$graphicsvg$GraphicSVG$group(
									_List_fromArray(
										[
											A3(
											$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
											$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
											$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$filled,
												$MacCASOutreach$graphicsvg$GraphicSVG$white,
												A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 15, 15, 2))),
											A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$move,
											_Utils_Tuple2(0, -1),
											A2($MacCASOutreach$graphicsvg$GraphicSVG$scale, 0.2, $author$project$Helpers$trashIcon))
										])))),
							(!_Utils_eq(tapeSt, $author$project$Simulating$Fresh)) ? A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$notifyLeave,
							$author$project$Simulating$HoverErrorExit,
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$notifyEnter,
								$author$project$Simulating$HoverErrorEnter(tapeId),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(
										($elm$core$Array$length(input) + 2) * xpad,
										1),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$scale,
										0.5,
										$MacCASOutreach$graphicsvg$GraphicSVG$group(
											_Utils_ap(
												_List_fromArray(
													[
														A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
														22.5,
														A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$filled,
															$MacCASOutreach$graphicsvg$GraphicSVG$red,
															$MacCASOutreach$graphicsvg$GraphicSVG$triangle(20))),
														A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$move,
														_Utils_Tuple2(0, 7.5),
														A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$filled,
															$MacCASOutreach$graphicsvg$GraphicSVG$white,
															A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 7.5, 10, 5))),
														A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$move,
														_Utils_Tuple2(0, -2.5),
														A2(
															$MacCASOutreach$graphicsvg$GraphicSVG$filled,
															$MacCASOutreach$graphicsvg$GraphicSVG$white,
															$MacCASOutreach$graphicsvg$GraphicSVG$circle(3)))
													]),
												hoverOn ? _List_fromArray(
													[errWindow]) : _List_Nil)))))) : $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil)
						]) : _List_Nil)));
	});
var $author$project$Simulating$view = F2(
	function (env, _v0) {
		var model = _v0.a;
		var pModel = _v0.b;
		var sModel = _v0.c;
		var winY = env.windowSize.b;
		var winX = env.windowSize.a;
		var validCheck = $author$project$Error$machineCheck(sModel);
		var transMistakes = $author$project$Mistakes$getTransitionMistakes(sModel.machine);
		var tapes = pModel.tapes;
		var oldMachine = sModel.machine;
		var menu = $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(((-winX) / 2) + 2, (winY / 6) - 15),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$size,
								16,
								$MacCASOutreach$graphicsvg$GraphicSVG$text('Simulate'))))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(((-winX) / 2) + 85, (winY / 6) - 15),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$size,
								6,
								$MacCASOutreach$graphicsvg$GraphicSVG$text('(Click to toggle start state(s), right arrow to scrub through tape)'))))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(
						((-winX) / 2) + 20,
						((winY / 6) - 35) - (25 * $elm$core$Dict$size(pModel.tapes))),
					$MacCASOutreach$graphicsvg$GraphicSVG$group(
						_List_fromArray(
							[
								A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
								$MacCASOutreach$graphicsvg$GraphicSVG$solid(1),
								$MacCASOutreach$graphicsvg$GraphicSVG$darkGray,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									$MacCASOutreach$graphicsvg$GraphicSVG$white,
									A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, 15, 15, 2))),
								A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$notifyTap,
								$author$project$Simulating$AddNewTape,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									_Utils_Tuple2(-4.5, -5),
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$black,
										$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
											A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$size,
												16,
												$MacCASOutreach$graphicsvg$GraphicSVG$text('+'))))))
							]))),
					function () {
					if (model.$ === 'Default') {
						var tapeId = model.a;
						var charId = model.b;
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(((-winX) / 2) + 20, (winY / 6) - 40),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								A2(
									$elm$core$List$indexedMap,
									F2(
										function (x, _v6) {
											var chId = _v6.a;
											var _v7 = _v6.b;
											var ch = _v7.a;
											var tapeSt = _v7.b;
											return A2(
												$MacCASOutreach$graphicsvg$GraphicSVG$move,
												_Utils_Tuple2(0, (-x) * 25),
												A7($author$project$Simulating$renderTape, model, ch, tapeSt, chId, tapeId, charId, true));
										}),
									$elm$core$Dict$toList(tapes))));
					} else {
						return $MacCASOutreach$graphicsvg$GraphicSVG$group(_List_Nil);
					}
				}()
				]));
		var chars = $elm$core$Set$toList(
			A2(
				$elm$core$Set$remove,
				'\\epsilon',
				A3(
					$elm$core$List$foldr,
					$elm$core$Set$union,
					$elm$core$Set$empty,
					$elm$core$Dict$values(oldMachine.transitionNames))));
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_List_fromArray(
				[
					function () {
					if (model.$ === 'Default') {
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, (-winY) / 3),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$lightGray,
										A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, winX, winY / 3)),
										A4($author$project$Simulating$machineDefn, sModel, sModel.machineType, winX, winY),
										A2($author$project$Error$contextHasError, validCheck, sModel.machineType) ? A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(((-winX) / 2) + 20, winY / 6),
										A4($author$project$Error$errorMenu, validCheck, oldMachine, winX, winY)) : menu
									])));
					} else {
						var tapeId = model.a;
						var _v2 = function () {
							var _v3 = A2($elm$core$Dict$get, tapeId, pModel.tapes);
							if (_v3.$ === 'Just') {
								var _v4 = _v3.a;
								var t = _v4.a;
								var st = _v4.b;
								return _Utils_Tuple2(t, st);
							} else {
								return _Utils_Tuple2($elm$core$Array$empty, $author$project$Simulating$Fresh);
							}
						}();
						var tape = _v2.a;
						var tapeSt = _v2.b;
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, (-winY) / 3),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								_List_fromArray(
									[
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$filled,
										$MacCASOutreach$graphicsvg$GraphicSVG$lightGray,
										A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, winX, winY / 3)),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(((-winX) / 2) + 2, (winY / 6) - 15),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$size,
													16,
													$MacCASOutreach$graphicsvg$GraphicSVG$text('Edit Tape'))))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(((-winX) / 2) + 95, (winY / 6) - 15),
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
												A2(
													$MacCASOutreach$graphicsvg$GraphicSVG$size,
													6,
													$MacCASOutreach$graphicsvg$GraphicSVG$text('(Type symbols with your keyboard; backspace to delete; enter to accept)'))))),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(0, 0),
										A3($author$project$Simulating$latexKeyboard, winX, winY, chars)),
										A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$move,
										_Utils_Tuple2(
											(-10) * $elm$core$Array$length(tape),
											(winY / 6) - 65),
										A7($author$project$Simulating$renderTape, model, tape, tapeSt, tapeId, -1, -1, false))
									])));
					}
				}(),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(0, winY / 6),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$map,
						$author$project$Simulating$MachineMsg,
						A5($author$project$Machine$view, env, $author$project$Machine$Regular, sModel.machine, pModel.currentStates, transMistakes))),
					A3($author$project$Simulating$machineModeButtons, sModel.machineType, winX, winY)
				]));
	});
var $author$project$Main$view = function (model) {
	var winY = model.environment.windowSize.b;
	var winX = model.environment.windowSize.a;
	var appState = model.appModel.present;
	return A3(
		$MacCASOutreach$graphicsvg$GraphicSVG$collage,
		winX,
		winY,
		_List_fromArray(
			[
				function () {
				var _v0 = appState.appState;
				switch (_v0.$) {
					case 'Building':
						var m = _v0.a;
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$map,
							$author$project$Main$BMsg,
							A2(
								$author$project$Building$view,
								model.environment,
								_Utils_Tuple3(m, appState.buildingData, appState.sharedModel)));
					case 'Simulating':
						var m = _v0.a;
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$map,
							$author$project$Main$SMsg,
							A2(
								$author$project$Simulating$view,
								model.environment,
								_Utils_Tuple3(m, appState.simulatingData, appState.sharedModel)));
					default:
						var m = _v0.a;
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$map,
							$author$project$Main$EMsg,
							A2(
								$author$project$Exporting$view,
								model.environment,
								_Utils_Tuple3(m, appState.exportingData, appState.sharedModel)));
				}
			}(),
				$author$project$Main$modeButtons(model),
				A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2((winX / 2) - 25, ((-winY) / 2) + 25),
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$addHyperlink,
					'https://github.com/CSchank/finsm/wiki',
					A2(
						$author$project$Helpers$icon,
						false,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, -9),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 220, 220, 220),
								$MacCASOutreach$graphicsvg$GraphicSVG$centered(
									$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$size,
											30,
											$MacCASOutreach$graphicsvg$GraphicSVG$text('?')))))))))
			]));
};
var $author$project$Main$main = $MacCASOutreach$graphicsvg$GraphicSVG$app(
	{
		init: F3(
			function (flags, url, key) {
				var _v0 = $author$project$SaveLoad$initSaveModel;
				var initSave = _v0.a;
				var saveCmd = _v0.b;
				return _Utils_Tuple2(
					{appModel: $author$project$Main$initAppModel, environment: $author$project$Environment$init, saveModel: initSave},
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$perform,
								function (vp) {
									return $author$project$Main$WindowSize(
										_Utils_Tuple2(
											$elm$core$Basics$round(vp.viewport.width),
											$elm$core$Basics$round(vp.viewport.height)));
								},
								$elm$browser$Browser$Dom$getViewport),
								A2($elm$core$Task$perform, $author$project$Main$GetTime, $elm$time$Time$now),
								A2($elm$core$Platform$Cmd$map, $author$project$Main$SaveMsg, saveCmd),
								A2($elm$core$Task$perform, $author$project$Main$GetTZ, $elm$time$Time$here)
							])));
			}),
		onUrlChange: $author$project$Main$UrlChange,
		onUrlRequest: $author$project$Main$UrlRequest,
		subscriptions: function (model) {
			return $elm$core$Platform$Sub$batch(
				_List_fromArray(
					[
						$elm$browser$Browser$Events$onResize(
						F2(
							function (w, h) {
								return $author$project$Main$WindowSize(
									_Utils_Tuple2(w, h));
							})),
						$elm$browser$Browser$Events$onKeyDown(
						A2(
							$elm$json$Json$Decode$map,
							$author$project$Main$KeyPressed,
							A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))),
						$elm$browser$Browser$Events$onKeyUp(
						A2(
							$elm$json$Json$Decode$map,
							$author$project$Main$KeyReleased,
							A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))),
						$elm$browser$Browser$Events$onVisibilityChange($author$project$Main$VisibilityChanged),
						function () {
						var _v1 = model.appModel.present.appState;
						switch (_v1.$) {
							case 'Building':
								var m = _v1.a;
								return A2(
									$elm$core$Platform$Sub$map,
									$author$project$Main$BMsg,
									$author$project$Building$subscriptions(m));
							case 'Simulating':
								var m = _v1.a;
								return A2(
									$elm$core$Platform$Sub$map,
									$author$project$Main$SMsg,
									$author$project$Simulating$subscriptions(m));
							default:
								var m = _v1.a;
								return A2(
									$elm$core$Platform$Sub$map,
									$author$project$Main$EMsg,
									$author$project$Exporting$subscriptions(m));
						}
					}(),
						A2($elm$time$Time$every, 5000, $author$project$Main$GetTime),
						A2(
						$elm$core$Platform$Sub$map,
						$author$project$Main$SaveMsg,
						$author$project$SaveLoad$subscriptions(model.saveModel))
					]));
		},
		update: $author$project$Main$update,
		view: function (m) {
			return {
				body: $author$project$Main$view(m),
				title: 'finsm - create and simulate finite state machines'
			};
		}
	});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));